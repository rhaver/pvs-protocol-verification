(|multipar|
 (|Par_TCC1| "" (SKOLEM!)
  (("" (GROUND)
    (("1" (INST + "lambda i : null")
      (("1" (EXPAND "prod") (("1" (PROPAX) NIL NIL)) NIL)
       ("2" (REDUCE) NIL NIL))
      NIL)
     ("2" (AUTO-REWRITE "prefix_closed")
      (("2" (ASSERT)
        (("2" (SKOSIMP*)
          (("2" (FORWARD-CHAIN "prefix_multiprod")
            (("2" (SKOSIMP)
              (("2" (INST?)
                (("2" (SKOLEM!)
                  (("2" (INST?)
                    (("2" (TYPEPRED "P!1(x1!1)")
                      (("2" (ASSERT)
                        (("2" (INST?) (("2" (ASSERT) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|sigma_par2| "" (EXPAND "Par")
  (("" (EXPAND "sigma")
    ((""
      (GRIND :DEFS NIL :THEORIES ("sets[T]" "sets[trace[T]]") :IF-MATCH
       NIL)
      (("" (FORWARD-CHAIN "sigma_multiprod")
        (("" (REPLACE -1)
          (("" (EXPAND "union")
            (("" (SKOLEM!)
              (("" (INST + "i!1") (("" (INST?) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|sigma_free_par2| "" (EXPAND "Interleave")
  (("" (SKOLEM!)
    (("" (APPLY-EXTENSIONALITY :HIDE? T)
      (("" (IFF)
        (("" (GROUND)
          (("1" (USE "sigma_par2")
            (("1" (EXPAND "subset?")
              (("1" (EXPAND "member")
                (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (EXPAND "union")
            (("2" (EXPAND "Par")
              (("2" (EXPAND "sigma")
                (("2" (SKOSIMP* :PREDS? T)
                  (("2" (INST?)
                    (("2"
                      (INST +
                       "lambda i : IF i = i!1 THEN t!1 ELSE null[T] ENDIF")
                      (("1"
                        (LEMMA "free_multiprod" ("j" "i!1" "u" "t!1"))
                        (("1"
                          (CASE-REPLACE
                           "(LAMBDA i: IF i = i!1 THEN t!1 ELSE null[T] ENDIF) = ((LAMBDA i: null[T]) WITH [(i!1) := t!1])")
                          (("1" (DELETE -1 -3 2)
                            (("1" (APPLY-EXTENSIONALITY :HIDE? T)
                              (("1" (SMASH) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)
                       ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|par_full2| "" (AUTO-REWRITE "Par" "intersection")
  (("" (SKOLEM!)
    (("" (APPLY-EXTENSIONALITY :HIDE? T)
      (("" (IFF)
        (("" (GROUND)
          (("1" (SKOLEM!)
            (("1" (REWRITE "multiprod_fullset")
              (("1" (SKOLEM!)
                (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)) NIL))
              NIL))
            NIL)
           ("2" (INST + "lambda i : x!1")
            (("2" (REWRITE "multiprod_fullset") NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|interleave_subset3| "" (GRIND :EXCLUDE ("prod"))
  (("" (USE "free_multiprod[U, T]")
    (("" (INST + "lambda i : IF i = i!1 THEN x!1 ELSE null[T] ENDIF")
      (("1"
        (CASE-REPLACE
         "(LAMBDA i: IF i = i!1 THEN x!1 ELSE null[T] ENDIF) = (LAMBDA i: null[T]) WITH [(i!1) := x!1]")
        (("1" (DELETE -1 2)
          (("1" (APPLY-EXTENSIONALITY :HIDE? T)
            (("1" (REDUCE) NIL NIL)) NIL))
          NIL))
        NIL)
       ("2" (SKOSIMP) (("2" (ASSERT) NIL NIL)) NIL)
       ("3" (SKOSIMP) (("3" (ASSERT) NIL NIL)) NIL))
      NIL))
    NIL))
  NIL)
 (|interleave_disjoint| "" (SKOSIMP)
  ((""
    (GRIND :EXCLUDE ("proj" "sigma" "disjoint?") :REWRITES
     ("disj_alphabet[U, T]" "sub_alphabet[U, T]") :IF-MATCH NIL)
    (("" (USE "inter_disjoint[U, T]")
      (("" (GROUND)
        (("1" (INST? -1)
          (("1" (REPLACE -1 1 :DIR RL)
            (("1" (DELETE -) (("1" (REDUCE) NIL NIL)) NIL)) NIL))
          NIL)
         ("2" (SKOLEM!)
          (("2" (SKOLEM!)
            (("2" (USE "sigma_subset" ("P" "P!1(i!2)"))
              (("2" (EXPAND "subset?")
                (("2" (EXPAND "member")
                  (("2" (INST? -2)
                    (("2" (INST? -1)
                      (("2" (DELETE -3 -4 2) (("2" (REDUCE) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|par_disjoint| "" (SKOSIMP)
  (("" (EXPAND "subset?")
    (("" (EXPAND "member")
      (("" (SKOSIMP)
        (("" (SKOLEM!)
          (("" (EXPAND "Par")
            (("" (SKOLEM!)
              (("" (USE "prod_disjoint[U, T]")
                (("" (GROUND)
                  (("1" (INST? -1)
                    (("1" (REPLACE -1 1 :DIR RL)
                      (("1" (DELETE -) (("1" (GRIND) NIL NIL)) NIL))
                      NIL))
                    NIL)
                   ("2" (EXPAND "sub_alphabet")
                    (("2" (SKOLEM!)
                      (("2" (USE "sigma_subset" ("P" "P!1(i!2)"))
                        (("2" (EXPAND "subset?")
                          (("2" (SKOLEM!)
                            (("2" (EXPAND "member")
                              (("2"
                                (FLATTEN)
                                (("2"
                                  (INST? -1)
                                  (("2"
                                    (INST? -3)
                                    (("2"
                                      (DELETE -4 -5)
                                      (("2" (REDUCE) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL))

