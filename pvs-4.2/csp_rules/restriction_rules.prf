(|restriction_rules|
 (|restriction_equiv| "" (SKOLEM!)
  (("" (EXPAND "#") (("" (REWRITE "par_stop") NIL)))))
 (|restriction_twice| "" (SKOLEM!)
  (("" (AUTO-REWRITE "restriction_equiv" "null_proj_union[T]")
    (("" (NAME-REPLACE "XX" "P!1 # A!1" :HIDE? NIL)
      (("" (ASSERT)
        (("" (APPLY-EXTENSIONALITY :HIDE? T)
          (("" (REPLACE -1 + RL)
            (("" (ASSERT)
              (("" (DELETE -) (("" (IFF) (("" (GROUND) NIL)))))))))))))))))))
 (|restriction_prop| "" (AUTO-REWRITE-THEORY "sets")
  (("" (SKOSIMP)
    (("" (ASSERT)
      (("" (SKOSIMP)
        (("" (REWRITE "restriction_equiv")
          (("" (REWRITE "restriction_equiv")
            (("" (GRIND :IF-MATCH NIL)
              (("" (INST?) (("" (ASSERT) NIL NIL)) NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|restriction_prop2| "" (AUTO-REWRITE-THEORY "sets")
  (("" (ASSERT)
    (("" (SKOSIMP*)
      (("" (REWRITE "restriction_equiv")
        (("" (ASSERT) (("" (FLATTEN) NIL NIL)) NIL)) NIL))
      NIL))
    NIL))
  NIL)
 (|restriction_stop| "" (SKOLEM!)
  (("" (REWRITE "restriction_equiv")
    (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL)))))))
 (|restriction_pref1| "" (SKOSIMP)
  (("" (AUTO-REWRITE "restriction_equiv")
    (("" (APPLY-EXTENSIONALITY :HIDE? T) (("" (GRIND) NIL)))))))
 (|restriction_pref2| "" (SKOSIMP)
  (("" (AUTO-REWRITE "restriction_equiv")
    (("" (APPLY-EXTENSIONALITY :HIDE? T)
      (("" (GRIND :IF-MATCH NIL) (("1" (INST?) NIL) ("2" (INST?) NIL)))))))))
 (|restriction_pref| "" (AUTO-REWRITE "restriction_pref1" "restriction_pref2")
  (("" (SKOLEM!) (("" (LIFT-IF) (("" (GROUND) NIL)))))))
 (|restriction_choice| "" (SKOLEM!)
  (("" (AUTO-REWRITE "restriction_equiv")
    (("" (ASSERT)
      (("" (EXPAND "\\/")
        (("" (APPLY-EXTENSIONALITY :HIDE? T)
          (("" (GRIND :EXCLUDE ("proj")) NIL)))))))))))
 (|restriction_choice2| "" (SKOLEM!)
  (("" (AUTO-REWRITE "restriction_equiv")
    (("" (ASSERT)
      (("" (EXPAND "Choice")
        (("" (APPLY-EXTENSIONALITY :HIDE? T)
          (("" (IFF)
            (("" (GROUND)
              (("1" (EXPAND "proj")
                (("1" (EXPAND "filter") (("1" (PROPAX) NIL)))))
               ("2" (SKOSIMP) (("2" (INST + "i!1") NIL)))))))))))))))))
 (|restriction_par| "" (SKOSIMP)
  (("" (AUTO-REWRITE "restriction_equiv")
    (("" (ASSERT)
      (("" (EXPAND "Par")
        (("" (APPLY-EXTENSIONALITY :HIDE? T)
          (("" (IFF)
            (("" (GROUND)
              (("1" (SKOLEM!)
                (("1" (USE "null_proj_prod[T]")
                  (("1" (GROUND) (("1" (INST?) NIL NIL)) NIL)) NIL))
                NIL)
               ("2" (SKOLEM!) (("2" (INST?) NIL NIL)) NIL)
               ("3" (SKOLEM-TYPEPRED)
                (("3" (USE "null_proj_prod[T]") (("3" (GROUND) NIL NIL)) NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|restriction_fullset| "" (SKOLEM!)
  (("" (AUTO-REWRITE "intersection" "member")
    (("" (APPLY-EXTENSIONALITY :HIDE? T)
      (("" (IFF)
        (("" (GROUND)
          (("1" (REWRITE "restriction_equiv" -1)
            (("1" (BETA)
              (("1" (REWRITE "par_full")
                (("1" (REWRITE "par_full")
                  (("1" (ASSERT)
                    (("1" (SPLIT)
                      (("1" (GRIND) NIL NIL)
                       ("2" (REWRITE "restriction_equiv")
                        (("2" (BETA) (("2" (GRIND) NIL NIL)) NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL)
           ("2" (REWRITE "restriction_equiv" 1)
            (("2" (BETA)
              (("2" (REWRITE "par_full")
                (("2" (REWRITE "par_full")
                  (("2" (ASSERT)
                    (("2" (SPLIT)
                      (("1" (GRIND) NIL NIL)
                       ("2" (REWRITE "restriction_equiv")
                        (("2" (BETA) (("2" (ASSERT) NIL NIL)) NIL)) NIL)
                       ("3" (REWRITE "restriction_equiv")
                        (("3" (ASSERT) NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|restriction_free_par| "" (SKOLEM!)
  (("" (EXPAND "//") (("" (REWRITE "restriction_par") NIL)))))
 (|restriction_hide| "" (SKOSIMP)
  (("" (APPLY-EXTENSIONALITY :HIDE? T)
    (("" (SMASH)
      (("1" (REWRITE "restriction_equiv")
        (("1" (ASSERT)
          (("1" (FLATTEN)
            (("1" (EXPAND "/" -1)
              (("1" (SKOLEM-TYPEPRED)
                (("1" (REPLACE -2)
                  (("1" (DELETE -2)
                    (("1" (REWRITE "proj_twice")
                      (("1" (EXPAND "/")
                        (("1" (INST?)
                          (("1" (REWRITE "restriction_equiv")
                            (("1" (ASSERT)
                              (("1" (EXPAND "difference")
                                (("1" (EXPAND "member")
                                  (("1" (EXPAND "complement")
                                    (("1" (EXPAND "intersection")
                                      (("1"
                                        (EXPAND "member")
                                        (("1"
                                          (DELETE -1)
                                          (("1"
                                            (CASE
                                             "{x_95: T | NOT A!1(x_95) AND B!1(x_95)} = {x: T | B!1(x) AND NOT A!1(x)}")
                                            (("1"
                                              (REPLACE -1)
                                              (("1" (PROPAX) NIL NIL))
                                              NIL)
                                             ("2"
                                              (DELETE -1 2)
                                              (("2"
                                                (APPLY-EXTENSIONALITY
                                                 :HIDE?
                                                 T)
                                                (("2" (GRIND) NIL NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (EXPAND "/" -1)
        (("2" (SKOLEM-TYPEPRED)
          (("2" (REWRITE "restriction_equiv")
            (("2" (ASSERT)
              (("2" (FLATTEN)
                (("2" (REPLACE -3)
                  (("2" (DELETE -3)
                    (("2" (REWRITE "restriction_equiv")
                      (("2" (ASSERT)
                        (("2" (SPLIT)
                          (("1" (EXPAND "/") (("1" (INST?) NIL NIL)) NIL)
                           ("2" (REWRITE "proj_twice")
                            (("2" (EXPAND "difference")
                              (("2" (EXPAND "complement")
                                (("2" (EXPAND "intersection")
                                  (("2" (EXPAND "member")
                                    (("2"
                                      (CASE
                                       "{x: T | B!1(x) AND NOT A!1(x)} = {x_101: T | NOT A!1(x_101) AND B!1(x_101)}")
                                      (("1"
                                        (REPLACE -1)
                                        (("1" (PROPAX) NIL NIL))
                                        NIL)
                                       ("2"
                                        (DELETE -1 -2 2)
                                        (("2"
                                          (APPLY-EXTENSIONALITY :HIDE? T)
                                          (("2" (GRIND) NIL NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|restriction_rename| "" (SKOLEM!)
  (("" (APPLY-EXTENSIONALITY :HIDE? T)
    (("" (SMASH)
      (("1" (REWRITE "restriction_equiv")
        (("1" (ASSERT)
          (("1" (FLATTEN)
            (("1" (EXPAND "rename" -1)
              (("1" (SKOLEM-TYPEPRED)
                (("1" (EXPAND "rename" 1)
                  (("1" (INST?)
                    (("1" (DELETE -1)
                      (("1"
                        (CASE "FORALL (x : list[T]) : FORALL (t : list[T]) : trename(R!1, t, x) AND proj(x, B!1) = null IMPLIES trename({(a, b) | R!1(a, b) AND NOT B!1(b)}, t, x)")
                        (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                         ("2" (DELETE -1 -2 2)
                          (("2" (INDUCT "x")
                            (("1" (GRIND) NIL NIL)
                             ("2" (SKOSIMP*)
                              (("2" (EXPAND "trename" -2)
                                (("2" (FLATTEN)
                                  (("2" (LEMMA "list_cons_eta[T]")
                                    (("2" (INST -1 "t!1")
                                      (("2"
                                        (REPLACE -1 1 RL)
                                        (("2"
                                          (REWRITE "proj_cons" -6)
                                          (("2"
                                            (LIFT-IF)
                                            (("2"
                                              (SPLIT)
                                              (("1" (ASSERT) NIL NIL)
                                               ("2"
                                                (FLATTEN)
                                                (("2"
                                                  (INST -3 "cdr(t!1)")
                                                  (("2"
                                                    (ASSERT)
                                                    (("2"
                                                      (DELETE -1 -2 -6)
                                                      (("2"
                                                        (EXPAND "trename" 2)
                                                        (("2"
                                                          (PROPAX)
                                                          NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL)
       ("2" (REWRITE "restriction_equiv")
        (("2" (ASSERT)
          (("2" (SPLIT)
            (("1" (EXPAND "rename" -1)
              (("1" (SKOLEM-TYPEPRED)
                (("1" (EXPAND "rename")
                  (("1" (INST?)
                    (("1"
                      (CASE "FORALL (x : list[T]) : FORALL (t : list[T]) : trename({(a, b) | R!1(a, b) AND NOT B!1(b)}, t, x) IMPLIES trename(R!1, t, x)")
                      (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                       ("2" (DELETE -1 -2 2)
                        (("2" (INDUCT "x")
                          (("1" (GRIND) NIL NIL)
                           ("2" (SKOSIMP*)
                            (("2" (EXPAND "trename" -2)
                              (("2" (FLATTEN)
                                (("2" (INST?)
                                  (("2" (ASSERT)
                                    (("2" (LEMMA "list_cons_eta[T]")
                                      (("2"
                                        (INST -1 "t!1")
                                        (("2"
                                          (REPLACE -1 2 RL)
                                          (("2"
                                            (EXPAND "trename" 2)
                                            (("2" (PROPAX) NIL NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (EXPAND "rename")
              (("2" (SKOLEM!)
                (("2"
                  (CASE "FORALL (x : list[T]) : FORALL (t : list[T]) : trename({(a, b) | R!1(a, b) AND NOT B!1(b)}, t, x) IMPLIES proj(x, B!1) = null")
                  (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                   ("2" (DELETE -1 2)
                    (("2" (INDUCT "x")
                      (("1" (GRIND) NIL NIL)
                       ("2" (SKOSIMP*)
                        (("2" (EXPAND "trename" -2)
                          (("2" (FLATTEN)
                            (("2" (INST?)
                              (("2" (ASSERT)
                                (("2" (REWRITE "proj_cons") NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|restriction_sat_equiv| "" (SKOLEM!)
  (("" (REWRITE "restriction_equiv")
    (("" (GRIND :EXCLUDE ("proj") :IF-MATCH NIL)
      (("1" (INST?) (("1" (ASSERT) NIL)))
       ("2" (INST?) (("2" (ASSERT) NIL)))))))))
 (|monotonic_lemma| "" (EXPAND "monotonic?")
  (("" (SKOSIMP*)
    (("" (EXPAND "subset?")
      (("" (EXPAND "member")
        (("" (SKOSIMP)
          (("" (REWRITE "restriction_equiv")
            (("" (ASSERT)
              (("" (FLATTEN)
                (("" (REWRITE "restriction_equiv")
                  (("" (ASSERT)
                    (("" (TYPEPRED "F!1")
                      (("" (EXPAND "monotonic?")
                        (("" (INST?)
                          (("" (INST -1 "Y!1")
                            (("" (EXPAND "subset?")
                              (("" (EXPAND "member")
                                (("" (SPLIT -1)
                                  (("1" (INST?) (("1" (ASSERT) NIL NIL)) NIL)
                                   ("2" (PROPAX) NIL NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|restriction_fix1_TCC1| "" (SKOSIMP)
  (("" (REWRITE "monotonic_lemma") NIL NIL)) NIL)
 (|restriction_fix1| "" (AUTO-REWRITE "monotonic_lemma")
  (("" (SKOLEM!)
    ((""
      (CASE "(FORALL P: F!1(P) # B!1 = F!1(P # B!1) # B!1) IMPLIES subset?(mu(F!1) # B!1, mu(LAMBDA P1: (F!1(P1) # B!1))) AND subset?(mu(LAMBDA P1: (F!1(P1) # B!1)), mu(F!1) # B!1)")
      (("1" (SPLIT)
        (("1" (AUTO-REWRITE-THEORY "sets")
          (("1" (REWRITE "subset_antisymmetric")
            (("1" (FLATTEN) NIL NIL) ("2" (FLATTEN) NIL NIL)) NIL))
          NIL)
         ("2" (FLATTEN) NIL NIL))
        NIL)
       ("2" (DELETE 2)
        (("2" (FLATTEN)
          (("2" (SPLIT)
            (("1" (CASE "mu(F!1) # B!1 |> mu(LAMBDA P1: (F!1(P1) # B!1))")
              (("1" (EXPAND "|>") (("1" (PROPAX) NIL NIL)) NIL)
               ("2" (DELETE 2)
                (("2" (REWRITE "restriction_sat_equiv")
                  (("2" (REWRITE "induction")
                    (("1" (DELETE 2) (("1" (GRIND) NIL NIL)) NIL)
                     ("2" (DELETE 2)
                      (("2" (SKOSIMP)
                        (("2" (REWRITE "restriction_sat_equiv" :DIR RL)
                          (("2" (REWRITE "restriction_sat_equiv" :DIR RL)
                            (("2" (EXPAND "|>")
                              (("2" (ETA "process[T]")
                                (("2"
                                  (INST -1 "mu(LAMBDA P1: (F!1(P1) # B!1))")
                                  (("2" (REPLACE -1)
                                    (("2" (DELETE -1)
                                      (("2"
                                        (TYPEPRED "F!1")
                                        (("2"
                                          (EXPAND "monotonic?")
                                          (("2"
                                            (INST
                                             -1
                                             "X!1 # B!1"
                                             "mu(LAMBDA P1: (F!1(P1) # B!1))")
                                            (("2"
                                              (ASSERT)
                                              (("2"
                                                (DELETE -2)
                                                (("2"
                                                  (LEMMA "restriction_prop")
                                                  (("2"
                                                    (INST
                                                     -1
                                                     "B!1"
                                                     "F!1(X!1 # B!1)"
                                                     "F!1(mu(LAMBDA P1: (F!1(P1) # B!1)))")
                                                    (("2"
                                                      (ASSERT)
                                                      (("2"
                                                        (LEMMA
                                                         "fixed_point2[T]")
                                                        (("2"
                                                          (INST
                                                           -1
                                                           "LAMBDA P1: (F!1(P1) # B!1)")
                                                          (("2"
                                                            (REPLACE -1 -2)
                                                            (("2"
                                                              (DELETE -1 -3)
                                                              (("2"
                                                                (INST
                                                                 -2
                                                                 "X!1")
                                                                (("2"
                                                                  (REPLACE -2)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (INST -1 "mu(F!1)")
              (("2" (LEMMA "fixed_point2[T]")
                (("2" (INST?)
                  (("2" (REPLACE -1)
                    (("2" (DELETE -1)
                      (("2"
                        (CASE "F!1(mu(F!1) # B!1) # B!1 = (LAMBDA P1: (F!1(P1) # B!1))(mu(F!1) # B!1)")
                        (("1" (REPLACE -1)
                          (("1" (DELETE -1)
                            (("1" (LEMMA "least_fixed_point2[T]")
                              (("1"
                                (INST -1 "(LAMBDA P1: (F!1(P1) # B!1))"
                                 "mu(F!1) # B!1")
                                (("1" (ASSERT) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (ASSERT) NIL NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL))
  NIL)
 (|restriction_elim| "" (SKOSIMP)
  (("" (REWRITE "restriction_sat_equiv")
    (("" (LEMMA "sat_transitive2[T]")
      (("" (INST -1 "E!1" "({t | proj(t, B!1) = null IMPLIES E!1(t)})" "P!1")
        (("" (ASSERT) (("" (DELETE -1 2) (("" (GRIND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL))
  NIL))

