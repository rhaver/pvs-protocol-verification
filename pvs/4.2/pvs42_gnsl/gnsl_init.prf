(|gnsl_init|
 (|p_TCC1| 0
  (|p_TCC1-1| NIL 3395911133 3399297963 ("" (INST 1 "2") NIL NIL) PROVED
   ((|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   62 59 T NIL))
 (|hu_TCC1| 0
  ("hu_TCC1-1" NIL 3389603532 3399297964
   ("" (INST 1 "LAMBDA (k: nat_to_p): k") (("" (GRIND) NIL NIL)) NIL) PROVED
   ((NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL) (< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   72 66 T NIL))
 (|Nonces_TCC1| 0
  (|Nonces_TCC1-1| NIL 3389604751 3399297964
   ("" (SKOLEM-TYPEPRED)
    (("" (TYPEPRED "pt[[nat_from_2, Identity, Role], Nonce]")
      (("" (DELETE -1)
        (("" (INST -1 "(P!1, i!1, r!1)")
          (("" (SKOLEM!) (("" (INST 1 "n!1") (("" (GRIND) NIL NIL)) NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|pt| CONST-DECL "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}"
     |partition| NIL)
    (|n!1| SKOLEM-CONST-DECL "Nonce" |gnsl_init| NIL)
    (|r!1| SKOLEM-CONST-DECL "Role" |gnsl_init| NIL)
    (|i!1| SKOLEM-CONST-DECL "Identity" |gnsl_init| NIL)
    (P!1 SKOLEM-CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   8 9 T NIL))
 (|n_init_TCC1| 0
  (|n_init_TCC1-1| NIL 3389605231 3399297964
   ("" (TYPEPRED "p") (("" (GROUND) NIL NIL)) NIL) PROVED
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   8 8 T NIL))
 (|n_prop| 0
  ("n_prop-1" NIL 3395925722 3399297967
   ("" (SKOLEM-TYPEPRED)
    (("" (TYPEPRED "n_init")
      (("" (TYPEPRED "pt[[nat_from_2, Identity, Role], Nonce]")
        (("" (DELETE -2)
          (("" (INST -1 "(P!1, u!1, r!1)" "(p, hu(0), 0)" "n_init")
            (("" (GRIND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|pt| CONST-DECL "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}"
     |partition| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   218 139 T NIL))
 (|n_orig| 0
  (|n_orig-1| NIL 3395925808 3399297967
   ("" (SKOSIMP)
    (("" (TYPEPRED "pt[[nat_from_2, Identity, Role], Nonce]" "n_init")
      (("" (DELETE -2)
        (("" (INST -1 "(P!1, u!1, 0)" "(p, hu(0), 0)" "n_init")
          (("" (EXPAND "IRpart") (("" (GROUND) NIL NIL)) NIL)) NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|pt| CONST-DECL "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}"
     |partition| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL))
   6 7 T SHOSTAK))
 (E_TCC1 0
  (E_TCC1-1 NIL 3389593331 3399297967 ("" (CASES-TCC) NIL NIL) PROVED
   ((|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   48 44 T NIL))
 (UROLE_INIT_TCC1 0
  (UROLE_INIT_TCC1-1 NIL 3389793576 3399297967
   ("" (SKOLEM-TYPEPRED)
    (("" (DELETE -1 -2 -3) (("" (TYPEPRED "P") (("" (GRIND) NIL NIL)) NIL))
      NIL))
    NIL)
   PROVED
   ((|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   8 6 T NIL))
 (UROLE_INIT_TCC2 0
  (UROLE_INIT_TCC2-1 NIL 3389864605 3399297968 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   51 46 T NIL))
 (UROLE_INIT_TCC3 0
  (UROLE_INIT_TCC3-1 NIL 3389874431 3399297968
   ("" (SKOLEM!)
    (("" (PROP)
      (("" (CASE "P!1 = p")
        (("1" (GROUND) NIL NIL)
         ("2" (DELETE 2)
          (("2" (TYPEPRED "nn0!1")
            (("2" (LEMMA "n_orig" ("P" "P!1" "u" "u!1"))
              (("2" (GROUND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|n_orig| FORMULA-DECL NIL |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   8 6 T NIL))
 (UROLE_INIT_TCC4 0
  (UROLE_INIT_TCC4-1 NIL 3389874431 3399297968
   ("" (SKOLEM-TYPEPRED)
    (("" (PROP)
      (("" (SKOLEM-TYPEPRED)
        (("" (DELETE -1 -2 -3 -5 -6 -7 -8 -9)
          (("" (TYPEPRED "p")
            (("" (LEMMA "length_non_zero" ("l" "il!1")) (("" (GROUND) NIL NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   9 8 T NIL))
 (UROLE_INIT_TCC5 0
  (UROLE_INIT_TCC5-1 NIL 3389874431 3399297968 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED NIL 4 4 T NIL))
 (UROLE_INIT_TCC6 0
  (UROLE_INIT_TCC6-1 NIL 3389874431 3399297968 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED NIL 35 32 T NIL))
 (UROLE_INIT_TCC7 0
  (UROLE_INIT_TCC7-1 NIL 3389874431 3399297968 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   15 14 T NIL))
 (UROLE_INIT_TCC8 0
  (UROLE_INIT_TCC8-1 NIL 3389874431 3399297969
   ("" (SKOLEM!)
    (("" (PROP)
      (("" (CASE "P!1 = p")
        (("1" (GROUND) NIL NIL)
         ("2" (DELETE 2)
          (("2" (TYPEPRED "nn0!1")
            (("2" (LEMMA "n_orig" ("P" "P!1" "u" "u!1"))
              (("2" (GROUND) NIL NIL)) NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|n_orig| FORMULA-DECL NIL |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL))
   6 6 T NIL))
 (UROLE_INIT_TCC9 0
  (UROLE_INIT_TCC9-1 NIL 3389874431 3399297969
   ("" (SKOLEM-TYPEPRED)
    (("" (PROP)
      (("" (SKOLEM-TYPEPRED)
        (("" (DELETE -1 -2 -3 -6 -7 1)
          (("" (LEMMA "length_non_zero" ("l" "il!1")) (("" (GROUND) NIL NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   41 35 T NIL))
 (UROLE_INIT_TCC10 0
  (UROLE_INIT_TCC10-1 NIL 3389874431 3399297969 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED NIL 4 5 T NIL))
 (UROLE_LAST_TCC1 0
  (UROLE_LAST_TCC1-1 NIL 3389864605 3399297969 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED NIL 3 2 T NIL))
 (UROLE_LAST_TCC2 0
  (UROLE_LAST_TCC2-1 NIL 3389864605 3399297969 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED NIL 2 3 T NIL))
 (UROLE_LAST_TCC3 0
  (UROLE_LAST_TCC3-1 NIL 3389874431 3399297969
   ("" (SKOLEM-TYPEPRED)
    (("" (DELETE -2 -4 -5)
      (("" (LEMMA "length_non_zero" ("l" "nl!1")) (("" (GROUND) NIL NIL)) NIL))
      NIL))
    NIL)
   PROVED
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   6 5 T NIL))
 (UROLE_LAST_TCC4 0
  (UROLE_LAST_TCC4-1 NIL 3389874431 3399297969
   ("" (SKOLEM-TYPEPRED)
    (("" (DELETE -2 -3 -4)
      (("" (LEMMA "length_non_zero" ("l" "il!1")) (("" (GROUND) NIL NIL)) NIL))
      NIL))
    NIL)
   PROVED
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   36 34 T NIL))
 (|LastMessage_TCC1| 0
  (|LastMessage_TCC1-1| NIL 3393262700 3399298695
   ("" (SKOLEM-TYPEPRED) (("" (GROUND) NIL NIL)) NIL) PROVED
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|nat_from_3| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   577 3 T NIL))
 (|LastMessage_TCC2| 0
  (|LastMessage_TCC2-1| NIL 3393262700 3399298682
   ("" (SKOLEM-TYPEPRED)
    (("" (DELETE -2 -4 -5 -6 -7 -8 -9 -10)
      (("" (LEMMA "length_non_zero" ("l" "il2!1")) (("" (GROUND) NIL NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat_from_3| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   1043 11 T NIL))
 (|LastMessage_TCC3| 0
  (|LastMessage_TCC3-1| NIL 3399297963 3399298649
   ("" (SKOLEM-TYPEPRED)
    (("" (DELETE -2 -4 -5 -6 -7 -8 -9 -10)
      (("" (LEMMA "length_non_zero" ("l" "il2!1")) (("" (GROUND) NIL NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat_from_3| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   1430 18 T NIL))
 (UROLE_MIDDLE_TCC1 0
  (UROLE_MIDDLE_TCC1-1 NIL 3389874431 3399297970 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED ((|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   4 4 T NIL))
 (UROLE_MIDDLE_TCC2 0
  (UROLE_MIDDLE_TCC2-1 NIL 3389874431 3399297971
   ("" (SKOLEM-TYPEPRED)
    (("" (DELETE -1 -3 -4 -6 -7 -8 -9 -10 -11)
      (("" (LEMMA "length_non_zero" ("l" "nl1!1")) (("" (GROUND) NIL NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat_from_3| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   40 39 T NIL))
 (UROLE_MIDDLE_TCC3 0
  (UROLE_MIDDLE_TCC3-1 NIL 3389874431 3399297971
   ("" (SKOLEM-TYPEPRED)
    (("" (DELETE -2 -4 -5 -6 -7 -8 -9 -10 -11)
      (("" (LEMMA "length_non_zero" ("l" "il2!1")) (("" (GROUND) NIL NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat_from_3| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   9 8 T NIL))
 (USER_TCC1 0
  (USER_TCC1-1 NIL 3389874431 3399298960
   ("" (SKOSIMP*) (("" (TYPEPRED "P!1") (("" (GROUND) NIL NIL)) NIL)) NIL)
   PROVED
   ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL))
   15069 11 T NIL))
 (USER_TCC2 0
  (USER_TCC2-1 NIL 3399297963 3399298796
   ("" (SKOLEM-TYPEPRED)
    (("" (PROP)
      (("" (CASE "3 <= P!1")
        (("1" (DELETE -2 -3 1)
          (("1" (TYPEPRED "pt[[nat_from_2, Identity, Role], Nonce]")
            (("1" (DELETE -1)
              (("1" (INST -1 "(P!1, i!1, 1)")
                (("1" (SKOLEM! -1)
                  (("1" (INST 1 "(1, n!1)")
                    (("1" (EXPAND "IRpart") (("1" (PROPAX) NIL NIL)) NIL)
                     ("2" (DELETE -1) (("2" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL)
             ("2" (DELETE -1 2) (("2" (INST 1 "0") NIL NIL)) NIL))
            NIL))
          NIL)
         ("2" (DELETE -1 -2 3) (("2" (GROUND) NIL NIL)) NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (P!1 SKOLEM-CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|i!1| SKOLEM-CONST-DECL "Identity" |gnsl_init| NIL)
    (|n!1| SKOLEM-CONST-DECL "Nonce" |gnsl_init| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|pt| CONST-DECL "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}"
     |partition| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   7682 20 T NIL))
 (|hu_list_exists_TCC1| 0
  (|hu_list_exists_TCC1-1| NIL 3389881160 3399297974 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((< CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   9 9 T NIL))
 (|hu_list_exists| 0
  (|hu_list_exists-1| NIL 3389881161 3399297975
   ("" (TYPEPRED "p")
    (("" (INST 1 "gen_f_list(p, 0, hu)")
      (("1" (SPLIT)
        (("1" (REWRITE "gen1") NIL NIL)
         ("2" (SKOLEM!) (("2" (REWRITE "gen2") NIL NIL)) NIL))
        NIL)
       ("2" (GROUND) NIL NIL))
      NIL))
    NIL)
   PROVED
   ((|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (|gen_f_list| DEF-DECL "list[T]" |listprops| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|gen2| FORMULA-DECL NIL |listprops| NIL)
    (|gen1| FORMULA-DECL NIL |listprops| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   49 48 T SHOSTAK))
 (|hu_list_TCC1| 0
  (|hu_list_TCC1-1| NIL 3389880596 3399297975
   ("" (LEMMA "hu_list_exists") (("" (PROPAX) NIL NIL)) NIL) PROVED
   ((|hu_list_exists| FORMULA-DECL NIL |gnsl_init| NIL)) 1 1 T NIL))
 (|cons_hu_list| 0
  (|cons_hu_list-1| NIL 3390133695 3399297975
   ("" (TYPEPRED "P")
    (("" (TYPEPRED "hu_list")
      (("" (DELETE -1 -3)
        (("" (PROP) (("" (EXPAND "length" -1) (("" (GROUND) NIL NIL)) NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|hu_list| CONST-DECL "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     |gnsl_init| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   3 3 T SHOSTAK))
 (|R_last_TCC1| 0
  (|R_last_TCC1-1| NIL 3395911133 3399297975 ("" (SUBTYPE-TCC) NIL NIL) PROVED
   ((|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   73 71 T NIL))
 (|rho_middle_TCC1| 0
  (|rho_middle_TCC1-1| NIL 3397656280 3399297976 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (<< ADT-DEF-DECL "(well_founded?[Message])" |gnsl_init| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   12 11 NIL NIL))
 (|rho_middle_TCC2| 0
  (|rho_middle_TCC2-1| NIL 3397656280 3399297976 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (<< ADT-DEF-DECL "(well_founded?[Message])" |gnsl_init| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   44 44 NIL NIL))
 (|rho_middle_TCC3| 0
  (|rho_middle_TCC3-1| NIL 3397656280 3399297976 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (<< ADT-DEF-DECL "(well_founded?[Message])" |gnsl_init| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   12 12 NIL NIL))
 (|rho_middle_TCC4| 0
  (|rho_middle_TCC4-1| NIL 3397656280 3399297976 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED NIL 4 4 NIL NIL))
 (|rho_middle_TCC5| 0
  (|rho_middle_TCC5-1| NIL 3397656280 3399297977 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   54 53 NIL NIL))
 (|rho_last_TCC1| 0
  (|rho_last_TCC1-1| NIL 3390559400 3399297977 ("" (TERMINATION-TCC) NIL NIL)
   PROVED ((<< ADT-DEF-DECL "(well_founded?[Message])" |gnsl_init| NIL)) 41 41
   T NIL))
 (|rho_last_TCC2| 0
  (|rho_last_TCC2-1| NIL 3390559400 3399297977 ("" (TERMINATION-TCC) NIL NIL)
   PROVED ((<< ADT-DEF-DECL "(well_founded?[Message])" |gnsl_init| NIL)) 10 9 T
   NIL))
 (|rho_last_TCC3| 0
  (|rho_last_TCC3-1| NIL 3390559400 3399297977 ("" (TERMINATION-TCC) NIL NIL)
   PROVED
   ((<< ADT-DEF-DECL "(well_founded?[Message])" |gnsl_init| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   9 9 T NIL))
 (|rho_last_TCC4| 0
  (|rho_last_TCC4-1| NIL 3390559400 3399297978 ("" (SUBTYPE-TCC) NIL NIL)
   PROVED
   ((|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL))
   51 51 T NIL))
 (|restrictmiddle_init| 0
  (|restrictmiddle_init-1| NIL 3399224172 3399297995
   ("" (AUTO-REWRITE-THEORY "sets")
    (("" (SKOLEM!)
      (("" (EXPAND "RankUser")
        (("" (INTERLEAVING2)
          (("" (EXPAND "UROLE_INIT")
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (TYPEPRED "p")
                  (("1" (CHOICE3)
                    (("1" (COMMENT "establish obvious equalities")
                      (("1" (CASE "u!1=hu(0) AND p=P!1")
                        (("1" (FLATTEN)
                          (("1" (REPLACE -1 1)
                            (("1" (REPLACE -2 1 RL)
                              (("1" (REPLACE -4 1)
                                (("1" (DELETE -1 -4)
                                  (("1" (PREFIX)
                                    (("1" (DELETE 2 3)
                                      (("1" (GRIND :IF-MATCH NIL)
                                        (("1"
                                          (COMMENT
                                           "hu(0) sends a message (that is `escaped' in rho) to hu(1)")
                                          (("1" (INST 1 "1")
                                            (("1" (SPLIT)
                                              (("1"
                                                (COMMENT
                                                 "prove that the intended recipient is 1")
                                                (("1" (DECOMPOSE-EQUALITY 1)
                                                  (("1" (TYPEPRED "i!3`2")
                                                    (("1"
                                                      (DELETE -1 -2 -4 -5 -6)
                                                      (("1" (INST -1 "0")
                                                        (("1" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  ";;; prove that the intended recipient is 1"))
                                                NIL)
                                               ("2"
                                                (COMMENT
                                                 "prove that the message has the right structure")
                                                (("2" (INST 1 "null")
                                                  (("2" (DECOMPOSE-EQUALITY 1)
                                                    (("2"
                                                      (DECOMPOSE-EQUALITY 1)
                                                      (("2"
                                                        (DECOMPOSE-EQUALITY 1)
                                                        (("1"
                                                          (TYPEPRED "hu_list")
                                                          (("1"
                                                            (DELETE -1
                                                                    -2
                                                                    -4
                                                                    -5
                                                                    -6)
                                                            (("1" (INST -1 "0")
                                                              (("1" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (DELETE -1)
                                                          (("2"
                                                            (COMMENT
                                                             "prove that the two lists are equal by showing that their lengths and elements are equal")
                                                            (("2"
                                                              (TYPEPRED "i!3`2"
                                                               "hu_list")
                                                              (("2"
                                                                (DELETE -1 -4)
                                                                (("2"
                                                                  (REWRITE
                                                                   "length_nth_equality[Identity]")
                                                                  (("1"
                                                                    (DELETE -2
                                                                            -4
                                                                            -6
                                                                            2)
                                                                    (("1"
                                                                      (REWRITE
                                                                       "length_cdr")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "length_cdr")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "length_cdr")
                                                                          (("1"
                                                                            (GROUND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (DELETE -3
                                                                            -6
                                                                            2)
                                                                    (("2"
                                                                      (SKOLEM-TYPEPRED)
                                                                      (("2"
                                                                        (INST
                                                                         -3
                                                                         "i!5+1")
                                                                        (("1"
                                                                          (INST
                                                                           -4
                                                                           "i!5+2")
                                                                          (("1"
                                                                            (DELETE
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (DELETE
                                                                             -3
                                                                             2)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "length_cdr")
                                                                              (("2"
                                                                                (GROUND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (DELETE
                                                                           -3
                                                                           2)
                                                                          (("2"
                                                                            (REWRITE
                                                                             "length_cdr")
                                                                            (("2"
                                                                              (GROUND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              ";;; prove that the two lists are equal by showing that their lengths and elements are equal"))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  ";;; prove that the message has the right structure"))
                                                NIL))
                                              NIL))
                                            ";;; hu(0) sends a message (that is `escaped' in rho) to hu(1)"))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (DELETE 2 3)
                                      (("2" (PREFIX)
                                        (("2" (DELETE -2 -3 +)
                                          (("2"
                                            (COMMENT "-1 evaluates to false")
                                            (("2" (GRIND :IF-MATCH NIL)
                                              (("1"
                                                (COMMENT
                                                 "contradiction in terms -3 and -5")
                                                (("1" (DELETE -1 -2 -4 -6)
                                                  (("1" (DECOMPOSE-EQUALITY -2)
                                                    (("1" (TYPEPRED "hu")
                                                      (("1" (INST -1 "0" "j!1")
                                                        (("1" (GROUND) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  ";;; contradiction in terms -3 and -5"))
                                                NIL)
                                               ("2"
                                                (COMMENT
                                                 "consequent 1 was a negated antecedent")
                                                (("2" (INST 1 "0")
                                                  (("2" (EXPAND "nth")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  ";;; consequent 1 was a negated antecedent"))
                                                NIL))
                                              ";;; -1 evaluates to false"))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (DELETE -1 2)
                          (("2" (TYPEPRED "i!2")
                            (("2" (LEMMA "n_orig" ("P" "P!1" "u" "u!1"))
                              (("2" (GROUND) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        ";;; establish obvious equalities"))
                      NIL)
                     ("2" (TYPEPRED "i!3`2")
                      (("2" (DELETE -1 -3 -4 -5 2) (("2" (GROUND) NIL NIL))
                        NIL))
                      NIL)
                     ("3" (TYPEPRED "i!3`2")
                      (("3" (DELETE -1 -3 -4 -5 2)
                        (("3" (TYPEPRED "P!1")
                          (("3" (LEMMA "length_non_zero" ("l" "i!3`2"))
                            (("3" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (DELETE -1 2)
                      (("4" (TYPEPRED "i!2")
                        (("4" (LEMMA "n_orig" ("P" "P!1" "u" "u!1"))
                          (("4" (GROUND) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("5" (DELETE - 2) (("5" (GROUND) NIL NIL)) NIL)
                     ("6" (SKOLEM-TYPEPRED 1)
                      (("6" (DELETE -1 -2 -3 -5 -6 -7 2)
                        (("6" (TYPEPRED "P!1")
                          (("6" (LEMMA "length_non_zero" ("l" "il!1"))
                            (("6" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("7" (DELETE -1 2)
                      (("7" (SKOLEM!)
                        (("7" (TYPEPRED "i!2")
                          (("7" (LEMMA "n_orig" ("P" "P!1" "u" "u!1"))
                            (("7" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("8" (DELETE - 2)
                      (("8" (SKOLEM!) (("8" (GROUND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "P!1")
                  (("2" (CHOICE3)
                    (("1" (PREFIX)
                      (("1" (DELETE 2 3) (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (DELETE 2 3)
                        (("2" (PREFIX)
                          (("2" (DELETE 2 3)
                            (("2" (PREFIX)
                              (("1" (DELETE 2 3)
                                (("1" (EXPAND "rho_middle" -1)
                                  (("1" (GRIND :EXCLUDE "rho_middle")
                                    (("1"
                                      (COMMENT
                                       "-1 means that nonce n_init is not in the nlist")
                                      (("1" (DELETE -2)
                                        (("1" (EXPAND "rho_middle" -1)
                                          (("1"
                                            (LEMMA "elt_append2"
                                             ("l1" "(: i!2 :)" "l2" "i!3`1" "t"
                                              "n_init"))
                                            (("1" (GRIND :EXCLUDE "elt") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        ";;; -1 means that nonce n_init is not in the nlist"))
                                      NIL)
                                     ("2"
                                      (COMMENT
                                       "i!2 = n_init is provable from -6")
                                      (("2" (MDECOMPOSE-EQUALITY -6) NIL
                                        ";;; i!2 = n_init is provable from -6"))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (DELETE 2 3)
                                (("2" (PREFIX)
                                  (("1" (DELETE 2 3)
                                    (("1"
                                      (COMMENT
                                       "1 and 2 are mutually exclusive")
                                      (("1" (GRIND) NIL
                                        ";;; 1 and 2 are mutually exclusive"))
                                      NIL))
                                    NIL)
                                   ("2" (DELETE 2 3) (("2" (STOP) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (DELETE - 2 3)
                      (("2" (TYPEPRED "i!3`2") (("2" (GROUND) NIL NIL)) NIL))
                      NIL)
                     ("3" (TYPEPRED "i!3`2")
                      (("3" (DELETE -1 2 3)
                        (("3" (LEMMA "length_non_zero" ("l" "i!3`2"))
                          (("3" (GROUND) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("4" (SKOLEM-TYPEPRED 1)
                      (("4" (DELETE -1 -2 -3 2 3)
                        (("4" (LEMMA "length_non_zero" ("l" "il!1"))
                          (("4" (GROUND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|uniform2_interleave2| FORMULA-DECL NIL |uniform_props3| "../rules/")
    (|#| CONST-DECL "process[T]" |restriction_rules| "../rules/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rec?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|rho_middle| DEF-DECL "bool" |gnsl_init| NIL)
    (|msg| SHARED-ADT-ACCESSOR-DECL "[event -> M]" |dynetwork| NIL)
    (|complement| CONST-DECL "set" |sets| NIL)
    (|restriction_free_par2| FORMULA-DECL NIL |restriction_rules3| "../rules/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|R_middle| CONST-DECL "set[event]" |gnsl_init| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../rules/")
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|prefix_closed| CONST-DECL "bool" |processes| "../rules/")
    (|process| TYPE-EQ-DECL NIL |processes| "../rules/")
    (UROLE_INIT CONST-DECL "process[event]" |gnsl_init| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (INIT CONST-DECL "bool" |gnsl_init| NIL)
    (|\|-| CONST-DECL "bool" |gnsl_init| NIL)
    (|event| TYPE-DECL NIL |dynetwork| NIL)
    (|u!1| SKOLEM-CONST-DECL "Identity" |gnsl_init| NIL)
    (|i!2| SKOLEM-CONST-DECL "Nonces(P!1, u!1, 0)" |gnsl_init| NIL)
    (|i!1| SKOLEM-CONST-DECL "nat_1_to(p)" |gnsl_init| NIL)
    (|x_nlist| ADT-ACCESSOR-DECL "[(nlist?) -> list[Nonce]]" |gnsl_init| NIL)
    (|y_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|x_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|elt_append2| FORMULA-DECL NIL |listprops| NIL)
    (|restriction_stop| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|n_orig| FORMULA-DECL NIL |gnsl_init| NIL)
    (|x_public| ADT-ACCESSOR-DECL "[(public?) -> Identity]" |gnsl_init| NIL)
    (|Message_public_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|Message_ilist_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|length_nth_equality| FORMULA-DECL NIL |listprops| NIL)
    (|length_cdr| FORMULA-DECL NIL |more_list_props| "../rules/")
    (P!1 SKOLEM-CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|i!3| SKOLEM-CONST-DECL "[{x: list[Nonce] | length(x) = P!1 - 1},
 {x: list[Identity] |
          (length(x) = P!1 - 1) AND
           (FORALL (i: below[P!1 - 1]): nth(x, i) = hu(1 + i))}]"
     |gnsl_init| NIL)
    (|i!5| SKOLEM-CONST-DECL "below[length[Identity](cdr(i!3`2))]" |gnsl_init|
     NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|Message_conc_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|hu_list| CONST-DECL "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     |gnsl_init| NIL)
    (|elt| CONST-DECL "bool" |listprops| NIL)
    (|remove| DEF-DECL "list[T]" |listprops| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL)
    (|restriction_pref| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|uniform_stop2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|uniform_prefix2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Stop| CONST-DECL "process" |processes| "../rules/")
    (|commit| ADT-CONSTRUCTOR-DECL
     "[[Role, list[Identity], Nonce] -> (commit?)]" |gnsl_init| NIL)
    (|commit?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|signal| ADT-CONSTRUCTOR-DECL "[M -> (signal?)]" |dynetwork| NIL)
    (|signal?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|rec| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (rec?)]" |dynetwork| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|ilist| ADT-CONSTRUCTOR-DECL "[list[Identity] -> (ilist?)]" |gnsl_init|
     NIL)
    (|ilist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nlist| ADT-CONSTRUCTOR-DECL "[list[Nonce] -> (nlist?)]" |gnsl_init| NIL)
    (|nlist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|conc| ADT-CONSTRUCTOR-DECL "[[Message, Message] -> (conc?)]" |gnsl_init|
     NIL)
    (|conc?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public| ADT-CONSTRUCTOR-DECL "[Identity -> (public?)]" |gnsl_init| NIL)
    (E CONST-DECL "Message" |gnsl_init| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|trans| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (trans?)]" |dynetwork| NIL)
    (|trans?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (>> CONST-DECL "process" |processes| "../rules/")
    (|restriction_choice3| FORMULA-DECL NIL |restriction_rules2| "../rules/")
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|uniform3_choice2| FORMULA-DECL NIL |uniform_props2| "../rules/")
    (|RankUser| CONST-DECL "setof[trace[event]]" |dynetwork| NIL))
   1725 1535 T NIL))
 (|restrictmiddle_middle| 0
  (|restrictmiddle_middle-1| NIL 3399299728 3399299860
   ("" (AUTO-REWRITE-THEORY "sets")
    (("" (AUTO-REWRITE "USER_TCC2")
      (("" (SKOLEM!)
        (("" (PROP)
          (("" (EXPAND "RankUser")
            (("" (INTERLEAVING2)
              (("" (EXPAND "UROLE_MIDDLE")
                (("" (TYPEPRED "P!1" "i!2`1")
                  (("" (CHOICE3)
                    (("1" (PREFIX)
                      (("1" (DELETE 2 3)
                        (("1" (PREFIX)
                          (("1" (DELETE - 2 3)
                            (("1" (EXPAND "rho_middle")
                              (("1" (PROPAX) NIL NIL)) NIL))
                            NIL)
                           ("2" (DELETE 3)
                            (("2" (PREFIX)
                              (("1" (DELETE 2 3)
                                (("1" (EXPAND "R_middle")
                                  (("1"
                                    (COMMENT
                                     "the process is either blocked on R or continues")
                                    (("1"
                                      (CASE
                                          "i!2`1=i!1 AND append(i!3`3,cons(u!1,i!3`4))=hu_list AND car(i!3`1)=n_init")
                                      (("1" (DELETE -2 -3 -4 -5 1 3)
                                        (("1" (GROUND) NIL NIL)) NIL)
                                       ("2" (DELETE 3)
                                        (("2"
                                          (COMMENT
                                           "first and foremost, let us prove that i!2`2 /= n_init")
                                          (("2" (CASE "i!2`2 /= n_init")
                                            (("1" (EXPAND "rho_middle" -2)
                                              (("1"
                                                (GRIND :EXCLUDE
                                                 ("rho_middle" "remove"))
                                                (("1"
                                                  (COMMENT
                                                   "due to -1 (and i!2`2 /= n_init), 3 will be satisfied")
                                                  (("1" (DELETE 2)
                                                    (("1"
                                                      (LEMMA "elt_append3"
                                                       ("l1" "i!3`1" "l2"
                                                        "(: i!2`2 :)" "t"
                                                        "n_init"))
                                                      (("1"
                                                        (LEMMA "elt_singleton"
                                                         ("t1" "i!2`2" "t2"
                                                          "n_init"))
                                                        (("1"
                                                          (GRIND :EXCLUDE
                                                           "elt")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    ";;; due to -1 (and i!2`2 /= n_init), 3 will be satisfied"))
                                                  NIL)
                                                 ("2"
                                                  (COMMENT "2 follows from -6")
                                                  (("2"
                                                    (DELETE -1
                                                            -2
                                                            -3
                                                            -4
                                                            -5
                                                            -7
                                                            -8
                                                            -9
                                                            1
                                                            3
                                                            4)
                                                    (("2"
                                                      (MDECOMPOSE-EQUALITY -1)
                                                      NIL NIL))
                                                    ";;; 2 follows from -6"))
                                                  NIL)
                                                 ("3"
                                                  (COMMENT
                                                   "due to -1 (and i!2`2 /= n_init), 3 will be satisfied")
                                                  (("3" (DELETE 2)
                                                    (("3"
                                                      (LEMMA "elt_append3"
                                                       ("l1" "i!3`1" "l2"
                                                        "(: i!2`2 :)" "t"
                                                        "n_init"))
                                                      (("3"
                                                        (LEMMA "elt_singleton"
                                                         ("t1" "i!2`2" "t2"
                                                          "n_init"))
                                                        (("3"
                                                          (GRIND :EXCLUDE
                                                           "elt")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    ";;; due to -1 (and i!2`2 /= n_init), 3 will be satisfied"))
                                                  NIL)
                                                 ("4"
                                                  (TYPEPRED "i!3`1" "i!3`3"
                                                   "i!3`4" "hu_list" "i!1")
                                                  (("4"
                                                    (DELETE -1
                                                            -3
                                                            -5
                                                            -7
                                                            -10
                                                            -12
                                                            -14
                                                            -19
                                                            1
                                                            3)
                                                    (("4"
                                                      (COMMENT
                                                       "1 follows from -10")
                                                      (("4"
                                                        (DECOMPOSE-EQUALITY -9)
                                                        (("4"
                                                          (DECOMPOSE-EQUALITY
                                                           -10)
                                                          (("4"
                                                            (DECOMPOSE-EQUALITY
                                                             -1)
                                                            (("4"
                                                              (DECOMPOSE-EQUALITY
                                                               -2)
                                                              (("4"
                                                                (COMMENT
                                                                 "establish some obvious equalities")
                                                                (("4"
                                                                  (CASE
                                                                      "P!1=p AND j!1=i!2`1 AND length(append(i!3`3, cons(u!1, i!3`4)))=p")
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (REPLACE*
                                                                       -1)
                                                                      (("1"
                                                                        (REPLACE*
                                                                         -2)
                                                                        (("1"
                                                                          (REPLACE*
                                                                           -6)
                                                                          (("1"
                                                                            (DELETE
                                                                             -1
                                                                             -2
                                                                             -5
                                                                             -6)
                                                                            (("1"
                                                                              (COMMENT
                                                                               "prove equality of lists by equality of length and elements")
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "length_nth_equality[Identity]"
                                                                                 1)
                                                                                (("1"
                                                                                  (SKOLEM-TYPEPRED)
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "equality_nth"
                                                                                     ("l1"
                                                                                      "append(i!3`3, i!3`4)"
                                                                                      "l2"
                                                                                      "remove(hu_list, i!2`1)"))
                                                                                    (("1"
                                                                                      (PROP)
                                                                                      (("1"
                                                                                        (LEMMA
                                                                                         "nth_remove"
                                                                                         ("l"
                                                                                          "hu_list"
                                                                                          "i"
                                                                                          "i!2`1"))
                                                                                        (("1"
                                                                                          (LEMMA
                                                                                           "nth_append"
                                                                                           ("l1"
                                                                                            "i!3`3"
                                                                                            "l2"
                                                                                            "i!3`4"))
                                                                                          (("1"
                                                                                            (LEMMA
                                                                                             "nth_append"
                                                                                             ("l1"
                                                                                              "i!3`3"
                                                                                              "l2"
                                                                                              "cons(hu(i!2`1), i!3`4)"
                                                                                              "i"
                                                                                              "i!4"))
                                                                                            (("1"
                                                                                              (REPLACE
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (DELETE
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (CASE
                                                                                                      "i!4<i!2`1 OR i!4=i!2`1 OR i!4>i!2`1")
                                                                                                  (("1"
                                                                                                    (DELETE
                                                                                                     -7
                                                                                                     -8
                                                                                                     -13
                                                                                                     -14
                                                                                                     -15
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (GRIND
                                                                                                       :EXCLUDE
                                                                                                       ("append"
                                                                                                        "remove"))
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL)
                                                                                                   ("2"
                                                                                                    (DELETE
                                                                                                     -
                                                                                                     2
                                                                                                     3
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (GROUND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                ";;; prove equality of lists by equality of length and elements"))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (LEMMA
                                                                     "equality_length"
                                                                     ("l1"
                                                                      "append(i!3`3, i!3`4)"
                                                                      "l2"
                                                                      "remove(hu_list, j!1)"))
                                                                    (("2"
                                                                      (REWRITE
                                                                       "length_append"
                                                                       -1)
                                                                      (("2"
                                                                        (REWRITE
                                                                         "length_remove"
                                                                         -1
                                                                         :DIR
                                                                         RL)
                                                                        (("2"
                                                                          (REPLACE
                                                                           -3
                                                                           -5)
                                                                          (("2"
                                                                            (EXPAND
                                                                             "length"
                                                                             -5)
                                                                            (("2"
                                                                              (REPLACE
                                                                               -11
                                                                               -5)
                                                                              (("2"
                                                                                (GROUND)
                                                                                (("2"
                                                                                  (REWRITE
                                                                                   "length_append")
                                                                                  (("2"
                                                                                    (GROUND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  ";;; establish some obvious equalities"))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        ";;; 1 follows from -10"))
                                                      NIL))
                                                    NIL))
                                                  NIL)
                                                 ("5"
                                                  (COMMENT
                                                   "due to -1 (and i!2`2 /= n_init), 3 will be satisfied")
                                                  (("5" (DELETE 2)
                                                    (("5"
                                                      (LEMMA "elt_append3"
                                                       ("l1" "i!3`1" "l2"
                                                        "(: i!2`2 :)" "t"
                                                        "n_init"))
                                                      (("5"
                                                        (LEMMA "elt_singleton"
                                                         ("t1" "i!2`2" "t2"
                                                          "n_init"))
                                                        (("5"
                                                          (GRIND :EXCLUDE
                                                           "elt")
                                                          NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    ";;; due to -1 (and i!2`2 /= n_init), 3 will be satisfied"))
                                                  NIL)
                                                 ("6"
                                                  (TYPEPRED "i!3`1" "i!3`3"
                                                   "i!3`4" "hu_list" "i!1")
                                                  (("6"
                                                    (DELETE -1
                                                            -3
                                                            -5
                                                            -7
                                                            -10
                                                            -12
                                                            -14
                                                            -19
                                                            1)
                                                    (("6"
                                                      (COMMENT
                                                       "this is the case of the run under consideration, so 2 must be proven by showing the parameters satisfy the EXISTS quantor in rho")
                                                      (("6"
                                                        (DECOMPOSE-EQUALITY -9)
                                                        (("6"
                                                          (DECOMPOSE-EQUALITY
                                                           -10)
                                                          (("6"
                                                            (DECOMPOSE-EQUALITY
                                                             -1)
                                                            (("6"
                                                              (DECOMPOSE-EQUALITY
                                                               -2)
                                                              (("6"
                                                                (COMMENT
                                                                 "establish some obvious equalities")
                                                                (("6"
                                                                  (CASE
                                                                      "P!1=p AND j!1=i!2`1")
                                                                  (("1"
                                                                    (FLATTEN)
                                                                    (("1"
                                                                      (REPLACE*
                                                                       -1 -2
                                                                       -5)
                                                                      (("1"
                                                                        (DELETE
                                                                         -1
                                                                         -2
                                                                         -5)
                                                                        (("1"
                                                                          (GRIND
                                                                           :IF-MATCH
                                                                           NIL
                                                                           :EXCLUDE
                                                                           "remove")
                                                                          (("1"
                                                                            (COMMENT
                                                                             "car(i!3`4)=hu(i!2`1+1), according to -2")
                                                                            (("1"
                                                                              (INST
                                                                               2
                                                                               "i!2`1+1")
                                                                              (("1"
                                                                                (SPLIT)
                                                                                (("1"
                                                                                  (DECOMPOSE-EQUALITY
                                                                                   1)
                                                                                  (("1"
                                                                                    (LEMMA
                                                                                     "equality_nth"
                                                                                     ("l1"
                                                                                      "append(i!3`3, i!3`4)"
                                                                                      "l2"
                                                                                      "remove(hu_list, i!2`1)"))
                                                                                    (("1"
                                                                                      (PROP)
                                                                                      (("1"
                                                                                        (INST
                                                                                         -1
                                                                                         "i!2`1")
                                                                                        (("1"
                                                                                          (REWRITE
                                                                                           "nth_append"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (STOP-REWRITE
                                                                                             "nth")
                                                                                            (("1"
                                                                                              (REWRITE
                                                                                               "nth_remove"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (INST
                                                                                                 -8
                                                                                                 "1+i!2`1")
                                                                                                (("1"
                                                                                                  (DELETE
                                                                                                   -2
                                                                                                   -3
                                                                                                   -4
                                                                                                   -5
                                                                                                   -6
                                                                                                   -7
                                                                                                   -9
                                                                                                   -10
                                                                                                   -11
                                                                                                   -12
                                                                                                   -13
                                                                                                   -14
                                                                                                   2
                                                                                                   3)
                                                                                                  (("1"
                                                                                                    (GROUND)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL)
                                                                                         ("2"
                                                                                          (REWRITE
                                                                                           "length_append"
                                                                                           1)
                                                                                          (("2"
                                                                                            (DELETE
                                                                                             -1
                                                                                             -2
                                                                                             -3
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9
                                                                                             -10
                                                                                             -11
                                                                                             -12
                                                                                             2
                                                                                             3
                                                                                             4)
                                                                                            (("2"
                                                                                              (GROUND)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (INST
                                                                                   1
                                                                                   "append(l!1, (: i!2`2 :))")
                                                                                  (("1"
                                                                                    (DECOMPOSE-EQUALITY
                                                                                     1)
                                                                                    (("1"
                                                                                      (DECOMPOSE-EQUALITY
                                                                                       1)
                                                                                      (("1"
                                                                                        (COMMENT
                                                                                         "establish a convenient truth")
                                                                                        (("1"
                                                                                          (CASE
                                                                                              "length(append(i!3`3, cons(hu(i!2`1), cdr(i!3`4))))=p-1")
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "length_nth_equality[Identity]"
                                                                                             1)
                                                                                            (("1"
                                                                                              (DELETE
                                                                                               -2
                                                                                               -3
                                                                                               -4
                                                                                               -5
                                                                                               -6
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11
                                                                                               -12
                                                                                               -13
                                                                                               -14
                                                                                               2
                                                                                               3
                                                                                               4)
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "length_remove"
                                                                                                   1
                                                                                                   :DIR
                                                                                                   RL)
                                                                                                  (("1"
                                                                                                    (GROUND)
                                                                                                    NIL
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (SKOLEM-TYPEPRED)
                                                                                              (("2"
                                                                                                (DELETE
                                                                                                 -3
                                                                                                 -5
                                                                                                 -10
                                                                                                 -11
                                                                                                 -12
                                                                                                 -13
                                                                                                 2
                                                                                                 3
                                                                                                 4)
                                                                                                (("2"
                                                                                                  (LEMMA
                                                                                                   "equality_nth"
                                                                                                   ("l1"
                                                                                                    "append(i!3`3, i!3`4)"
                                                                                                    "l2"
                                                                                                    "remove(hu_list, i!2`1)"))
                                                                                                  (("2"
                                                                                                    (PROP)
                                                                                                    (("2"
                                                                                                      (LEMMA
                                                                                                       "nth_append"
                                                                                                       ("l1"
                                                                                                        "i!3`3"
                                                                                                        "l2"
                                                                                                        "cons(hu(i!2`1), cdr(i!3`4))"
                                                                                                        "i"
                                                                                                        "i!5"))
                                                                                                      (("1"
                                                                                                        (REPLACE
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (DELETE
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "nth_remove"
                                                                                                             ("l"
                                                                                                              "hu_list"
                                                                                                              "i"
                                                                                                              "1+i!2`1"
                                                                                                              "j"
                                                                                                              "i!5"))
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (DELETE
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "nth_append"
                                                                                                                   ("l1"
                                                                                                                    "i!3`3"
                                                                                                                    "l2"
                                                                                                                    "i!3`4"))
                                                                                                                  (("1"
                                                                                                                    (LEMMA
                                                                                                                     "nth_remove"
                                                                                                                     ("l"
                                                                                                                      "hu_list"
                                                                                                                      "i"
                                                                                                                      "i!2`1"))
                                                                                                                    (("1"
                                                                                                                      (GRIND
                                                                                                                       :EXCLUDE
                                                                                                                       ("append"
                                                                                                                        "remove"))
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL)
                                                                                                       ("2"
                                                                                                        (DELETE
                                                                                                         -1
                                                                                                         -4
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         -10
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (REWRITE
                                                                                                           "length_cdr")
                                                                                                          (("2"
                                                                                                            (GROUND)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (REWRITE
                                                                                             "length_append")
                                                                                            (("2"
                                                                                              (DELETE
                                                                                               -1
                                                                                               -2
                                                                                               -3
                                                                                               -6
                                                                                               -7
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11
                                                                                               -12
                                                                                               -13
                                                                                               2
                                                                                               3
                                                                                               4)
                                                                                              (("2"
                                                                                                (REWRITE
                                                                                                 "length_cdr")
                                                                                                (("2"
                                                                                                  (GROUND)
                                                                                                  NIL
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          ";;; establish a convenient truth"))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (DELETE
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     -4
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     -13
                                                                                     2
                                                                                     3)
                                                                                    (("2"
                                                                                      (REWRITE
                                                                                       "length_append"
                                                                                       1)
                                                                                      (("2"
                                                                                        (GROUND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              ";;; car(i!3`4)=hu(i!2`1+1), according to -2"))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (REPLACE -2
                                                                             -4)
                                                                    (("2"
                                                                      (EXPAND
                                                                       "length"
                                                                       -4)
                                                                      (("2"
                                                                        (REPLACE
                                                                         -10
                                                                         -4)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "equality_length"
                                                                           ("l1"
                                                                            "append(i!3`3, i!3`4)"
                                                                            "l2"
                                                                            "remove(hu_list, j!1)"))
                                                                          (("2"
                                                                            (REWRITE
                                                                             "length_append"
                                                                             -1)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "length_remove"
                                                                               -1
                                                                               :DIR
                                                                               RL)
                                                                              (("2"
                                                                                (DELETE
                                                                                 -3
                                                                                 -4
                                                                                 -9
                                                                                 -10
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14
                                                                                 2
                                                                                 3
                                                                                 4)
                                                                                (("2"
                                                                                  (GROUND)
                                                                                  NIL
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  ";;; establish some obvious equalities"))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        ";;; this is the case of the run under consideration, so 2 must be proven by showing the parameters satisfy the EXISTS quantor in rho"))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (DELETE -1 -2 -4 2 3 4)
                                              (("2" (TYPEPRED "i!2`2")
                                                (("2"
                                                  (LEMMA "n_prop"
                                                   ("P" "P!1" "u" "u!1" "r"
                                                    "i!2`1"))
                                                  (("2" (GRIND) NIL NIL)) NIL))
                                                NIL))
                                              NIL))
                                            ";;; first and foremost, let us prove that i!2`2 /= n_init"))
                                          NIL))
                                        NIL))
                                      ";;; the process is either blocked on R or continues"))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (DELETE 2 3 4)
                                (("2" (PREFIX)
                                  (("2" (DELETE 2 3)
                                    (("2" (EXPAND "LastMessage")
                                      (("2" (LIFT-IF)
                                        (("2" (PROP)
                                          (("1" (PREFIX)
                                            (("1" (DELETE -3 2 3)
                                              (("1"
                                                (LEMMA "elt_append2"
                                                 ("l1" "(: i!2`2:)" "l2"
                                                  "i!3`2" "t" "n_init"))
                                                (("1"
                                                  (GRIND :IF-MATCH NIL :EXCLUDE
                                                   "elt")
                                                  (("1" (DECOMPOSE-EQUALITY -9)
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (DELETE - 2 3)
                                              (("2" (STOP) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (PREFIX)
                                            (("1" (DELETE -2 2 3)
                                              (("1"
                                                (LEMMA "elt_append2"
                                                 ("l1" "(: i!2`2:)" "l2"
                                                  "i!3`2" "t" "n_init"))
                                                (("1"
                                                  (GRIND :IF-MATCH NIL :EXCLUDE
                                                   "elt")
                                                  (("1" (DECOMPOSE-EQUALITY -8)
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (DELETE - 2 3)
                                              (("2" (STOP) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (DELETE 3)
                      (("2" (TYPEPRED "i!3`4")
                        (("2" (DELETE -1)
                          (("2" (LEMMA "length_non_zero" ("l" "i!3`4"))
                            (("2" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (DELETE 3)
                      (("3" (TYPEPRED "i!3`1")
                        (("3" (DELETE -1)
                          (("3" (LEMMA "length_non_zero" ("l" "i!3`1"))
                            (("3" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (DELETE 3)
                      (("4" (TYPEPRED "i!3`3")
                        (("4" (DELETE -1)
                          (("4" (LEMMA "length_non_zero" ("l" "i!3`3"))
                            (("4" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("5" (DELETE 3)
                      (("5" (SKOLEM-TYPEPRED)
                        (("5" (DELETE -1 -2 -3 -4 -5 -6 -7)
                          (("5" (LEMMA "length_non_zero" ("l" "il2!1"))
                            (("5" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("6" (DELETE 3)
                      (("6" (SKOLEM-TYPEPRED)
                        (("6" (DELETE -1 -3 -4 -5 -6 -7 -8)
                          (("6" (LEMMA "length_non_zero" ("l" "nl1!1"))
                            (("6" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|RankUser| CONST-DECL "setof[trace[event]]" |dynetwork| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|uniform3_choice2| FORMULA-DECL NIL |uniform_props2| "../rules/")
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|restriction_choice3| FORMULA-DECL NIL |restriction_rules2| "../rules/")
    (>> CONST-DECL "process" |processes| "../rules/")
    (|rec| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (rec?)]" |dynetwork| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (E CONST-DECL "Message" |gnsl_init| NIL)
    (|public| ADT-CONSTRUCTOR-DECL "[Identity -> (public?)]" |gnsl_init| NIL)
    (|conc?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|conc| ADT-CONSTRUCTOR-DECL "[[Message, Message] -> (conc?)]" |gnsl_init|
     NIL)
    (|nlist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|nlist| ADT-CONSTRUCTOR-DECL "[list[Nonce] -> (nlist?)]" |gnsl_init| NIL)
    (|ilist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|ilist| ADT-CONSTRUCTOR-DECL "[list[Identity] -> (ilist?)]" |gnsl_init|
     NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|signal?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|signal| ADT-CONSTRUCTOR-DECL "[M -> (signal?)]" |dynetwork| NIL)
    (|running?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|running| ADT-CONSTRUCTOR-DECL
     "[[Role, list[Identity], Nonce] -> (running?)]" |gnsl_init| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|trans?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|trans| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (trans?)]" |dynetwork| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|LastMessage| CONST-DECL "event" |gnsl_init| NIL)
    (|Stop| CONST-DECL "process" |processes| "../rules/")
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|elt_append2| FORMULA-DECL NIL |listprops| NIL)
    (|restriction_stop| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|elt_singleton| FORMULA-DECL NIL |listprops| NIL)
    (|remove| DEF-DECL "list[T]" |listprops| NIL)
    (|elt_append3| FORMULA-DECL NIL |listprops| NIL)
    (|x_nlist| ADT-ACCESSOR-DECL "[(nlist?) -> list[Nonce]]" |gnsl_init| NIL)
    (|y_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|x_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|x_public| ADT-ACCESSOR-DECL "[(public?) -> Identity]" |gnsl_init| NIL)
    (|equality_length| FORMULA-DECL NIL |listprops| NIL)
    (|length_remove| FORMULA-DECL NIL |listprops| NIL)
    (|length_append| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|length_nth_equality| FORMULA-DECL NIL |listprops| NIL)
    (|equality_nth| FORMULA-DECL NIL |listprops| NIL)
    (|nth_remove| FORMULA-DECL NIL |listprops| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (P!1 SKOLEM-CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|u!1| SKOLEM-CONST-DECL "Identity" |gnsl_init| NIL)
    (|i!2| SKOLEM-CONST-DECL "[k: nat_1_to(P!1), Nonces(P!1, u!1, k)]"
     |gnsl_init| NIL)
    (|i!3| SKOLEM-CONST-DECL "[{x: list[Nonce] | length(x) = i!2`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!2`1},
 {x: list[Identity] | length(x) = i!2`1},
 {x: list[Identity] | length(x) = P!1 - 1 - i!2`1}]"
     |gnsl_init| NIL)
    (|i!4| SKOLEM-CONST-DECL
     "below[length[Identity](append(i!3`3, cons(hu(i!2`1), i!3`4)))]"
     |gnsl_init| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (> CONST-DECL "bool" |reals| NIL)
    (|nth_append| FORMULA-DECL NIL |listprops| NIL)
    (|x_ilist| ADT-ACCESSOR-DECL "[(ilist?) -> list[Identity]]" |gnsl_init|
     NIL)
    (|Message_public_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|Message_conc_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|length_cdr| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|i!5| SKOLEM-CONST-DECL
     "below[length[Identity](append(i!3`3, cons(hu(i!2`1), cdr(i!3`4))))]"
     |gnsl_init| NIL)
    (|Message_ilist_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|i!1| SKOLEM-CONST-DECL "nat_1_to(p)" |gnsl_init| NIL)
    (|j!1| SKOLEM-CONST-DECL "{x: nat | 0 < x AND x <= i!1}" |gnsl_init| NIL)
    (|l!1| SKOLEM-CONST-DECL "{x: list[Nonce] | length(x) = j!1 - 1}"
     |gnsl_init| NIL)
    (|elt| CONST-DECL "bool" |listprops| NIL)
    (|n_prop| FORMULA-DECL NIL |gnsl_init| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL)
    (|hu_list| CONST-DECL "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     |gnsl_init| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|restriction_pref| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|uniform_stop2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|uniform_prefix2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|event| TYPE-DECL NIL |dynetwork| NIL)
    (|\|-| CONST-DECL "bool" |gnsl_init| NIL)
    (INIT CONST-DECL "bool" |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (UROLE_MIDDLE CONST-DECL "process[event]" |gnsl_init| NIL)
    (|nat_from_3| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|process| TYPE-EQ-DECL NIL |processes| "../rules/")
    (|prefix_closed| CONST-DECL "bool" |processes| "../rules/")
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../rules/")
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|R_middle| CONST-DECL "set[event]" |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|restriction_free_par2| FORMULA-DECL NIL |restriction_rules3| "../rules/")
    (|member| CONST-DECL "bool" |sets| NIL)
    (|complement| CONST-DECL "set" |sets| NIL)
    (USER_TCC2 EXISTENCE-TCC NIL |gnsl_init| NIL)
    (|msg| SHARED-ADT-ACCESSOR-DECL "[event -> M]" |dynetwork| NIL)
    (|rho_middle| DEF-DECL "bool" |gnsl_init| NIL)
    (|rec?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|#| CONST-DECL "process[T]" |restriction_rules| "../rules/")
    (|uniform2_interleave2| FORMULA-DECL NIL |uniform_props3| "../rules/")
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   13000 6552 NIL NIL))
 (|restrictmiddle_last| 0
  (|restrictmiddle_last-1| NIL 3399224676 3399298070
   ("" (AUTO-REWRITE-THEORY "sets")
    (("" (SKOLEM!)
      (("" (EXPAND "RankUser")
        (("" (INTERLEAVING2)
          (("" (EXPAND "UROLE_LAST")
            (("" (TYPEPRED "P!1")
              (("" (CHOICE3)
                (("1" (PREFIX)
                  (("1" (DELETE 2 3)
                    (("1" (PREFIX)
                      (("1" (DELETE - 2 3)
                        (("1" (EXPAND "rho_middle") (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (DELETE 2 3)
                        (("2" (PREFIX)
                          (("1" (DELETE 2 3)
                            (("1"
                              (COMMENT
                               "first, let's establish that i!2 /= n_init")
                              (("1" (CASE "i!2 /= n_init")
                                (("1" (EXPAND "rho_middle" -2)
                                  (("1"
                                    (GRIND :EXCLUDE ("rho_middle" "remove"))
                                    (("1"
                                      (COMMENT
                                       "due to -1 (and i!2 /= n_init), 2 will be satisfied")
                                      (("1"
                                        (LEMMA "elt_append3"
                                         ("l1" "i!3`1" "l2" "(: i!2 :)" "t"
                                          "n_init"))
                                        (("1"
                                          (LEMMA "elt_singleton"
                                           ("t1" "i!2" "t2" "n_init"))
                                          (("1" (GRIND :EXCLUDE "elt") NIL
                                            NIL))
                                          NIL))
                                        ";;; due to -1 (and i!2 /= n_init), 2 will be satisfied"))
                                      NIL)
                                     ("2"
                                      (COMMENT
                                       "in this case, the received message is in rho because it contains n_init and is 'escaped' in rho ")
                                      (("2"
                                        (COMMENT
                                         "this cannot be the case for the last user (p-1), so there must be a contradiction in the assumptions")
                                        (("2"
                                          (TYPEPRED "i!3`1" "i!3`2" "hu_list"
                                           "i!1")
                                          (("2"
                                            (DELETE -1
                                                    -3
                                                    -5
                                                    -7
                                                    -8
                                                    -10
                                                    -12
                                                    -14
                                                    -16
                                                    +)
                                            (("2"
                                              (COMMENT
                                               "the contradiction lies in -6")
                                              (("2"
                                                (CASE "P!1=p AND j!1=P!1-1")
                                                (("1" (DELETE -2 -3 -4 -6 -8)
                                                  (("1" (GROUND) NIL NIL)) NIL)
                                                 ("2" (DECOMPOSE-EQUALITY -7)
                                                  (("2" (DECOMPOSE-EQUALITY -1)
                                                    (("2"
                                                      (DECOMPOSE-EQUALITY -2)
                                                      (("2" (SPLIT)
                                                        (("1"
                                                          (DELETE -2
                                                                  -3
                                                                  -6
                                                                  -7
                                                                  -8)
                                                          (("1" (REPLACE -1 -2)
                                                            (("1"
                                                              (REWRITE
                                                               "length_remove"
                                                               -2
                                                               ("c" "hu_list"
                                                                "i" "j!1")
                                                               :DIR RL)
                                                              (("1" (GROUND)
                                                                NIL NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2"
                                                          (DELETE -1
                                                                  -4
                                                                  -5
                                                                  -6
                                                                  -8)
                                                          (("2" (REPLACE -1 -2)
                                                            (("2"
                                                              (EXPAND "length"
                                                                      -2)
                                                              (("2"
                                                                (REPLACE -3 -2)
                                                                (("2"
                                                                  (SIMPLIFY -2)
                                                                  (("2"
                                                                    (PROPAX)
                                                                    NIL NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                ";;; the contradiction lies in -6"))
                                              NIL))
                                            NIL))
                                          ";;; this cannot be the case for the last user (p-1), so there must be a contradiction in the assumptions"))
                                        ";;; in this case, the received message is in rho because it contains n_init and is 'escaped' in rho "))
                                      NIL))
                                    NIL))
                                  NIL)
                                 ("2" (DELETE - 2)
                                  (("2" (TYPEPRED "i!2")
                                    (("2"
                                      (LEMMA "n_prop"
                                       ("P" "P!1" "u" "u!1" "r" "P!1-1"))
                                      (("2" (GRIND) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                ";;; first, let's establish that i!2 /= n_init"))
                              NIL))
                            NIL)
                           ("2" (DELETE 2 3)
                            (("2" (PREFIX)
                              (("2" (DELETE 2 3) (("2" (STOP) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "i!3`2")
                  (("2" (DELETE -1 2)
                    (("2" (LEMMA "length_non_zero" ("l" "i!3`2"))
                      (("2" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("3" (TYPEPRED "i!3`1")
                  (("3" (DELETE -1 2)
                    (("3" (LEMMA "length_non_zero" ("l" "i!3`1"))
                      (("3" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (TYPEPRED "i!3`2")
                  (("4" (DELETE -1 2) (("4" (GROUND) NIL NIL)) NIL)) NIL)
                 ("5" (SKOLEM-TYPEPRED)
                  (("5" (DELETE -1 -2 -3 2)
                    (("5" (LEMMA "length_non_zero" ("l" "il!1"))
                      (("5" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("6" (SKOLEM-TYPEPRED)
                  (("6" (DELETE -1 -3 -4 2)
                    (("6" (LEMMA "length_non_zero" ("l" "nl!1"))
                      (("6" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|uniform2_interleave2| FORMULA-DECL NIL |uniform_props3| "../rules/")
    (|#| CONST-DECL "process[T]" |restriction_rules| "../rules/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rec?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|rho_middle| DEF-DECL "bool" |gnsl_init| NIL)
    (|msg| SHARED-ADT-ACCESSOR-DECL "[event -> M]" |dynetwork| NIL)
    (|complement| CONST-DECL "set" |sets| NIL)
    (|restriction_free_par2| FORMULA-DECL NIL |restriction_rules3| "../rules/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|R_middle| CONST-DECL "set[event]" |gnsl_init| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../rules/")
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|prefix_closed| CONST-DECL "bool" |processes| "../rules/")
    (|process| TYPE-EQ-DECL NIL |processes| "../rules/")
    (UROLE_LAST CONST-DECL "process[event]" |gnsl_init| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (INIT CONST-DECL "bool" |gnsl_init| NIL)
    (|\|-| CONST-DECL "bool" |gnsl_init| NIL)
    (|event| TYPE-DECL NIL |dynetwork| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|uniform_prefix2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|uniform_stop2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|restriction_pref| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|n_prop| FORMULA-DECL NIL |gnsl_init| NIL)
    (|hu_list| CONST-DECL "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     |gnsl_init| NIL)
    (|x_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|y_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|x_ilist| ADT-ACCESSOR-DECL "[(ilist?) -> list[Identity]]" |gnsl_init|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_remove| FORMULA-DECL NIL |listprops| NIL)
    (|x_nlist| ADT-ACCESSOR-DECL "[(nlist?) -> list[Nonce]]" |gnsl_init| NIL)
    (|elt_singleton| FORMULA-DECL NIL |listprops| NIL)
    (|remove| DEF-DECL "list[T]" |listprops| NIL)
    (|elt_append3| FORMULA-DECL NIL |listprops| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|restriction_stop| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Stop| CONST-DECL "process" |processes| "../rules/")
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|trans| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (trans?)]" |dynetwork| NIL)
    (|trans?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|running| ADT-CONSTRUCTOR-DECL
     "[[Role, list[Identity], Nonce] -> (running?)]" |gnsl_init| NIL)
    (|running?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|signal| ADT-CONSTRUCTOR-DECL "[M -> (signal?)]" |dynetwork| NIL)
    (|signal?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|ilist| ADT-CONSTRUCTOR-DECL "[list[Identity] -> (ilist?)]" |gnsl_init|
     NIL)
    (|ilist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|nlist| ADT-CONSTRUCTOR-DECL "[list[Nonce] -> (nlist?)]" |gnsl_init| NIL)
    (|nlist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|conc| ADT-CONSTRUCTOR-DECL "[[Message, Message] -> (conc?)]" |gnsl_init|
     NIL)
    (|conc?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public| ADT-CONSTRUCTOR-DECL "[Identity -> (public?)]" |gnsl_init| NIL)
    (E CONST-DECL "Message" |gnsl_init| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|rec| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (rec?)]" |dynetwork| NIL)
    (>> CONST-DECL "process" |processes| "../rules/")
    (|restriction_choice3| FORMULA-DECL NIL |restriction_rules2| "../rules/")
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|uniform3_choice2| FORMULA-DECL NIL |uniform_props2| "../rules/")
    (|RankUser| CONST-DECL "setof[trace[event]]" |dynetwork| NIL))
   719 690 T NIL))
 (|authentication_middle| 0
  (|authentication_middle-1| NIL 3399299197 3399299245
   ("" (AUTO-REWRITE-THEORY "sets")
    (("" (SKOLEM!)
      (("" (REWRITE "authentication_by_rank" + ("rho" "rho_middle(i!1)"))
        (("1" (DELETE 2)
          (("1" (COMMENT "intruder's initial knowledge is in rho")
            (("1" (SKOLEM!)
              (("1" (PROP)
                (("1" (EXPAND "INIT")
                  (("1" (EXPAND "rho_middle") (("1" (SMASH) NIL NIL)) NIL))
                  NIL))
                NIL))
              ";;; intruder's initial knowledge is in rho"))
            NIL))
          NIL)
         ("2" (DELETE 2)
          (("2"
            (COMMENT
             "from of a set of messages in rho, no message not in rho can be generated")
            (("2" (EXPAND "|-")
              (("2" (RULE-INDUCT "Gen")
                (("2" (SKOLEM!)
                  (("2" (SMASH)
                    (("1" (INST -2 "m!2") (("1" (PROP) NIL NIL)) NIL)
                     ("2" (DELETE -2)
                      (("2" (SKOLEM!)
                        (("2" (PROP)
                          (("2" (REPLACE -3 1)
                            (("2" (EXPAND "rho_middle" 1)
                              (("2" (PROP) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (DELETE -2)
                      (("3" (SKOLEM!)
                        (("3" (EXPAND "rho_middle" -1) (("3" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (DELETE -2)
                      (("4" (SKOLEM!)
                        (("4" (EXPAND "rho_middle" -1) (("4" (PROPAX) NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("5" (DELETE -2)
                      (("5" (SKOLEM!)
                        (("5" (FLATTEN)
                          (("5" (EXPAND "rho_middle" -1)
                            (("5" (REPLACE -2 1)
                              (("5" (EXPAND "rho_middle")
                                (("5" (DELETE -2) (("5" (GRIND) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("6" (DELETE -2)
                      (("6" (SKOLEM!)
                        (("6" (PROP)
                          (("6" (REPLACE -2 1)
                            (("6" (DELETE -2)
                              (("6" (EXPAND "rho_middle")
                                (("6" (EXPAND "elt")
                                  (("6" (INST 1 "0")
                                    (("1" (GRIND :EXCLUDE 2) NIL NIL)
                                     ("2" (DELETE 2) (("2" (GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("7" (DELETE -2)
                      (("7" (SKOLEM!)
                        (("7" (PROP)
                          (("7" (REPLACE -3 1)
                            (("7" (DELETE -3)
                              (("7" (EXPAND "rho_middle")
                                (("7"
                                  (LEMMA "elt_append3"
                                   ("l1" "nl1!1" "l2" "nl2!1" "t" "n_init"))
                                  (("7" (PROP) NIL NIL)) NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("8" (DELETE -2)
                      (("8" (SKOLEM!)
                        (("8" (PROP)
                          (("8" (REPLACE -3 1)
                            (("8" (DELETE -3)
                              (("8" (REPLACE -2 -1)
                                (("8" (DELETE -2)
                                  (("8" (EXPAND "rho_middle")
                                    (("8"
                                      (LEMMA "elt_append1"
                                       ("l1" "nl1!1" "l2" "nl2!1" "t"
                                        "n_init"))
                                      (("8" (PROP) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("9" (DELETE -2)
                      (("9" (SKOLEM!)
                        (("9" (PROP)
                          (("9" (REPLACE -3 1)
                            (("9" (DELETE -3)
                              (("9" (REPLACE -2 -1)
                                (("9" (DELETE -2)
                                  (("9" (EXPAND "rho_middle")
                                    (("9"
                                      (LEMMA "elt_append2"
                                       ("l1" "nl1!1" "l2" "nl2!1" "t"
                                        "n_init"))
                                      (("9" (PROP) NIL NIL)) NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("10" (DELETE -2)
                      (("10" (SKOLEM!)
                        (("10" (PROP)
                          (("10" (REPLACE -2 1)
                            (("10" (DELETE -1 -2)
                              (("10" (EXPAND "rho_middle")
                                (("10" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("11" (DELETE -2)
                      (("11" (SKOLEM!)
                        (("11" (PROP)
                          (("11" (REPLACE -2 1)
                            (("11" (DELETE -1 -2)
                              (("11" (EXPAND "rho_middle")
                                (("11" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("12" (DELETE -2)
                      (("12" (SKOLEM!)
                        (("12" (PROP)
                          (("12" (REPLACE -3 1)
                            (("12" (DELETE -1 -2 -3)
                              (("12" (EXPAND "rho_middle")
                                (("12" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("13" (DELETE -2)
                      (("13" (SKOLEM!)
                        (("13" (PROP)
                          (("13" (REPLACE -3 1)
                            (("13" (DELETE -1 -2 -3)
                              (("13" (EXPAND "rho_middle")
                                (("13" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("14" (DELETE -2)
                      (("14" (SKOLEM!)
                        (("14" (PROP)
                          (("14" (REPLACE -3 1)
                            (("14" (DELETE -1 -2 -3)
                              (("14" (EXPAND "rho_middle")
                                (("14" (PROPAX) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("15" (DELETE -2)
                      (("15" (SKOLEM!)
                        (("15" (PROP)
                          (("15" (REPLACE -3 1)
                            (("15" (DELETE -3)
                              (("15" (TYPEPRED "k!1")
                                (("15" (SPLIT)
                                  (("1" (GRIND) NIL NIL)
                                   ("2" (EXPAND "rho_middle" -3)
                                    (("2" (ASSERT) (("2" (LAZY-GRIND) NIL NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              ";;; from of a set of messages in rho, no message not in rho can be generated"))
            NIL))
          NIL)
         ("3" (DELETE 2)
          (("3" (COMMENT "users maintain the rank function")
            (("3" (SKOLEM!)
              (("3" (EXPAND "USER")
                (("3" (EXPAND "RankUser")
                  (("3" (INTERLEAVING2)
                    (("1" (INTERLEAVING)
                      (("1" (INTERLEAVING)
                        (("1"
                          (LEMMA "restrictmiddle_init"
                           ("P" "i!3" "u" "i!2" "i" "i!1"))
                          (("1" (GRIND :EXCLUDE ("rho_middle" "UROLE_INIT"))
                            NIL NIL))
                          NIL)
                         ("2"
                          (LEMMA "restrictmiddle_last"
                           ("P" "i!3" "u" "i!2" "i" "i!1"))
                          (("2" (GRIND :EXCLUDE ("rho_middle" "UROLE_LAST"))
                            NIL NIL))
                          NIL))
                        NIL)
                       ("2" (LIFT-IF)
                        (("2" (PROP)
                          (("1" (STOP) NIL NIL)
                           ("2"
                            (LEMMA "restrictmiddle_middle"
                             ("P" "i!3" "u" "i!2" "i" "i!1"))
                            (("2"
                              (GRIND :EXCLUDE ("rho_middle" "UROLE_MIDDLE"))
                              NIL NIL))
                            NIL))
                          NIL))
                        NIL)
                       ("3" (DELETE 3)
                        (("3" (USE "USER_TCC2") (("3" (PROP) NIL NIL)) NIL))
                        NIL)
                       ("4" (DELETE 2) (("4" (USE "USER_TCC2") NIL NIL)) NIL))
                      NIL)
                     ("2" (DELETE 2) (("2" (USE "USER_TCC2") NIL NIL)) NIL)
                     ("3" (DELETE 2)
                      (("3" (SKOLEM!) (("3" (USE "USER_TCC2") NIL NIL)) NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              ";;; users maintain the rank function"))
            NIL))
          NIL)
         ("4" (DELETE 2)
          (("4" (COMMENT "T is not in rho")
            (("4" (SKOLEM-TYPEPRED)
              (("4" (EXPAND "T")
                (("4" (REPLACE -1 -2)
                  (("4" (DELETE -1) (("4" (GRIND) NIL NIL)) NIL)) NIL))
                NIL))
              ";;; T is not in rho"))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|authentication_by_rank| FORMULA-DECL NIL |dynetwork| NIL)
    (|event| TYPE-DECL NIL |dynetwork| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|R_middle| CONST-DECL "set[event]" |gnsl_init| NIL)
    (T CONST-DECL "set[event]" |gnsl_init| NIL)
    (|rho_middle| DEF-DECL "bool" |gnsl_init| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../rules/")
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|prefix_closed| CONST-DECL "bool" |processes| "../rules/")
    (|process| TYPE-EQ-DECL NIL |processes| "../rules/")
    (USER CONST-DECL "process[event]" |gnsl_init| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (INIT CONST-DECL "bool" |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|\|-| CONST-DECL "bool" |gnsl_init| NIL)
    (|Gen_weak_induction| FORMULA-DECL NIL |gnsl_init| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|elt| CONST-DECL "bool" |listprops| NIL)
    (|n!1| SKOLEM-CONST-DECL "Nonce" |gnsl_init| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|elt_append3| FORMULA-DECL NIL |listprops| NIL)
    (|elt_append1| FORMULA-DECL NIL |listprops| NIL)
    (|elt_append2| FORMULA-DECL NIL |listprops| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|remove| DEF-DECL "list[T]" |listprops| NIL)
    (E CONST-DECL "Message" |gnsl_init| NIL)
    (|uniform2_interleave2| FORMULA-DECL NIL |uniform_props3| "../rules/")
    (|#| CONST-DECL "process[T]" |restriction_rules| "../rules/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|rec?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|msg| SHARED-ADT-ACCESSOR-DECL "[event -> M]" |dynetwork| NIL)
    (|complement| CONST-DECL "set" |sets| NIL)
    (|restriction_free_par2| FORMULA-DECL NIL |restriction_rules3| "../rules/")
    (// CONST-DECL "process" |processes| "../rules/")
    (|Interleave| CONST-DECL "process[T]" |multipar| "../rules/")
    (UROLE_INIT CONST-DECL "process[event]" |gnsl_init| NIL)
    (UROLE_LAST CONST-DECL "process[event]" |gnsl_init| NIL)
    (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)
    (|Stop| CONST-DECL "process" |processes| "../rules/")
    (|nat_from_3| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (UROLE_MIDDLE CONST-DECL "process[event]" |gnsl_init| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (USER_TCC2 EXISTENCE-TCC NIL |gnsl_init| NIL)
    (|restrictmiddle_middle| FORMULA-DECL NIL |gnsl_init| NIL)
    (|restriction_stop| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|uniform_stop2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|\|>| CONST-DECL "bool" |satisfaction| "../rules/")
    (|Par| CONST-DECL "process" |processes| "../rules/")
    (|restrictmiddle_init| FORMULA-DECL NIL |gnsl_init| NIL)
    (|restrictmiddle_last| FORMULA-DECL NIL |gnsl_init| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|restriction_free_par| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|uniform_interleave2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|RankUser| CONST-DECL "setof[trace[event]]" |dynetwork| NIL))
   4497 1244 T NIL))
 (|restrictlast_init| 0
  ("restrictlast_init-1" "" 3399222475 3399298104
   ("" (AUTO-REWRITE-THEORY "sets")
    (("" (SKOLEM!)
      (("" (EXPAND "RankUser")
        (("" (INTERLEAVING2)
          (("" (EXPAND "UROLE_INIT")
            (("" (LIFT-IF)
              (("" (PROP)
                (("1" (TYPEPRED "p")
                  (("1" (CHOICE3)
                    (("1" (COMMENT "establish obvious equalities")
                      (("1" (CASE "u!1 = hu(0) AND p = P!1")
                        (("1" (FLATTEN)
                          (("1" (REPLACE -1 1)
                            (("1" (REPLACE -2 1 RL)
                              (("1" (REPLACE -4 1)
                                (("1" (DELETE -1 -4)
                                  (("1" (PREFIX)
                                    (("1" (DELETE 2 3)
                                      (("1" (GRIND :IF-MATCH NIL)
                                        (("1"
                                          (COMMENT
                                           "hu(0) sends a message (that is `escaped' in rho) to hu(1)")
                                          (("1" (INST 1 "1")
                                            (("1" (SPLIT)
                                              (("1"
                                                (COMMENT
                                                 "prove that the intended recipient is 1")
                                                (("1" (DECOMPOSE-EQUALITY 1)
                                                  (("1" (TYPEPRED "i!2`2")
                                                    (("1"
                                                      (DELETE -1 -2 -4 -5 -6)
                                                      (("1" (INST -1 "0")
                                                        (("1" (GRIND) NIL NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  ";;; prove that the intended recipient is 1"))
                                                NIL)
                                               ("2"
                                                (COMMENT
                                                 "prove that the message has the right structure")
                                                (("2" (INST 1 "null")
                                                  (("2" (DECOMPOSE-EQUALITY 1)
                                                    (("2"
                                                      (DECOMPOSE-EQUALITY 1)
                                                      (("2"
                                                        (DECOMPOSE-EQUALITY 1)
                                                        (("1"
                                                          (TYPEPRED "hu_list")
                                                          (("1"
                                                            (DELETE -1
                                                                    -2
                                                                    -4
                                                                    -5
                                                                    -6)
                                                            (("1" (INST -1 "0")
                                                              (("1" (GRIND) NIL
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL)
                                                         ("2" (DELETE -1)
                                                          (("2"
                                                            (COMMENT
                                                             "prove that the two lists are equal by showing that their lengths and elements are equal")
                                                            (("2"
                                                              (TYPEPRED "i!2`2"
                                                               "hu_list")
                                                              (("2"
                                                                (DELETE -1 -4)
                                                                (("2"
                                                                  (REWRITE
                                                                   "length_nth_equality[Identity]")
                                                                  (("1"
                                                                    (DELETE -2
                                                                            -4
                                                                            -6
                                                                            2)
                                                                    (("1"
                                                                      (REWRITE
                                                                       "length_cdr")
                                                                      (("1"
                                                                        (REWRITE
                                                                         "length_cdr")
                                                                        (("1"
                                                                          (REWRITE
                                                                           "length_cdr")
                                                                          (("1"
                                                                            (GROUND)
                                                                            NIL
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL)
                                                                   ("2"
                                                                    (DELETE -3
                                                                            -6
                                                                            2)
                                                                    (("2"
                                                                      (SKOLEM-TYPEPRED)
                                                                      (("2"
                                                                        (INST
                                                                         -3
                                                                         "i!4+1")
                                                                        (("1"
                                                                          (INST
                                                                           -4
                                                                           "i!4+2")
                                                                          (("1"
                                                                            (DELETE
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (GRIND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (DELETE
                                                                             -3
                                                                             2)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "length_cdr")
                                                                              (("2"
                                                                                (GROUND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL)
                                                                         ("2"
                                                                          (DELETE
                                                                           -3
                                                                           2)
                                                                          (("2"
                                                                            (REWRITE
                                                                             "length_cdr")
                                                                            (("2"
                                                                              (GROUND)
                                                                              NIL
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              ";;; prove that the two lists are equal by showing that their lengths and elements are equal"))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  ";;; prove that the message has the right structure"))
                                                NIL))
                                              NIL))
                                            ";;; hu(0) sends a message (that is `escaped' in rho) to hu(1)"))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (DELETE 2 3)
                                      (("2" (PREFIX)
                                        (("2" (DELETE -2 -3 +)
                                          (("2"
                                            (COMMENT "-1 evaluates to false")
                                            (("2" (GRIND :IF-MATCH NIL)
                                              (("1"
                                                (COMMENT
                                                 "contradiction in terms -3 and -5")
                                                (("1" (DELETE -1 -2 -4 -6)
                                                  (("1" (DECOMPOSE-EQUALITY -2)
                                                    (("1" (TYPEPRED "hu")
                                                      (("1" (INST -1 "0" "i!3")
                                                        (("1" (GROUND) NIL
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  ";;; contradiction in terms -3 and -5"))
                                                NIL)
                                               ("2"
                                                (COMMENT
                                                 "consequent 1 was a negated antecedent")
                                                (("2" (INST 1 "0")
                                                  (("2" (EXPAND "nth")
                                                    (("2" (PROPAX) NIL NIL))
                                                    NIL))
                                                  ";;; consequent 1 was a negated antecedent"))
                                                NIL))
                                              ";;; -1 evaluates to false"))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL)
                         ("2" (DELETE -1 2)
                          (("2" (TYPEPRED "i!1")
                            (("2" (LEMMA "n_orig" ("P" "P!1" "u" "u!1"))
                              (("2" (GROUND) NIL NIL)) NIL))
                            NIL))
                          NIL)
                         ("3" (DELETE -2 2) (("3" (GROUND) NIL NIL)) NIL))
                        ";;; establish obvious equalities"))
                      NIL)
                     ("2" (TYPEPRED "i!2`2")
                      (("2" (DELETE -1 -3 -4 -5 2) (("2" (GROUND) NIL NIL))
                        NIL))
                      NIL)
                     ("3" (TYPEPRED "i!2`2")
                      (("3" (DELETE -1 -3 -4 -5 2)
                        (("3" (TYPEPRED "P!1")
                          (("3" (LEMMA "length_non_zero" ("l" "i!2`2"))
                            (("3" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (DELETE -1 2)
                      (("4" (TYPEPRED "i!1")
                        (("4" (LEMMA "n_orig" ("P" "P!1" "u" "u!1"))
                          (("4" (GROUND) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("5" (DELETE - 2) (("5" (GROUND) NIL NIL)) NIL)
                     ("6" (SKOLEM-TYPEPRED 1)
                      (("6" (DELETE -1 -2 -3 -5 -6 -7 2)
                        (("6" (TYPEPRED "P!1")
                          (("6" (LEMMA "length_non_zero" ("l" "il!1"))
                            (("6" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("7" (DELETE -1 2)
                      (("7" (SKOLEM!)
                        (("7" (TYPEPRED "i!1")
                          (("7" (LEMMA "n_orig" ("P" "P!1" "u" "u!1"))
                            (("7" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("8" (DELETE - 2)
                      (("8" (SKOLEM!) (("8" (GROUND) NIL NIL)) NIL)) NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "P!1")
                  (("2" (CHOICE3)
                    (("1" (PREFIX)
                      (("1" (DELETE 2 3) (("1" (GRIND) NIL NIL)) NIL)
                       ("2" (DELETE 2 3)
                        (("2" (PREFIX)
                          (("2" (DELETE 2 3)
                            (("2" (PREFIX)
                              (("1" (DELETE 2 3)
                                (("1" (EXPAND "rho_last" -1)
                                  (("1" (GRIND :EXCLUDE "rho_last")
                                    (("1"
                                      (COMMENT
                                       "-1 means that nonce n_init is not in the nlist")
                                      (("1" (DELETE -2)
                                        (("1" (EXPAND "rho_last" -1)
                                          (("1"
                                            (LEMMA "elt_append2"
                                             ("l1" "(: i!1 :)" "l2" "i!2`1" "t"
                                              "n_init"))
                                            (("1" (GRIND :EXCLUDE "elt") NIL
                                              NIL))
                                            NIL))
                                          NIL))
                                        ";;; -1 means that nonce n_init is not in the nlist"))
                                      NIL)
                                     ("2"
                                      (COMMENT
                                       "i!1 = n_init is provable from -6")
                                      (("2" (MDECOMPOSE-EQUALITY -6) NIL
                                        ";;; i!1 = n_init is provable from -6"))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL)
                               ("2" (DELETE 2 3)
                                (("2" (PREFIX)
                                  (("1" (DELETE 2 3)
                                    (("1"
                                      (COMMENT
                                       "1 and 2 are mutually exclusive")
                                      (("1" (GRIND) NIL
                                        ";;; 1 and 2 are mutually exclusive"))
                                      NIL))
                                    NIL)
                                   ("2" (DELETE 2 3) (("2" (STOP) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (DELETE - 2 3)
                      (("2" (TYPEPRED "i!2`2") (("2" (GROUND) NIL NIL)) NIL))
                      NIL)
                     ("3" (TYPEPRED "i!2`2")
                      (("3" (DELETE -1 2 3)
                        (("3" (LEMMA "length_non_zero" ("l" "i!2`2"))
                          (("3" (GROUND) NIL NIL)) NIL))
                        NIL))
                      NIL)
                     ("4" (SKOLEM-TYPEPRED 1)
                      (("4" (DELETE -1 -2 -3 2 3)
                        (("4" (LEMMA "length_non_zero" ("l" "il!1"))
                          (("4" (GROUND) NIL NIL)) NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|uniform2_interleave2| FORMULA-DECL NIL |uniform_props3| "../rules/")
    (|#| CONST-DECL "process[T]" |restriction_rules| "../rules/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rec?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|rho_last| DEF-DECL "bool" |gnsl_init| NIL)
    (|msg| SHARED-ADT-ACCESSOR-DECL "[event -> M]" |dynetwork| NIL)
    (|complement| CONST-DECL "set" |sets| NIL)
    (|restriction_free_par2| FORMULA-DECL NIL |restriction_rules3| "../rules/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|R_last| CONST-DECL "set[event]" |gnsl_init| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../rules/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|prefix_closed| CONST-DECL "bool" |processes| "../rules/")
    (|process| TYPE-EQ-DECL NIL |processes| "../rules/")
    (UROLE_INIT CONST-DECL "process[event]" |gnsl_init| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (INIT CONST-DECL "bool" |gnsl_init| NIL)
    (|\|-| CONST-DECL "bool" |gnsl_init| NIL)
    (|event| TYPE-DECL NIL |dynetwork| NIL)
    (|u!1| SKOLEM-CONST-DECL "Identity" |gnsl_init| NIL)
    (|i!1| SKOLEM-CONST-DECL "Nonces(P!1, u!1, 0)" |gnsl_init| NIL)
    (|x_nlist| ADT-ACCESSOR-DECL "[(nlist?) -> list[Nonce]]" |gnsl_init| NIL)
    (|y_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|x_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|elt_append2| FORMULA-DECL NIL |listprops| NIL)
    (|restriction_stop| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|n_orig| FORMULA-DECL NIL |gnsl_init| NIL)
    (|x_public| ADT-ACCESSOR-DECL "[(public?) -> Identity]" |gnsl_init| NIL)
    (|Message_public_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|odd_plus_even_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|Message_ilist_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|length_nth_equality| FORMULA-DECL NIL |listprops| NIL)
    (|length_cdr| FORMULA-DECL NIL |more_list_props| "../rules/")
    (P!1 SKOLEM-CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|i!2| SKOLEM-CONST-DECL "[{x: list[Nonce] | length(x) = P!1 - 1},
 {x: list[Identity] |
          (length(x) = P!1 - 1) AND
           (FORALL (i: below[P!1 - 1]): nth(x, i) = hu(1 + i))}]"
     |gnsl_init| NIL)
    (|i!4| SKOLEM-CONST-DECL "below[length[Identity](cdr(i!2`2))]" |gnsl_init|
     NIL)
    (|list_cons_extensionality| FORMULA-DECL NIL |list_adt| NIL)
    (|Message_conc_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|hu_list| CONST-DECL "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     |gnsl_init| NIL)
    (|elt| CONST-DECL "bool" |listprops| NIL)
    (|remove| DEF-DECL "list[T]" |listprops| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL)
    (|restriction_pref| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|uniform_stop2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|uniform_prefix2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Stop| CONST-DECL "process" |processes| "../rules/")
    (|commit| ADT-CONSTRUCTOR-DECL
     "[[Role, list[Identity], Nonce] -> (commit?)]" |gnsl_init| NIL)
    (|commit?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|signal| ADT-CONSTRUCTOR-DECL "[M -> (signal?)]" |dynetwork| NIL)
    (|signal?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|rec| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (rec?)]" |dynetwork| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|ilist| ADT-CONSTRUCTOR-DECL "[list[Identity] -> (ilist?)]" |gnsl_init|
     NIL)
    (|ilist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|nlist| ADT-CONSTRUCTOR-DECL "[list[Nonce] -> (nlist?)]" |gnsl_init| NIL)
    (|nlist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|conc| ADT-CONSTRUCTOR-DECL "[[Message, Message] -> (conc?)]" |gnsl_init|
     NIL)
    (|conc?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public| ADT-CONSTRUCTOR-DECL "[Identity -> (public?)]" |gnsl_init| NIL)
    (E CONST-DECL "Message" |gnsl_init| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|trans| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (trans?)]" |dynetwork| NIL)
    (|trans?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (>> CONST-DECL "process" |processes| "../rules/")
    (|restriction_choice3| FORMULA-DECL NIL |restriction_rules2| "../rules/")
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|uniform3_choice2| FORMULA-DECL NIL |uniform_props2| "../rules/")
    (|RankUser| CONST-DECL "setof[trace[event]]" |dynetwork| NIL))
   1639 1550 T NIL))
 (|restrictlast_middle| 0
  (|restrictlast_middle-1| NIL 3399299388 3399299592
   ("" (AUTO-REWRITE-THEORY "sets")
    (("" (SKOLEM!)
      (("" (EXPAND "RankUser")
        (("" (PROP)
          (("" (AUTO-REWRITE "USER_TCC2")
            (("" (INTERLEAVING2)
              (("" (TYPEPRED "P!1" "i!1`1")
                (("" (EXPAND "UROLE_MIDDLE")
                  (("" (CHOICE3)
                    (("1" (PREFIX)
                      (("1" (DELETE 2 3)
                        (("1" (PREFIX)
                          (("1" (DELETE - 2 3 4)
                            (("1" (EXPAND "rho_last") (("1" (PROPAX) NIL NIL))
                              NIL))
                            NIL)
                           ("2" (DELETE 2 3)
                            (("2" (PREFIX)
                              (("1" (DELETE 2 3)
                                (("1"
                                  (COMMENT
                                   "let us make explicit that i!1`2 /= n_init")
                                  (("1" (CASE "i!1`2 /= n_init")
                                    (("1" (EXPAND "rho_last" -2)
                                      (("1" (STOP-REWRITE "remove")
                                        (("1"
                                          (GRIND :EXCLUDE
                                           ("rho_last" "remove"))
                                          (("1" (DELETE -2 -3 -4 3)
                                            (("1"
                                              (COMMENT
                                               "due to -1 (and i!1`2 /= n_init), 2 will be satisfied")
                                              (("1"
                                                (LEMMA "elt_append3"
                                                 ("l1" "i!2`1" "l2"
                                                  "(: i!1`2 :)" "t" "n_init"))
                                                (("1"
                                                  (LEMMA "elt_singleton"
                                                   ("t1" "i!1`2" "t2"
                                                    "n_init"))
                                                  (("1" (GRIND :EXCLUDE "elt")
                                                    NIL NIL))
                                                  NIL))
                                                ";;; due to -1 (and i!1`2 /= n_init), 2 will be satisfied"))
                                              NIL))
                                            NIL)
                                           ("2"
                                            (COMMENT
                                             "this is the case of the run under consideration, so 2 must be proven by showing the parameters satisfy the EXISTS quantor in rho_last")
                                            (("2" (DECOMPOSE-EQUALITY -5)
                                              (("2" (DECOMPOSE-EQUALITY -6)
                                                (("2" (DECOMPOSE-EQUALITY -1)
                                                  (("2" (DECOMPOSE-EQUALITY -2)
                                                    (("2"
                                                      (TYPEPRED "i!2`1" "i!2`3"
                                                       "i!2`4" "p" "hu_list")
                                                      (("2"
                                                        (DELETE -1
                                                                -3
                                                                -5
                                                                -8
                                                                -14)
                                                        (("2"
                                                          (COMMENT
                                                           "derive value of i!3 from lists l!1 and i!2`1 and make explicit that P!1 = p")
                                                          (("2"
                                                            (CASE
                                                                "i!3=i!1`1 AND P!1=p")
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (REPLACE* -1)
                                                                (("1"
                                                                  (REPLACE* -2)
                                                                  (("1"
                                                                    (DELETE -1
                                                                            -2
                                                                            -6
                                                                            -13
                                                                            -14)
                                                                    (("1"
                                                                      (COMMENT
                                                                       "let PVS simplify matters by grinding")
                                                                      (("1"
                                                                        (GRIND
                                                                         :IF-MATCH
                                                                         NIL
                                                                         :EXCLUDE
                                                                         ("elt"
                                                                          "remove"))
                                                                        (("1"
                                                                          (COMMENT
                                                                           "since the current agent is hu(i!1`1) [-7], car(i!2`4) must be hu(i!1`1+1)")
                                                                          (("1"
                                                                            (INST
                                                                             2
                                                                             "i!1`1+1")
                                                                            (("1"
                                                                              (SPLIT)
                                                                              (("1"
                                                                                (DECOMPOSE-EQUALITY
                                                                                 1)
                                                                                (("1"
                                                                                  (DELETE
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -9
                                                                                   2
                                                                                   3)
                                                                                  (("1"
                                                                                    (COMMENT
                                                                                     "now retrieve element i!1`1 from both lists in -5")
                                                                                    (("1"
                                                                                      (LEMMA
                                                                                       "equality_nth[Identity]"
                                                                                       ("l1"
                                                                                        "append(i!2`3, i!2`4)"
                                                                                        "l2"
                                                                                        "remove(hu_list, i!1`1)"))
                                                                                      (("1"
                                                                                        (PROP)
                                                                                        (("1"
                                                                                          (INST
                                                                                           -1
                                                                                           "i!1`1")
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "nth_append"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (LEMMA
                                                                                               "nth_remove"
                                                                                               ("l"
                                                                                                "hu_list"
                                                                                                "i"
                                                                                                "i!1`1"
                                                                                                "j"
                                                                                                "i!1`1"))
                                                                                              (("1"
                                                                                                (REPLACE
                                                                                                 -1
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (DELETE
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (INST
                                                                                                     -5
                                                                                                     "i!1`1+1")
                                                                                                    (("1"
                                                                                                      (GROUND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (DELETE
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             2)
                                                                                            (("2"
                                                                                              (REWRITE
                                                                                               "length_append")
                                                                                              (("2"
                                                                                                (GROUND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      ";;; now retrieve element i!1`1 from both lists in -5"))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL)
                                                                               ("2"
                                                                                (COMMENT
                                                                                 "the choice for instantiation is obvious: append(l!1, (: i!1`2 :))")
                                                                                (("2"
                                                                                  (INST
                                                                                   1
                                                                                   "append(l!1, (: i!1`2 :))")
                                                                                  (("1"
                                                                                    (DECOMPOSE-EQUALITY
                                                                                     1)
                                                                                    (("1"
                                                                                      (DECOMPOSE-EQUALITY
                                                                                       1)
                                                                                      (("1"
                                                                                        (DELETE
                                                                                         -6
                                                                                         -7
                                                                                         -8
                                                                                         -9
                                                                                         2
                                                                                         3)
                                                                                        (("1"
                                                                                          (COMMENT
                                                                                           "prove equality of lists by proving equality of lengths and elements")
                                                                                          (("1"
                                                                                            (REWRITE
                                                                                             "length_nth_equality[Identity]")
                                                                                            (("1"
                                                                                              (DELETE
                                                                                               -4
                                                                                               -5
                                                                                               -6
                                                                                               -7
                                                                                               -8
                                                                                               2)
                                                                                              (("1"
                                                                                                (REWRITE
                                                                                                 "length_append"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (REWRITE
                                                                                                   "length_cdr"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (REWRITE
                                                                                                     "length_remove"
                                                                                                     1
                                                                                                     :DIR
                                                                                                     RL)
                                                                                                    (("1"
                                                                                                      (GROUND)
                                                                                                      NIL
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL)
                                                                                             ("2"
                                                                                              (SKOLEM-TYPEPRED)
                                                                                              (("2"
                                                                                                (COMMENT
                                                                                                 "use equality in -6 and use properties of nth distributed over remove and append")
                                                                                                (("2"
                                                                                                  (COMMENT
                                                                                                   "first, simplify -1")
                                                                                                  (("2"
                                                                                                    (CASE
                                                                                                        "i!4<p-1")
                                                                                                    (("1"
                                                                                                      (DELETE
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (LEMMA
                                                                                                         "equality_nth"
                                                                                                         ("l1"
                                                                                                          "append(i!2`3, i!2`4)"
                                                                                                          "l2"
                                                                                                          "remove(hu_list, i!1`1)"))
                                                                                                        (("1"
                                                                                                          (PROP)
                                                                                                          (("1"
                                                                                                            (LEMMA
                                                                                                             "nth_append"
                                                                                                             ("l1"
                                                                                                              "i!2`3"
                                                                                                              "l2"
                                                                                                              "cons(hu(i!1`1), cdr(i!2`4))"
                                                                                                              "i"
                                                                                                              "i!4"))
                                                                                                            (("1"
                                                                                                              (REPLACE
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (DELETE
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (LEMMA
                                                                                                                   "nth_remove"
                                                                                                                   ("l"
                                                                                                                    "hu_list"
                                                                                                                    "i"
                                                                                                                    "i!1`1+1"
                                                                                                                    "j"
                                                                                                                    "i!4"))
                                                                                                                  (("1"
                                                                                                                    (REPLACE
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (DELETE
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (COMMENT
                                                                                                                         "use the equality in -7 (or -1) to prove 1")
                                                                                                                        (("1"
                                                                                                                          (LEMMA
                                                                                                                           "nth_append"
                                                                                                                           ("l1"
                                                                                                                            "i!2`3"
                                                                                                                            "l2"
                                                                                                                            "i!2`4"))
                                                                                                                          (("1"
                                                                                                                            (LEMMA
                                                                                                                             "nth_remove"
                                                                                                                             ("l"
                                                                                                                              "hu_list"
                                                                                                                              "i"
                                                                                                                              "i!1`1"))
                                                                                                                            (("1"
                                                                                                                              (GRIND
                                                                                                                               :EXCLUDE
                                                                                                                               ("append"
                                                                                                                                "remove"))
                                                                                                                              NIL
                                                                                                                              NIL))
                                                                                                                            NIL))
                                                                                                                          ";;; use the equality in -7 (or -1) to prove 1"))
                                                                                                                        NIL))
                                                                                                                      NIL))
                                                                                                                    NIL)
                                                                                                                   ("2"
                                                                                                                    (DELETE
                                                                                                                     -1
                                                                                                                     -3
                                                                                                                     -4
                                                                                                                     -5
                                                                                                                     -7
                                                                                                                     -8
                                                                                                                     -9
                                                                                                                     -10
                                                                                                                     -11
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (GROUND)
                                                                                                                      NIL
                                                                                                                      NIL))
                                                                                                                    NIL))
                                                                                                                  NIL))
                                                                                                                NIL))
                                                                                                              NIL)
                                                                                                             ("2"
                                                                                                              (DELETE
                                                                                                               -1
                                                                                                               -2
                                                                                                               -4
                                                                                                               -5
                                                                                                               -6
                                                                                                               -7
                                                                                                               -8
                                                                                                               -9
                                                                                                               -10
                                                                                                               -11
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (REWRITE
                                                                                                                 "length_append"
                                                                                                                 -1)
                                                                                                                NIL
                                                                                                                NIL))
                                                                                                              NIL))
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (DELETE
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       -7
                                                                                                       -8
                                                                                                       -9
                                                                                                       2
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (REWRITE
                                                                                                         "length_append"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (REWRITE
                                                                                                           "length_cdr"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (GROUND)
                                                                                                            NIL
                                                                                                            NIL))
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    ";;; first, simplify -1"))
                                                                                                  ";;; use equality in -6 and use properties of nth distributed over remove and append"))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            ";;; prove equality of lists by proving equality of lengths and elements"))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (DELETE
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     -4
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -9
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     2
                                                                                     3)
                                                                                    (("2"
                                                                                      (REWRITE
                                                                                       "length_append")
                                                                                      (("2"
                                                                                        (GROUND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  ";;; the choice for instantiation is obvious: append(l!1, (: i!1`2 :))"))
                                                                                NIL))
                                                                              NIL))
                                                                            ";;; since the current agent is hu(i!1`1) [-7], car(i!2`4) must be hu(i!1`1+1)"))
                                                                          NIL))
                                                                        ";;; let PVS simplify matters by grinding"))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL)
                                                             ("2"
                                                              (REPLACE -8 -1)
                                                              (("2"
                                                                (EXPAND
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (REPLACE -10
                                                                           -1)
                                                                  (("2"
                                                                    (SIMPLIFY
                                                                     -1)
                                                                    (("2"
                                                                      (REPLACE*
                                                                       -1)
                                                                      (("2"
                                                                        (DELETE
                                                                         -1
                                                                         -4
                                                                         -6
                                                                         -8
                                                                         -9
                                                                         -10
                                                                         -11
                                                                         -12
                                                                         -13
                                                                         -14
                                                                         -15
                                                                         2
                                                                         3
                                                                         4)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "equality_length"
                                                                           ("l1"
                                                                            "append(i!2`3, i!2`4)"
                                                                            "l2"
                                                                            "remove(hu_list, i!1`1)"))
                                                                          (("2"
                                                                            (PROP)
                                                                            (("2"
                                                                              (REWRITE
                                                                               "length_append"
                                                                               -1)
                                                                              (("2"
                                                                                (LEMMA
                                                                                 "length_remove"
                                                                                 ("c"
                                                                                  "hu_list"
                                                                                  "i"
                                                                                  "i!1`1"))
                                                                                (("1"
                                                                                  (REPLACE
                                                                                   -1
                                                                                   -2
                                                                                   RL)
                                                                                  (("1"
                                                                                    (DELETE
                                                                                     -1
                                                                                     -6)
                                                                                    (("1"
                                                                                      (GROUND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL)
                                                                                 ("2"
                                                                                  (DELETE
                                                                                   -
                                                                                   2)
                                                                                  (("2"
                                                                                    (LEMMA
                                                                                     "cons_hu_list")
                                                                                    (("2"
                                                                                      (GROUND)
                                                                                      NIL
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            ";;; derive value of i!3 from lists l!1 and i!2`1 and make explicit that P!1 = p"))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              ";;; this is the case of the run under consideration, so 2 must be proven by showing the parameters satisfy the EXISTS quantor in rho_last"))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL)
                                     ("2" (DELETE -1 -2 -4 2 3)
                                      (("2" (TYPEPRED "i!1`2")
                                        (("2"
                                          (LEMMA "n_prop"
                                           ("P" "P!1" "u" "u!1" "r" "i!1`1"))
                                          (("2" (GRIND) NIL NIL)) NIL))
                                        NIL))
                                      NIL))
                                    ";;; let us make explicit that i!1`2 /= n_init"))
                                  NIL))
                                NIL)
                               ("2" (DELETE 2 3)
                                (("2" (PREFIX)
                                  (("2" (DELETE 2 3)
                                    (("2" (EXPAND "LastMessage")
                                      (("2" (LIFT-IF)
                                        (("2" (PROP)
                                          (("1" (PREFIX)
                                            (("1" (DELETE -3 2 3)
                                              (("1"
                                                (LEMMA "elt_append2"
                                                 ("l1" "(: i!1`2:)" "l2"
                                                  "i!2`2" "t" "n_init"))
                                                (("1"
                                                  (GRIND :IF-MATCH NIL :EXCLUDE
                                                   "elt")
                                                  (("1" (DECOMPOSE-EQUALITY -9)
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (DELETE - 2 3)
                                              (("2" (STOP) NIL NIL)) NIL))
                                            NIL)
                                           ("2" (PREFIX)
                                            (("1" (DELETE -2 2 3)
                                              (("1"
                                                (LEMMA "elt_append2"
                                                 ("l1" "(: i!1`2:)" "l2"
                                                  "i!2`2" "t" "n_init"))
                                                (("1"
                                                  (GRIND :IF-MATCH NIL :EXCLUDE
                                                   "elt")
                                                  (("1" (DECOMPOSE-EQUALITY -8)
                                                    NIL NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("2" (DELETE - 2 3)
                                              (("2" (STOP) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        NIL))
                                      NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("2" (DELETE 3)
                      (("2" (TYPEPRED "i!2`4")
                        (("2" (DELETE -1)
                          (("2" (LEMMA "length_non_zero" ("l" "i!2`4"))
                            (("2" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (DELETE 3)
                      (("3" (TYPEPRED "i!2`1")
                        (("3" (DELETE -1)
                          (("3" (LEMMA "length_non_zero" ("l" "i!2`1"))
                            (("3" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("4" (DELETE 3)
                      (("4" (TYPEPRED "i!2`3")
                        (("4" (REPLACE -2 1)
                          (("4" (DELETE -) (("4" (GROUND) NIL NIL)) NIL)) NIL))
                        NIL))
                      NIL)
                     ("5" (DELETE 3)
                      (("5" (SKOLEM-TYPEPRED)
                        (("5" (DELETE -1 -2 -3 -4 -5 -6 -7)
                          (("5" (LEMMA "length_non_zero" ("l" "il2!1"))
                            (("5" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("6" (DELETE 3)
                      (("6" (SKOLEM-TYPEPRED)
                        (("6" (DELETE -1 -3 -4 -5 -6 -7 -8)
                          (("6" (LEMMA "length_non_zero" ("l" "nl1!1"))
                            (("6" (GROUND) NIL NIL)) NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|RankUser| CONST-DECL "setof[trace[event]]" |dynetwork| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|uniform3_choice2| FORMULA-DECL NIL |uniform_props2| "../rules/")
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|restriction_choice3| FORMULA-DECL NIL |restriction_rules2| "../rules/")
    (>> CONST-DECL "process" |processes| "../rules/")
    (|rec| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (rec?)]" |dynetwork| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (E CONST-DECL "Message" |gnsl_init| NIL)
    (|public| ADT-CONSTRUCTOR-DECL "[Identity -> (public?)]" |gnsl_init| NIL)
    (|conc?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|conc| ADT-CONSTRUCTOR-DECL "[[Message, Message] -> (conc?)]" |gnsl_init|
     NIL)
    (|nlist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|nlist| ADT-CONSTRUCTOR-DECL "[list[Nonce] -> (nlist?)]" |gnsl_init| NIL)
    (|ilist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|ilist| ADT-CONSTRUCTOR-DECL "[list[Identity] -> (ilist?)]" |gnsl_init|
     NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|signal?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|signal| ADT-CONSTRUCTOR-DECL "[M -> (signal?)]" |dynetwork| NIL)
    (|running?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|running| ADT-CONSTRUCTOR-DECL
     "[[Role, list[Identity], Nonce] -> (running?)]" |gnsl_init| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|trans?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|trans| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (trans?)]" |dynetwork| NIL)
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|LastMessage| CONST-DECL "event" |gnsl_init| NIL)
    (|Stop| CONST-DECL "process" |processes| "../rules/")
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|elt_append2| FORMULA-DECL NIL |listprops| NIL)
    (|restriction_stop| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL)
    (|x_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|hu_list| CONST-DECL "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     |gnsl_init| NIL)
    (|y_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|x_ilist| ADT-ACCESSOR-DECL "[(ilist?) -> list[Identity]]" |gnsl_init|
     NIL)
    (|odd_minus_odd_is_even| APPLICATION-JUDGEMENT "even_int" |integers| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Message_conc_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|length_nth_equality| FORMULA-DECL NIL |listprops| NIL)
    (|length_remove| FORMULA-DECL NIL |listprops| NIL)
    (|length_cdr| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|i!4| SKOLEM-CONST-DECL
     "below[length[Identity](append(i!2`3, cons(hu(i!1`1), cdr(i!2`4))))]"
     |gnsl_init| NIL)
    (|Message_ilist_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|i!3| SKOLEM-CONST-DECL "{x: nat | 0 < x AND x < p}" |gnsl_init| NIL)
    (|l!1| SKOLEM-CONST-DECL "{x: list[Nonce] | length(x) = i!3 - 1}"
     |gnsl_init| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|Message_public_extensionality| FORMULA-DECL NIL |gnsl_init| NIL)
    (|length_append| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|nth_append| FORMULA-DECL NIL |listprops| NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (|nth_remove| FORMULA-DECL NIL |listprops| NIL)
    (P!1 SKOLEM-CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|u!1| SKOLEM-CONST-DECL "Identity" |gnsl_init| NIL)
    (|i!1| SKOLEM-CONST-DECL "[k: nat_1_to(P!1), Nonces(P!1, u!1, k)]"
     |gnsl_init| NIL)
    (|i!2| SKOLEM-CONST-DECL "[{x: list[Nonce] | length(x) = i!1`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!1`1},
 {x: list[Identity] | length(x) = i!1`1},
 {x: list[Identity] | length(x) = P!1 - 1 - i!1`1}]"
     |gnsl_init| NIL)
    (|equality_nth| FORMULA-DECL NIL |listprops| NIL)
    (|cons_hu_list| FORMULA-DECL NIL |gnsl_init| NIL)
    (|equality_length| FORMULA-DECL NIL |listprops| NIL)
    (|x_nlist| ADT-ACCESSOR-DECL "[(nlist?) -> list[Nonce]]" |gnsl_init| NIL)
    (|x_public| ADT-ACCESSOR-DECL "[(public?) -> Identity]" |gnsl_init| NIL)
    (|elt_append3| FORMULA-DECL NIL |listprops| NIL)
    (|remove| DEF-DECL "list[T]" |listprops| NIL)
    (|elt_singleton| FORMULA-DECL NIL |listprops| NIL)
    (|n_prop| FORMULA-DECL NIL |gnsl_init| NIL)
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|restriction_pref| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|uniform_stop2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|uniform_prefix2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (|event| TYPE-DECL NIL |dynetwork| NIL)
    (|\|-| CONST-DECL "bool" |gnsl_init| NIL)
    (INIT CONST-DECL "bool" |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (UROLE_MIDDLE CONST-DECL "process[event]" |gnsl_init| NIL)
    (|nat_from_3| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|process| TYPE-EQ-DECL NIL |processes| "../rules/")
    (|prefix_closed| CONST-DECL "bool" |processes| "../rules/")
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../rules/")
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|R_last| CONST-DECL "set[event]" |gnsl_init| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|restriction_free_par2| FORMULA-DECL NIL |restriction_rules3| "../rules/")
    (|member| CONST-DECL "bool" |sets| NIL)
    (|complement| CONST-DECL "set" |sets| NIL)
    (USER_TCC2 EXISTENCE-TCC NIL |gnsl_init| NIL)
    (|msg| SHARED-ADT-ACCESSOR-DECL "[event -> M]" |dynetwork| NIL)
    (|rho_last| DEF-DECL "bool" |gnsl_init| NIL)
    (|rec?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|#| CONST-DECL "process[T]" |restriction_rules| "../rules/")
    (|uniform2_interleave2| FORMULA-DECL NIL |uniform_props3| "../rules/")
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL))
   20137 3683 T NIL))
 (|restrictlast_last| 0
  (|restrictlast_last-1| NIL 3399223365 3399298165
   ("" (AUTO-REWRITE-THEORY "sets")
    (("" (SKOLEM!)
      (("" (EXPAND "RankUser")
        (("" (INTERLEAVING2)
          (("" (EXPAND "UROLE_LAST")
            (("" (TYPEPRED "P!1")
              (("" (CHOICE3)
                (("1" (PREFIX)
                  (("1" (DELETE 2 3)
                    (("1" (PREFIX)
                      (("1" (DELETE - 2 3)
                        (("1" (EXPAND "rho_last") (("1" (PROPAX) NIL NIL))
                          NIL))
                        NIL)
                       ("2" (DELETE 3)
                        (("2" (PREFIX)
                          (("1" (DELETE 2 3)
                            (("1" (EXPAND "R_last")
                              (("1"
                                (COMMENT
                                 "either the process is blocked on 2, or 1 is satisfied")
                                (("1"
                                  (CASE
                                      "append(i!2`2, (: u!1 :)) = hu_list AND car(i!2`1) = n_init AND P!1 = p")
                                  (("1" (DELETE -2 -3 1)
                                    (("1" (GROUND) NIL NIL)) NIL)
                                   ("2" (DELETE 3)
                                    (("2"
                                      (COMMENT
                                       "first and foremost, let us prove that i!1 /= n_init")
                                      (("2" (CASE "i!1 /= n_init")
                                        (("1" (EXPAND "rho_last" -2)
                                          (("1" (GRIND :EXCLUDE "rho_last")
                                            (("1"
                                              (COMMENT
                                               "due to -1 (and i!1 /= n_init), 3 will be satisfied")
                                              (("1" (DELETE 2)
                                                (("1"
                                                  (LEMMA "elt_append3"
                                                   ("l1" "i!2`1" "l2"
                                                    "(: i!1 :)" "t" "n_init"))
                                                  (("1"
                                                    (LEMMA "elt_singleton"
                                                     ("t1" "i!1" "t2"
                                                      "n_init"))
                                                    (("1"
                                                      (GRIND :EXCLUDE "elt")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                ";;; due to -1 (and i!1 /= n_init), 3 will be satisfied"))
                                              NIL)
                                             ("2"
                                              (TYPEPRED "i!2`1" "i!2`2"
                                               "hu_list" "p")
                                              (("2" (DELETE -1 -3 -5 -9 1 3)
                                                (("2" (DECOMPOSE-EQUALITY -10)
                                                  (("2" (DECOMPOSE-EQUALITY -1)
                                                    (("2"
                                                      (DECOMPOSE-EQUALITY -2)
                                                      (("2" (REPLACE -2 -3)
                                                        (("2"
                                                          (EXPAND "length" -3)
                                                          (("2" (REPLACE -8 -3)
                                                            (("2" (SIMPLIFY -3)
                                                              (("2"
                                                                (REPLACE* -3)
                                                                (("2"
                                                                  (DELETE -2
                                                                          -3
                                                                          -6
                                                                          -8
                                                                          -9
                                                                          -11)
                                                                  (("2"
                                                                    (REPLACE -1
                                                                             -2)
                                                                    (("2"
                                                                      (DELETE
                                                                       -1)
                                                                      (("2"
                                                                        (EXPAND
                                                                         "length"
                                                                         -1)
                                                                        (("2"
                                                                          (LEMMA
                                                                           "length_remove"
                                                                           ("c"
                                                                            "cdr(hu_list)"
                                                                            "i"
                                                                            "P!1-2"))
                                                                          (("1"
                                                                            (REPLACE
                                                                             -1
                                                                             -2
                                                                             RL)
                                                                            (("1"
                                                                              (DELETE
                                                                               -1)
                                                                              (("1"
                                                                                (REWRITE
                                                                                 "length_cdr"
                                                                                 -1)
                                                                                (("1"
                                                                                  (DELETE
                                                                                   -3
                                                                                   -4
                                                                                   -5)
                                                                                  (("1"
                                                                                    (GROUND)
                                                                                    NIL
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL)
                                                                           ("2"
                                                                            (DELETE
                                                                             -1
                                                                             -4
                                                                             -5
                                                                             2)
                                                                            (("2"
                                                                              (LEMMA
                                                                               "length_non_zero"
                                                                               ("l"
                                                                                "hu_list"))
                                                                              (("2"
                                                                                (GROUND)
                                                                                NIL
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          NIL))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL)
                                             ("3" (COMMENT "see first sibling")
                                              (("3" (DELETE 2)
                                                (("3"
                                                  (LEMMA "elt_append3"
                                                   ("l1" "i!2`1" "l2"
                                                    "(: i!1 :)" "t" "n_init"))
                                                  (("3"
                                                    (LEMMA "elt_singleton"
                                                     ("t1" "i!1" "t2"
                                                      "n_init"))
                                                    (("3"
                                                      (GRIND :EXCLUDE "elt")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                ";;; see first sibling"))
                                              NIL)
                                             ("4"
                                              (COMMENT
                                               "sequent 2 (which is a flattened false antecedent) follows from -6")
                                              (("4"
                                                (DELETE -1 -2 -3 -4 -5 -7 1 3)
                                                (("4" (MDECOMPOSE-EQUALITY -1)
                                                  NIL NIL))
                                                ";;; sequent 2 (which is a flattened false antecedent) follows from -6"))
                                              NIL)
                                             ("5" (COMMENT "see first sibling")
                                              (("5" (DELETE 2)
                                                (("5"
                                                  (LEMMA "elt_append3"
                                                   ("l1" "i!2`1" "l2"
                                                    "(: i!1 :)" "t" "n_init"))
                                                  (("5"
                                                    (LEMMA "elt_singleton"
                                                     ("t1" "i!1" "t2"
                                                      "n_init"))
                                                    (("5"
                                                      (GRIND :EXCLUDE "elt")
                                                      NIL NIL))
                                                    NIL))
                                                  NIL))
                                                ";;; see first sibling"))
                                              NIL)
                                             ("6"
                                              (TYPEPRED "i!2`1" "i!2`2"
                                               "hu_list" "p")
                                              (("6" (DELETE -1 -3 -5 -9 1 3)
                                                (("6" (DECOMPOSE-EQUALITY -10)
                                                  (("6" (DECOMPOSE-EQUALITY -1)
                                                    (("6"
                                                      (DECOMPOSE-EQUALITY -2)
                                                      (("6"
                                                        (COMMENT
                                                         "first, establish some useful equalities")
                                                        (("6"
                                                          (CASE
                                                              "P!1=p AND i!3=P!1-1")
                                                          (("1"
                                                            (COMMENT
                                                             "to prove: i!2`2 is hu_list without its last element and u!1 should be hu(P-1)")
                                                            (("1" (FLATTEN)
                                                              (("1"
                                                                (REPLACE* -1
                                                                 -2)
                                                                (("1"
                                                                  (DECOMPOSE-EQUALITY
                                                                   -13)
                                                                  (("1"
                                                                    (REPLACE -1
                                                                             1)
                                                                    (("1"
                                                                      (DELETE
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       -5
                                                                       -6
                                                                       -10
                                                                       -11
                                                                       -12
                                                                       -13)
                                                                      (("1"
                                                                        (LEMMA
                                                                         "cons_remove"
                                                                         ("c"
                                                                          "hu_list"
                                                                          "i"
                                                                          "p-1-1"))
                                                                        (("1"
                                                                          (REPLACE
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (SIMPLIFY
                                                                             -2)
                                                                            (("1"
                                                                              (REPLACE*
                                                                               -2)
                                                                              (("1"
                                                                                (DELETE
                                                                                 -1
                                                                                 -2)
                                                                                (("1"
                                                                                  (COMMENT
                                                                                   "intuitively, this clearly holds")
                                                                                  (("1"
                                                                                    (COMMENT
                                                                                     "it is proven by equality of the lengths of the lists and equality of their elements")
                                                                                    (("1"
                                                                                      (CASE
                                                                                          "length(append(remove(hu_list, p - 1), (: hu(p - 1) :))) = p")
                                                                                      (("1"
                                                                                        (LEMMA
                                                                                         "length_nth_equality[Identity]"
                                                                                         ("l1"
                                                                                          "append(remove(hu_list, p-1), (:hu(p-1):))"
                                                                                          "l2"
                                                                                          "hu_list"))
                                                                                        (("1"
                                                                                          (PROP)
                                                                                          (("1"
                                                                                            (REPLACE
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (DELETE
                                                                                               -1
                                                                                               -2
                                                                                               -4
                                                                                               -5
                                                                                               2)
                                                                                              (("1"
                                                                                                (GROUND)
                                                                                                NIL
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL)
                                                                                           ("2"
                                                                                            (SKOLEM-TYPEPRED)
                                                                                            (("2"
                                                                                              (REPLACE
                                                                                               -2
                                                                                               -1)
                                                                                              (("2"
                                                                                                (DELETE
                                                                                                 -2
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (STOP-REWRITE
                                                                                                   "remove")
                                                                                                  (("2"
                                                                                                    (LEMMA
                                                                                                     "nth_append"
                                                                                                     ("l1"
                                                                                                      "remove(hu_list, p-1)"
                                                                                                      "l2"
                                                                                                      "(:hu(p-1):)"
                                                                                                      "i"
                                                                                                      "i!4"))
                                                                                                    (("1"
                                                                                                      (LEMMA
                                                                                                       "nth_remove"
                                                                                                       ("l"
                                                                                                        "hu_list"
                                                                                                        "i"
                                                                                                        "p-1"))
                                                                                                      (("1"
                                                                                                        (LAZY-GRIND)
                                                                                                        NIL
                                                                                                        NIL))
                                                                                                      NIL)
                                                                                                     ("2"
                                                                                                      (REPLACE
                                                                                                       -2
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (DELETE
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (GROUND)
                                                                                                          NIL
                                                                                                          NIL))
                                                                                                        NIL))
                                                                                                      NIL))
                                                                                                    NIL))
                                                                                                  NIL))
                                                                                                NIL))
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL)
                                                                                       ("2"
                                                                                        (DELETE
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         2)
                                                                                        (("2"
                                                                                          (STOP-REWRITE
                                                                                           "remove")
                                                                                          (("2"
                                                                                            (REWRITE
                                                                                             "length_append")
                                                                                            (("2"
                                                                                              (GROUND)
                                                                                              NIL
                                                                                              NIL))
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      ";;; it is proven by equality of the lengths of the lists and equality of their elements"))
                                                                                    ";;; intuitively, this clearly holds"))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              ";;; to prove: i!2`2 is hu_list without its last element and u!1 should be hu(P-1)"))
                                                            NIL)
                                                           ("2" (DELETE 2)
                                                            (("2"
                                                              (REPLACE -2 -3)
                                                              (("2"
                                                                (EXPAND
                                                                 "length"
                                                                 -3)
                                                                (("2"
                                                                  (REPLACE -8
                                                                           -3)
                                                                  (("2"
                                                                    (SIMPLIFY
                                                                     -3)
                                                                    (("2"
                                                                      (PROP)
                                                                      (("2"
                                                                        (REPLACE*
                                                                         -3)
                                                                        (("2"
                                                                          (DELETE
                                                                           -2
                                                                           -3
                                                                           -6
                                                                           -8
                                                                           -9
                                                                           -11)
                                                                          (("2"
                                                                            (REPLACE
                                                                             -1
                                                                             -2)
                                                                            (("2"
                                                                              (DELETE
                                                                               -1)
                                                                              (("2"
                                                                                (EXPAND
                                                                                 "length"
                                                                                 -1)
                                                                                (("2"
                                                                                  (LEMMA
                                                                                   "length_remove"
                                                                                   ("c"
                                                                                    "cdr(hu_list)"
                                                                                    "i"
                                                                                    "P!1-2"))
                                                                                  (("1"
                                                                                    (REPLACE
                                                                                     -1
                                                                                     -2
                                                                                     RL)
                                                                                    (("1"
                                                                                      (DELETE
                                                                                       -1)
                                                                                      (("1"
                                                                                        (REWRITE
                                                                                         "length_cdr"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (DELETE
                                                                                           -3
                                                                                           -4
                                                                                           -5)
                                                                                          (("1"
                                                                                            (GROUND)
                                                                                            NIL
                                                                                            NIL))
                                                                                          NIL))
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL)
                                                                                   ("2"
                                                                                    (DELETE
                                                                                     -1
                                                                                     -4
                                                                                     -5
                                                                                     2)
                                                                                    (("2"
                                                                                      (LEMMA
                                                                                       "length_non_zero"
                                                                                       ("l"
                                                                                        "hu_list"))
                                                                                      (("2"
                                                                                        (GROUND)
                                                                                        NIL
                                                                                        NIL))
                                                                                      NIL))
                                                                                    NIL))
                                                                                  NIL))
                                                                                NIL))
                                                                              NIL))
                                                                            NIL))
                                                                          NIL))
                                                                        NIL))
                                                                      NIL))
                                                                    NIL))
                                                                  NIL))
                                                                NIL))
                                                              NIL))
                                                            NIL))
                                                          ";;; first, establish some useful equalities"))
                                                        NIL))
                                                      NIL))
                                                    NIL))
                                                  NIL))
                                                NIL))
                                              NIL))
                                            NIL))
                                          NIL)
                                         ("2" (DELETE - 2 3)
                                          (("2" (TYPEPRED "i!1")
                                            (("2"
                                              (LEMMA "n_prop"
                                               ("P" "P!1" "u" "u!1" "r"
                                                "P!1-1"))
                                              (("2" (GRIND) NIL NIL)) NIL))
                                            NIL))
                                          NIL))
                                        ";;; first and foremost, let us prove that i!1 /= n_init"))
                                      NIL))
                                    NIL))
                                  ";;; either the process is blocked on 2, or 1 is satisfied"))
                                NIL))
                              NIL))
                            NIL)
                           ("2" (DELETE 2 3)
                            (("2" (PREFIX)
                              (("2" (DELETE 2 3) (("2" (STOP) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL)
                 ("2" (TYPEPRED "i!2`2")
                  (("2" (DELETE -1 2)
                    (("2" (LEMMA "length_non_zero" ("l" "i!2`2"))
                      (("2" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("3" (TYPEPRED "i!2`1")
                  (("3" (DELETE -1 2)
                    (("3" (LEMMA "length_non_zero" ("l" "i!2`1"))
                      (("3" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("4" (TYPEPRED "i!2`2")
                  (("4" (DELETE -1 2) (("4" (GROUND) NIL NIL)) NIL)) NIL)
                 ("5" (SKOLEM-TYPEPRED)
                  (("5" (DELETE -1 -2 -3 2)
                    (("5" (LEMMA "length_non_zero" ("l" "il!1"))
                      (("5" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL)
                 ("6" (SKOLEM-TYPEPRED)
                  (("6" (DELETE -1 -3 -4 2)
                    (("6" (LEMMA "length_non_zero" ("l" "nl!1"))
                      (("6" (GROUND) NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            NIL))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|member| CONST-DECL "bool" |sets| NIL)
    (|uniform2_interleave2| FORMULA-DECL NIL |uniform_props3| "../rules/")
    (|#| CONST-DECL "process[T]" |restriction_rules| "../rules/")
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|rec?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|rho_last| DEF-DECL "bool" |gnsl_init| NIL)
    (|msg| SHARED-ADT-ACCESSOR-DECL "[event -> M]" |dynetwork| NIL)
    (|complement| CONST-DECL "set" |sets| NIL)
    (|restriction_free_par2| FORMULA-DECL NIL |restriction_rules3| "../rules/")
    (|set| TYPE-EQ-DECL NIL |sets| NIL)
    (|R_last| CONST-DECL "set[event]" |gnsl_init| NIL)
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../rules/")
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|prefix_closed| CONST-DECL "bool" |processes| "../rules/")
    (|process| TYPE-EQ-DECL NIL |processes| "../rules/")
    (UROLE_LAST CONST-DECL "process[event]" |gnsl_init| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (INIT CONST-DECL "bool" |gnsl_init| NIL)
    (|\|-| CONST-DECL "bool" |gnsl_init| NIL)
    (|event| TYPE-DECL NIL |dynetwork| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|uniform_prefix2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|uniform_stop2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|restriction_pref| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (|hu_list| CONST-DECL "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     |gnsl_init| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL)
    (|n_prop| FORMULA-DECL NIL |gnsl_init| NIL)
    (|x_public| ADT-ACCESSOR-DECL "[(public?) -> Identity]" |gnsl_init| NIL)
    (|nth_remove| FORMULA-DECL NIL |listprops| NIL)
    (|minus_odd_is_odd| APPLICATION-JUDGEMENT "odd_int" |integers| NIL)
    (|posint_plus_nnint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nnint_plus_nnint_is_nnint| APPLICATION-JUDGEMENT "nonneg_int" |integers|
     NIL)
    (+ CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|nth_append| FORMULA-DECL NIL |listprops| NIL)
    (|length_nth_equality| FORMULA-DECL NIL |listprops| NIL)
    (|length_append| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|cons_remove| FORMULA-DECL NIL |listprops| NIL)
    (|x_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|y_conc| ADT-ACCESSOR-DECL "[(conc?) -> Message]" |gnsl_init| NIL)
    (|x_ilist| ADT-ACCESSOR-DECL "[(ilist?) -> list[Identity]]" |gnsl_init|
     NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|length_remove| FORMULA-DECL NIL |listprops| NIL)
    (|length_cdr| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|length_non_zero| FORMULA-DECL NIL |more_list_props| "../rules/")
    (|real_gt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|x_nlist| ADT-ACCESSOR-DECL "[(nlist?) -> list[Nonce]]" |gnsl_init| NIL)
    (|elt_append3| FORMULA-DECL NIL |listprops| NIL)
    (|elt_singleton| FORMULA-DECL NIL |listprops| NIL)
    (|remove| DEF-DECL "list[T]" |listprops| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|restriction_stop| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|length| DEF-DECL "nat" |list_props| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|Stop| CONST-DECL "process" |processes| "../rules/")
    (|cdr| ADT-ACCESSOR-DECL "[(cons?) -> list]" |list_adt| NIL)
    (|trans| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (trans?)]" |dynetwork| NIL)
    (|trans?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|car| ADT-ACCESSOR-DECL "[(cons?) -> T]" |list_adt| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|append| DEF-DECL "list[T]" |list_props| NIL)
    (|running| ADT-CONSTRUCTOR-DECL
     "[[Role, list[Identity], Nonce] -> (running?)]" |gnsl_init| NIL)
    (|running?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|signal| ADT-CONSTRUCTOR-DECL "[M -> (signal?)]" |dynetwork| NIL)
    (|signal?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|ilist| ADT-CONSTRUCTOR-DECL "[list[Identity] -> (ilist?)]" |gnsl_init|
     NIL)
    (|ilist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|nlist| ADT-CONSTRUCTOR-DECL "[list[Nonce] -> (nlist?)]" |gnsl_init| NIL)
    (|nlist?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|conc| ADT-CONSTRUCTOR-DECL "[[Message, Message] -> (conc?)]" |gnsl_init|
     NIL)
    (|conc?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public| ADT-CONSTRUCTOR-DECL "[Identity -> (public?)]" |gnsl_init| NIL)
    (E CONST-DECL "Message" |gnsl_init| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (|rec| ADT-CONSTRUCTOR-DECL "[[I, I, M] -> (rec?)]" |dynetwork| NIL)
    (>> CONST-DECL "process" |processes| "../rules/")
    (|restriction_choice3| FORMULA-DECL NIL |restriction_rules2| "../rules/")
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|real_le_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|uniform3_choice2| FORMULA-DECL NIL |uniform_props2| "../rules/")
    (|RankUser| CONST-DECL "setof[trace[event]]" |dynetwork| NIL))
   2398 2269 T NIL))
 (|authentication_last| 0
  (|authentication_last-1| NIL 3399299109 3399299152
   ("" (AUTO-REWRITE-THEORY "sets")
    (("" (REWRITE "authentication_by_rank" + ("rho" "rho_last"))
      (("1" (DELETE 2)
        (("1" (COMMENT "intruder's initial knowledge is in rho")
          (("1" (SKOLEM!)
            (("1" (PROP)
              (("1" (EXPAND "INIT")
                (("1" (EXPAND "rho_last") (("1" (SMASH) NIL NIL)) NIL)) NIL))
              NIL))
            ";;; intruder's initial knowledge is in rho"))
          NIL))
        NIL)
       ("2" (DELETE 2)
        (("2"
          (COMMENT
           "from of a set of messages in rho, no message not in rho can be generated")
          (("2" (EXPAND "|-")
            (("2" (RULE-INDUCT "Gen")
              (("2" (SKOLEM!)
                (("2" (SMASH)
                  (("1" (INST -2 "m!2") (("1" (PROP) NIL NIL)) NIL)
                   ("2" (DELETE -2)
                    (("2" (SKOLEM!)
                      (("2" (PROP)
                        (("2" (REPLACE -3 1)
                          (("2" (EXPAND "rho_last" 1) (("2" (PROP) NIL NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("3" (DELETE -2)
                    (("3" (SKOLEM!)
                      (("3" (EXPAND "rho_last" -1) (("3" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("4" (DELETE -2)
                    (("4" (SKOLEM!)
                      (("4" (EXPAND "rho_last" -1) (("4" (PROPAX) NIL NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("5" (DELETE -2)
                    (("5" (SKOLEM!)
                      (("5" (FLATTEN)
                        (("5" (EXPAND "rho_last" -1)
                          (("5" (REPLACE -2 1)
                            (("5" (EXPAND "rho_last")
                              (("5" (DELETE -2) (("5" (GRIND) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("6" (DELETE -2)
                    (("6" (SKOLEM!)
                      (("6" (PROP)
                        (("6" (REPLACE -2 1)
                          (("6" (DELETE -2)
                            (("6" (EXPAND "rho_last")
                              (("6" (EXPAND "elt")
                                (("6" (INST 1 "0")
                                  (("1" (GRIND :EXCLUDE 2) NIL NIL)
                                   ("2" (DELETE 2) (("2" (GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("7" (DELETE -2)
                    (("7" (SKOLEM!)
                      (("7" (PROP)
                        (("7" (REPLACE -3 1)
                          (("7" (DELETE -3)
                            (("7" (EXPAND "rho_last")
                              (("7"
                                (LEMMA "elt_append3"
                                 ("l1" "nl1!1" "l2" "nl2!1" "t" "n_init"))
                                (("7" (PROP) NIL NIL)) NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("8" (DELETE -2)
                    (("8" (SKOLEM!)
                      (("8" (PROP)
                        (("8" (REPLACE -3 1)
                          (("8" (DELETE -3)
                            (("8" (REPLACE -2 -1)
                              (("8" (DELETE -2)
                                (("8" (EXPAND "rho_last")
                                  (("8"
                                    (LEMMA "elt_append1"
                                     ("l1" "nl1!1" "l2" "nl2!1" "t" "n_init"))
                                    (("8" (PROP) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("9" (DELETE -2)
                    (("9" (SKOLEM!)
                      (("9" (PROP)
                        (("9" (REPLACE -3 1)
                          (("9" (DELETE -3)
                            (("9" (REPLACE -2 -1)
                              (("9" (DELETE -2)
                                (("9" (EXPAND "rho_last")
                                  (("9"
                                    (LEMMA "elt_append2"
                                     ("l1" "nl1!1" "l2" "nl2!1" "t" "n_init"))
                                    (("9" (PROP) NIL NIL)) NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("10" (DELETE -2)
                    (("10" (SKOLEM!)
                      (("10" (PROP)
                        (("10" (REPLACE -2 1)
                          (("10" (DELETE -1 -2)
                            (("10" (EXPAND "rho_last")
                              (("10" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("11" (DELETE -2)
                    (("11" (SKOLEM!)
                      (("11" (PROP)
                        (("11" (REPLACE -2 1)
                          (("11" (DELETE -1 -2)
                            (("11" (EXPAND "rho_last")
                              (("11" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("12" (DELETE -2)
                    (("12" (SKOLEM!)
                      (("12" (PROP)
                        (("12" (REPLACE -3 1)
                          (("12" (DELETE -1 -2 -3)
                            (("12" (EXPAND "rho_last")
                              (("12" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("13" (DELETE -2)
                    (("13" (SKOLEM!)
                      (("13" (PROP)
                        (("13" (REPLACE -3 1)
                          (("13" (DELETE -1 -2 -3)
                            (("13" (EXPAND "rho_last")
                              (("13" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("14" (DELETE -2)
                    (("14" (SKOLEM!)
                      (("14" (PROP)
                        (("14" (REPLACE -3 1)
                          (("14" (DELETE -1 -2 -3)
                            (("14" (EXPAND "rho_last")
                              (("14" (PROPAX) NIL NIL)) NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL)
                   ("15" (DELETE -2)
                    (("15" (SKOLEM!)
                      (("15" (PROP)
                        (("15" (REPLACE -3 1)
                          (("15" (DELETE -3)
                            (("15" (TYPEPRED "k!1")
                              (("15" (SPLIT)
                                (("1" (GRIND) NIL NIL)
                                 ("2" (EXPAND "rho_last" -3)
                                  (("2" (ASSERT) (("2" (LAZY-GRIND) NIL NIL))
                                    NIL))
                                  NIL))
                                NIL))
                              NIL))
                            NIL))
                          NIL))
                        NIL))
                      NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            ";;; from of a set of messages in rho, no message not in rho can be generated"))
          NIL))
        NIL)
       ("3" (DELETE 2)
        (("3" (COMMENT "users maintain the rank function")
          (("3" (SKOLEM!)
            (("3" (EXPAND "USER")
              (("3" (EXPAND "RankUser")
                (("3" (INTERLEAVING2)
                  (("1" (INTERLEAVING)
                    (("1" (INTERLEAVING)
                      (("1" (LEMMA "restrictlast_init" ("P" "i!2" "u" "i!1"))
                        (("1" (GRIND :EXCLUDE ("rho_last" "UROLE_INIT")) NIL
                          NIL))
                        NIL)
                       ("2" (LEMMA "restrictlast_last" ("P" "i!2" "u" "i!1"))
                        (("2" (GRIND :EXCLUDE ("rho_last" "UROLE_LAST")) NIL
                          NIL))
                        NIL))
                      NIL)
                     ("2" (LIFT-IF)
                      (("2" (PROP)
                        (("1" (STOP) NIL NIL)
                         ("2"
                          (LEMMA "restrictlast_middle" ("P" "i!2" "u" "i!1"))
                          (("2" (GRIND :EXCLUDE ("rho_last" "UROLE_MIDDLE"))
                            NIL NIL))
                          NIL))
                        NIL))
                      NIL)
                     ("3" (DELETE 3)
                      (("3" (USE "USER_TCC2") (("3" (PROP) NIL NIL)) NIL)) NIL)
                     ("4" (DELETE 2) (("4" (USE "USER_TCC2") NIL NIL)) NIL))
                    NIL)
                   ("2" (DELETE 2) (("2" (USE "USER_TCC2") NIL NIL)) NIL)
                   ("3" (DELETE 2)
                    (("3" (SKOLEM!) (("3" (USE "USER_TCC2") NIL NIL)) NIL))
                    NIL))
                  NIL))
                NIL))
              NIL))
            ";;; users maintain the rank function"))
          NIL))
        NIL)
       ("4" (DELETE 2)
        (("4" (COMMENT "T is not in rho")
          (("4" (SKOLEM-TYPEPRED)
            (("4" (EXPAND "T")
              (("4" (REPLACE -1 -2)
                (("4" (DELETE -1) (("4" (GRIND) NIL NIL)) NIL)) NIL))
              NIL))
            ";;; T is not in rho"))
          NIL))
        NIL))
      NIL))
    NIL)
   PROVED
   ((|RankUser| CONST-DECL "setof[trace[event]]" |dynetwork| NIL)
    (|uniform_interleave2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|restriction_free_par| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])"
     |real_props| NIL)
    (|restrictlast_last| FORMULA-DECL NIL |gnsl_init| NIL)
    (|restrictlast_init| FORMULA-DECL NIL |gnsl_init| NIL)
    (|Par| CONST-DECL "process" |processes| "../rules/")
    (|\|>| CONST-DECL "bool" |satisfaction| "../rules/")
    (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL)
    (|uniform_stop2| FORMULA-DECL NIL |uniform_props| "../rules/")
    (|restriction_stop| FORMULA-DECL NIL |restriction_rules| "../rules/")
    (|restrictlast_middle| FORMULA-DECL NIL |gnsl_init| NIL)
    (USER_TCC2 EXISTENCE-TCC NIL |gnsl_init| NIL)
    (TRUE CONST-DECL "bool" |booleans| NIL)
    (UROLE_MIDDLE CONST-DECL "process[event]" |gnsl_init| NIL)
    (|nat_from_3| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|nat_1_to| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Stop| CONST-DECL "process" |processes| "../rules/")
    (IF CONST-DECL "[boolean, T, T -> T]" |if_def| NIL)
    (UROLE_LAST CONST-DECL "process[event]" |gnsl_init| NIL)
    (UROLE_INIT CONST-DECL "process[event]" |gnsl_init| NIL)
    (|Interleave| CONST-DECL "process[T]" |multipar| "../rules/")
    (// CONST-DECL "process" |processes| "../rules/")
    (|restriction_free_par2| FORMULA-DECL NIL |restriction_rules3| "../rules/")
    (|complement| CONST-DECL "set" |sets| NIL)
    (|msg| SHARED-ADT-ACCESSOR-DECL "[event -> M]" |dynetwork| NIL)
    (|rec?| ADT-RECOGNIZER-DECL "[event -> boolean]" |dynetwork| NIL)
    (|pred| TYPE-EQ-DECL NIL |defined_types| NIL)
    (|#| CONST-DECL "process[T]" |restriction_rules| "../rules/")
    (|uniform2_interleave2| FORMULA-DECL NIL |uniform_props3| "../rules/")
    (E CONST-DECL "Message" |gnsl_init| NIL)
    (|remove| DEF-DECL "list[T]" |listprops| NIL)
    (= CONST-DECL "[T, T -> boolean]" |equalities| NIL)
    (|numfield| NONEMPTY-TYPE-EQ-DECL NIL |number_fields| NIL)
    (- CONST-DECL "[numfield, numfield -> numfield]" |number_fields| NIL)
    (|int_minus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|int_plus_int_is_int| APPLICATION-JUDGEMENT "int" |integers| NIL)
    (|Key| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|secret?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (|public?| ADT-RECOGNIZER-DECL "[Message -> boolean]" |gnsl_init| NIL)
    (OR CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|elt_append2| FORMULA-DECL NIL |listprops| NIL)
    (|elt_append1| FORMULA-DECL NIL |listprops| NIL)
    (|elt_append3| FORMULA-DECL NIL |listprops| NIL)
    (<= CONST-DECL "bool" |reals| NIL)
    (|nat_from_2| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|Role| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|IRpart| CONST-DECL "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     |gnsl_init| NIL)
    (|p| CONST-DECL "nat_from_2" |gnsl_init| NIL)
    (|nat_to_p| TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|hu| CONST-DECL "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     |gnsl_init| NIL)
    (|Nonces| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|n_init| CONST-DECL "Nonces(p, hu(0), 0)" |gnsl_init| NIL)
    (|n!1| SKOLEM-CONST-DECL "Nonce" |gnsl_init| NIL)
    (|elt| CONST-DECL "bool" |listprops| NIL)
    (/= CONST-DECL "boolean" |notequal| NIL)
    (|real_lt_is_strict_total_order| NAME-JUDGEMENT
     "(strict_total_order?[real])" |real_props| NIL)
    (|nnint_plus_posint_is_posint| APPLICATION-JUDGEMENT "posint" |integers|
     NIL)
    (|nth| DEF-DECL "T" |list_props| NIL)
    (|below| TYPE-EQ-DECL NIL |nat_types| NIL)
    (|cons| ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" |list_adt| NIL)
    (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (|length| DEF-DECL "nat" |list_props| NIL)
    (|Nonce| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (|every| ADT-DEF-DECL "boolean" |list_adt| NIL)
    (PRED TYPE-EQ-DECL NIL |defined_types| NIL)
    (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL)
    (< CONST-DECL "bool" |reals| NIL)
    (NOT CONST-DECL "[bool -> bool]" |booleans| NIL)
    (|Gen_weak_induction| FORMULA-DECL NIL |gnsl_init| NIL)
    (|\|-| CONST-DECL "bool" |gnsl_init| NIL)
    (|setof| TYPE-EQ-DECL NIL |defined_types| NIL)
    (INIT CONST-DECL "bool" |gnsl_init| NIL)
    (|Message| TYPE-DECL NIL |gnsl_init| NIL)
    (|Identity| NONEMPTY-TYPE-EQ-DECL NIL |gnsl_init| NIL)
    (>= CONST-DECL "bool" |reals| NIL)
    (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL)
    (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL)
    (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL)
    (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL)
    (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL)
    (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL)
    (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL)
    (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL)
    (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL)
    (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)
    (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL)
    (USER CONST-DECL "process[event]" |gnsl_init| NIL)
    (|process| TYPE-EQ-DECL NIL |processes| "../rules/")
    (|prefix_closed| CONST-DECL "bool" |processes| "../rules/")
    (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL)
    (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL)
    (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL)
    (|trace| TYPE-EQ-DECL NIL |traces| "../rules/")
    (|list| TYPE-DECL NIL |list_adt| NIL)
    (|rho_last| DEF-DECL "bool" |gnsl_init| NIL)
    (T CONST-DECL "set[event]" |gnsl_init| NIL)
    (|R_last| CONST-DECL "set[event]" |gnsl_init| NIL)
    (|set| TYPE-EQ-DECL NIL |sets| NIL) (|event| TYPE-DECL NIL |dynetwork| NIL)
    (|authentication_by_rank| FORMULA-DECL NIL |dynetwork| NIL)
    (|member| CONST-DECL "bool" |sets| NIL)
    (|subset?| CONST-DECL "bool" |sets| NIL)
    (|subset_is_partial_order| NAME-JUDGEMENT "(partial_order?[set[T]])"
     |sets_lemmas| NIL))
   3974 1177 T NIL)))

