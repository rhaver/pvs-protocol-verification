(listprops
 (insert_TCC1 0
  (insert_TCC1-1 nil 3389804493 3390551714
   ("" (skolem-typepred) (("" (prop) (("" (grind) nil nil)) nil)) nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   17 11 t nil))
 (insert_TCC2 0
  (insert_TCC2-1 nil 3389804493 3390551719
   ("" (skolem-typepred)
    (("" (prop)
      (("1" (grind) nil nil)
       ("2" (expand "length") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   69 58 t nil))
 (insert_TCC3 0
  (insert_TCC3-1 nil 3389804493 3390551724
   ("" (skolem-typepred)
    (("" (prop) (("" (expand "length") (("" (grind) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   66 59 t nil))
 (length_insert 0
  (length_insert-1 nil 3390551119 3390551782
   ("" (induct "l")
    (("1" (skolem-typepred)
      (("1" (expand "length" -1)
        (("1" (expand "length" 1 2)
          (("1" (expand "insert" 1) (("1" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem-typepred)
          (("2" (expand "length" -1)
            (("2" (expand "length" 1 2)
              (("2" (expand "insert" 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (list_induction formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (insert def-decl "list[T]" listprops nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   85 84 t shostak))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3389807672 3390551783
   ("" (skolem-typepred) (("" (prop) (("" (grind) nil nil)) nil)) nil)
   unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   73 67 t nil))
 (remove_TCC2 0
  (remove_TCC2-1 nil 3389807672 3390551783
   ("" (skolem-typepred) (("" (prop) (("" (grind) nil nil)) nil)) nil)
   unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   6 6 t nil))
 (remove_TCC3 0
  (remove_TCC3-1 nil 3389807672 3390551783
   ("" (skolem-typepred)
    (("" (prop)
      (("1" (grind) nil nil)
       ("2" (delete 2)
        (("2" (expand "length") (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   60 58 t nil))
 (remove_TCC4 0
  (remove_TCC4-1 nil 3389807672 3390551784
   ("" (skolem-typepred)
    (("" (prop) (("" (expand "length") (("" (grind) nil nil)) nil))
      nil))
    nil)
   unchecked
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) nil
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   66 57 t nil))
 (length_remove 0
  ("length_remove-1" nil 3390551615 3390551699
   ("" (measure-induct+ "length(c)" "c" 1)
    (("" (skolem-typepred)
      (("" (expand "remove" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (replace -1 -2)
              (("1" (delete -1 -3)
                (("1" (expand "length") (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (hide -2)
              (("2" (expand "length")
                (("2" (grind)
                  (("2" (reveal -1)
                    (("2" (inst -1 "cdr(x!1)")
                      (("1" (inst -1 "i!1-1") (("1" (ground) nil nil))
                        nil)
                       ("2" (delete 3) (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   (nil (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove def-decl "list[T]" listprops nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil) nil
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    nil)
   8288 164 t nil))
 (gen_f_list_TCC1 0
  (gen_f_list_TCC1-1 nil 3389883240 3390551784
   ("" (subtype-tcc) nil nil) unchecked
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 33
   33 t nil))
 (gen_f_list_TCC2 0
  (gen_f_list_TCC2-1 nil 3389883240 3390551784
   ("" (subtype-tcc) nil nil) unchecked nil 3 3 t nil))
 (gen_f_list_TCC3 0
  (gen_f_list_TCC3-1 nil 3389883240 3390551785
   ("" (subtype-tcc) nil nil) unchecked
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   14 13 t nil))
 (gen_f_list_TCC4 0
  (gen_f_list_TCC4-1 nil 3389883240 3390551785
   ("" (termination-tcc) nil nil) unchecked
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   33 33 t nil))
 (gen1 0
  (gen1-1 nil 3390230154 3390551786
   ("" (skolem 1 ("k!1" "_" "_"))
    (("" (measure-induct+ "k!1-i" "i" 1)
      (("" (hide -1)
        (("" (skolem!)
          (("" (expand "gen_f_list")
            (("" (grind :exclude "gen_f_list")
              (("" (reveal -1)
                (("" (inst -1 "1+x!1")
                  (("" (inst? -1) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   (nil nil (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (gen_f_list def-decl "list[T]" listprops nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   141 140 t nil))
 (gen2_TCC1 0
  (gen2_TCC1-1 nil 3390230186 3390551786 ("" (subtype-tcc) nil nil)
   unchecked
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)) 3
   3 nil nil))
 (gen2_TCC2 0
  (gen2_TCC2-1 nil 3390230186 3390551786
   ("" (skolem!)
    (("" (rewrite "gen1")
      (("" (typepred "j!1") (("" (propax) nil nil)) nil)) nil))
    nil)
   unchecked
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (gen1 formula-decl nil listprops nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   6 6 t nil))
 (gen2_TCC3 0
  (gen2_TCC3-1 nil 3390230186 3390551787 ("" (subtype-tcc) nil nil)
   unchecked nil 33 32 nil nil))
 (gen2 0
  (gen2-1 nil 3390230213 3390551794
   ("" (skolem 1 ("k!1" "_" "_" "_"))
    (("" (measure-induct+ "k!1-(i-j)" ("i" "j") 1)
      (("1" (hide -1)
        (("1" (skolem!)
          (("1" (expand "nth")
            (("1" (expand "gen_f_list")
              (("1" (grind :exclude "gen_f_list")
                (("1" (reveal -1)
                  (("1" (inst -1 "1+x!1" "x!2-1")
                    (("1" (inst -1 "f!1") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (delete -2 2)
        (("2" (rewrite "gen1")
          (("2" (typepred "y!2") (("2" (propax) nil nil)) nil)) nil))
        nil)
       ("3" (delete 2)
        (("3" (skolem!)
          (("3" (rewrite "gen1")
            (("3" (typepred "y!2") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (delete -1 2)
        (("4" (skolem!)
          (("4" (typepred "x!1`1" "x!1`2") (("4" (ground) nil nil))
            nil))
          nil))
        nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil)
       ("7" (delete -1 2)
        (("7" (skolem!)
          (("7" (rewrite "gen1")
            (("7" (typepred "x!1`2") (("7" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("8" (grind) nil nil)
       ("9" (delete -2 2 3)
        (("9" (rewrite "gen1")
          (("9" (typepred "y!1`2") (("9" (propax) nil nil)) nil)) nil))
        nil)
       ("10" (grind) nil nil)
       ("11" (delete 2)
        (("11" (skolem!)
          (("11" (rewrite "gen1")
            (("11" (typepred "y!1`2") (("11" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("12" (delete 2)
        (("12" (rewrite "gen1")
          (("12" (typepred "j!1" "i!1") (("12" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((int_plus_int_is_int application-judgement "int" integers nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (gen_f_list def-decl "list[T]" listprops nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) nil
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (gen1 formula-decl nil listprops nil) nil
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   680 670 t nil))
 (elt_singleton 0
  (elt_singleton-1 nil 3390480853 3390551794
   ("" (skolem!)
    (("" (ground)
      (("1" (expand "elt")
        (("1" (skolem-typepred)
          (("1" (expand "length")
            (("1" (expand "length" -1)
              (("1" (expand "nth" -2) (("1" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "elt" 1)
        (("2" (inst 1 "0")
          (("1" (expand "nth") (("1" (propax) nil nil)) nil)
           ("2" (expand "length" 1) (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (elt const-decl "bool" listprops nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   43 44 t shostak))
 (equality_length 0
  (equality_length-1 nil 3390051338 3390551794
   ("" (skolem!) (("" (prop) (("" (ground) nil nil)) nil)) nil) untried
   nil 2 1 t shostak))
 (equality_nth_TCC1 0
  (equality_nth_TCC1-1 nil 3390208389 3390551794
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   37 38 t nil))
 (equality_nth 0
  (equality_nth-1 nil 3390208430 3412536718
   ("" (skolem!)
    (("" (prop)
      (("" (induct "i")
        (("1" (prop)
          (("1" (expand "nth")
            (("1"
              (lemma "list_adt[T].list_cons_eta" ("cons?_var" "l1!1"))
              (("1"
                (lemma "list_adt[T].list_cons_eta"
                 ("cons?_var" "l2!1"))
                (("1" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (induct-and-simplify "jb") nil nil)
         ("3" (skolem-typepred) (("3" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   proved
   ((l2!1 skolem-const-decl "list[T]" listprops nil)
    (below type-eq-decl nil nat_types nil)
    (l1!1 skolem-const-decl "list[T]" listprops nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   25698 990 t shostak))
 (length_nth_equality_TCC1 0
  (length_nth_equality_TCC1-1 nil 3390108435 3390551797
   ("" (subtype-tcc) nil nil) unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil))
   38 38 t nil))
 (length_nth_equality 0
  ("length_nth_equality-1" nil 3390231124 3390551798
   ("" (induct "l1")
    (("1" (skosimp)
      (("1" (simplify -1)
        (("1" (expand "length" -1) (("1" (ground) nil nil)) nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skosimp)
            (("2" (lemma "list_cons_eta" ("cons?_var" "l2!1"))
              (("1" (replace -1 1 rl)
                (("1" (decompose-equality 1)
                  (("1" (inst -3 "0")
                    (("1" (expand "nth") (("1" (propax) nil nil)) nil)
                     ("2" (delete -1 -2 2)
                      (("2" (expand "length") (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (reveal -2)
                    (("2" (inst -1 "cdr(l2!1)")
                      (("2" (ground)
                        (("1" (delete -1 -3 2)
                          (("1" (expand "length" -1)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (delete -1 -2 2)
                          (("2" (skolem!)
                            (("2" (inst -1 "i!1+1")
                              (("1"
                                (expand "nth" -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "length")
                                (("2"
                                  (typepred "i!1")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "length" -1)
                (("2" (delete -2 2) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (delete 2) (("3" (use "length_nth_equality_TCC1") nil nil))
      nil))
    nil)
   untried
   (nil (list_cons_eta formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil) nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil (list_induction formula-decl nil list_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) nil)
   110 111 t nil))
 (cons_append 0
  ("cons_append-1" nil 3390231656 3390551798
   ("" (skolem-typepred)
    (("" (expand "append" 1 2) (("" (propax) nil nil)) nil)) nil)
   untried
   ((append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil) nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2 2 t nil))
 (cons_remove_TCC1 0
  (cons_remove_TCC1-1 nil 3390127496 3390551798
   ("" (skolem-typepred)
    (("" (expand "length") (("" (ground) nil nil)) nil)) nil)
   unchecked
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil) nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   3 3 t nil))
 (cons_remove_TCC2 0
  (cons_remove_TCC2-1 nil 3390138618 3390551798
   ("" (skolem-typepred)
    (("" (expand "length" -2) (("" (propax) nil nil)) nil)) nil)
   unchecked
   ((below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil) nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   2 3 t nil))
 (cons_remove_TCC3 0
  (cons_remove_TCC3-1 nil 3390138618 3390551798
   ("" (skolem-typepred) (("" (ground) nil nil)) nil) unchecked
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil) nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   36 36 t nil))
 (cons_remove 0
  (cons_remove-1 nil 3390127496 3390551798
   ("" (skosimp)
    (("" (expand "remove" 1 2) (("" (propax) nil nil)) nil)) nil)
   untried ((remove def-decl "list[T]" listprops nil)) 2 2 t shostak))
 (nth_remove_TCC1 0
  (nth_remove_TCC1-1 nil 3390161742 3390551798
   ("" (subtype-tcc) nil nil) unchecked nil 3 2 t nil))
 (nth_remove_TCC2 0
  ("nth_remove_TCC2-1" nil 3390551873 3390551936
   ("" (skolem-typepred)
    (("" (lemma "length_remove" ("c" "l!1" "i" "i!1"))
      (("1" (replace -1 1 rl) (("1" (propax) nil nil)) nil)
       ("2" (ground)
        (("2" (expand "length" -1) (("2" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil) nil
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_remove formula-decl nil listprops nil))
   6122 18 t nil))
 (nth_remove_TCC3 0
  (nth_remove_TCC3-1 nil 3390161742 3390551798
   ("" (subtype-tcc) nil nil) unchecked nil 3 3 nil nil))
 (nth_remove_TCC4 0
  (nth_remove_TCC4-1 nil 3390161742 3390551798
   ("" (subtype-tcc) nil nil) unchecked nil 2 2 nil nil))
 (nth_remove 0
  ("nth_remove-1" nil 3390551963 3390551985
   ("" (induct "l")
    (("1" (skolem-typepred)
      (("1" (expand "length" -1) (("1" (ground) nil nil)) nil)) nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skolem-typepred)
            (("2" (case "i!1 = 0")
              (("1" (replace* -1)
                (("1" (ground)
                  (("1" (expand "remove" 1)
                    (("1" (expand "nth" 1 2) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "remove" 2)
                (("2" (ground)
                  (("2" (expand "nth" 2 1)
                    (("2" (smash)
                      (("1" (replace* -3)
                        (("1" (expand "nth" 2) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (reveal -1)
                        (("2" (inst -1 "i!1-1" "j!1-1")
                          (("1" (ground)
                            (("1" (expand "nth" 3 2)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "length" -2)
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (reveal -1)
                        (("3" (inst -1 "i!1-1" "j!1-1")
                          (("1" (ground)
                            (("1" (expand "nth" 4 2)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "length" -2)
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (delete 2)
      (("3" (skolem-typepred)
        (("3" (lemma "length_remove" ("c" "l!2" "i" "i!1"))
          (("1" (replace -1 1 rl) (("1" (propax) nil nil)) nil)
           ("2" (expand "length" -1) (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil) nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove def-decl "list[T]" listprops nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_remove formula-decl nil listprops nil))
   1982 190 t nil))
 (nth_append_TCC1 0
  (nth_append_TCC1-1 nil 3389980981 3390551800
   ("" (skolem-typepred)
    (("" (rewrite "length_append") (("" (ground) nil nil)) nil)) nil)
   unchecked
   ((length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   12 11 t nil))
 (nth_append_TCC2 0
  (nth_append_TCC2-1 nil 3390230148 3390551801
   ("" (subtype-tcc) nil nil) unchecked
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil) nil
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   47 47 nil nil))
 (nth_append 0
  ("nth_append-1" nil 3390231587 3390551803
   ("" (induct "l1")
    (("1" (skolem-typepred)
      (("1" (expand "append")
        (("1" (expand "length" +) (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem-typepred)
      (("2" (prop)
        (("2" (skolem-typepred)
          (("2" (expand "append" 1)
            (("2" (case "i!1=0")
              (("1" (replace* -1)
                (("1" (expand "nth" 1 1)
                  (("1" (expand "length" 1 1)
                    (("1" (expand "nth" 1 1)
                      (("1" (delete -) (("1" (smash) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2 1)
                (("2" (smash)
                  (("1" (inst -2 "l2!1" "i!1-1")
                    (("1" (ground)
                      (("1" (expand "nth" 2 2)
                        (("1" (expand "length" -3)
                          (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "length" -1 1)
                      (("2" (ground) nil nil)) nil))
                    nil)
                   ("2" (inst -2 "l2!1" "i!1-1")
                    (("1" (expand "length" 2)
                      (("1" (ground)
                        (("1" (expand "length" 3)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "length" -1 1)
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (delete 2)
      (("3" (skolem-typepred)
        (("3" (prop) (("3" (ground) nil nil)) nil)) nil))
      nil)
     ("4" (delete 2)
      (("4" (skolem-typepred) (("4" (rewrite "length_append") nil nil))
        nil))
      nil))
    nil)
   untried
   ((length_append formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil) nil
    (list_induction formula-decl nil list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (append def-decl "list[T]" list_props nil) nil nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   224 223 t nil))
 (nth_cdr 0
  (nth_cdr-1 nil 3390203800 3390551803
   ("" (skolem-typepred)
    (("" (expand "nth" 1 2) (("" (propax) nil nil)) nil)) nil)
   untried
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil) nil nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   4 3 t shostak))
 (elt_append1 0
  (elt_append1-1 nil 3389981809 3390551805
   ("" (induct "l1")
    (("1" (skolem!)
      (("1" (prop)
        (("1" (delete 1)
          (("1" (expand "elt")
            (("1" (skolem!)
              (("1" (typepred "i!1")
                (("1" (expand "length") (("1" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem!)
          (("2" (prop)
            (("2" (hide -1)
              (("2" (expand "elt" -1)
                (("2" (skolem!)
                  (("2" (expand "append")
                    (("2" (expand "nth")
                      (("2" (smash)
                        (("1" (expand "elt" 1)
                          (("1" (inst 1 "0")
                            (("1" (expand "nth")
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "length")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "l2!1" "t!1")
                            (("2" (prop)
                              (("1"
                                (expand "elt" -1)
                                (("1"
                                  (skolem!)
                                  (("1"
                                    (expand "elt")
                                    (("1"
                                      (inst 2 "i!2+1")
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length")
                                        (("2"
                                          (typepred "i!2")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "elt" 1)
                                (("2" (inst 1 "i!1-1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil nil
    (list_induction formula-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (elt const-decl "bool" listprops nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   133 132 t nil))
 (elt_append2 0
  ("elt_append2-1" nil 3389982034 3390551806
   ("" (induct "l1")
    (("1" (skolem!)
      (("1" (prop)
        (("1" (expand "append") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem!)
          (("2" (prop)
            (("2" (hide -1)
              (("2" (expand "elt" -1)
                (("2" (skolem!)
                  (("2" (expand "append")
                    (("2" (expand "nth")
                      (("2" (smash)
                        (("1" (expand "elt" 1)
                          (("1" (inst 1 "1+length(cons2_var!1)")
                            (("1" (grind)
                              (("1" (rewrite "nth_append") nil nil))
                              nil)
                             ("2" (expand "length" 1 2)
                              (("2"
                                (rewrite "length_append")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "l2!1" "t!1")
                            (("2" (prop)
                              (("1"
                                (expand "elt" -1)
                                (("1"
                                  (skolem!)
                                  (("1"
                                    (expand "elt")
                                    (("1"
                                      (inst 2 "i!2+1")
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length")
                                        (("2"
                                          (typepred "i!2")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "elt" 1)
                                (("2"
                                  (inst 1 "i!1")
                                  (("2"
                                    (delete 3)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil listprops nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil) nil
    (list_induction formula-decl nil list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (elt const-decl "bool" listprops nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   155 156 t nil))
 (elt_append3 0
  (elt_append3-1 nil 3390019325 3390551807
   ("" (induct "l1")
    (("1" (skolem!)
      (("1" (prop)
        (("1" (expand "append") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skosimp)
            (("2" (expand "append")
              (("2" (expand "elt" -)
                (("2" (skosimp)
                  (("2" (expand "nth" -)
                    (("2" (smash)
                      (("1" (expand "elt" 1)
                        (("1" (inst 1 "0")
                          (("1" (expand "nth") (("1" (propax) nil nil))
                            nil)
                           ("2" (expand "length")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (reveal -1)
                        (("2" (inst -1 "l2!1" "t!1")
                          (("2" (prop)
                            (("1" (expand "elt" -)
                              (("1"
                                (skolem!)
                                (("1"
                                  (expand "elt" 2)
                                  (("1"
                                    (inst 2 "i!2+1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "length")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "elt" 1)
                              (("2" (inst 1 "i!1-1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil nat_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil) nil
    (list_induction formula-decl nil list_adt nil) nil
    (append def-decl "list[T]" list_props nil)
    (elt const-decl "bool" listprops nil) nil
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   69 70 t shostak))
 (elt_append4_weak 0
  (elt_append4_weak-1 nil 3398153678 3398153686
   ("" (induct "l")
    (("1" (skosimp*)
      (("1" (prop)
        (("1" (expand "elt")
          (("1" (delete 1)
            (("1" (skolem-typepred)
              (("1" (expand "length") (("1" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skolem!)
          (("2" (delete 1)
            (("2" (case "null?(l1!1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem!)
          (("2" (prop)
            (("1" (inst -2 "t!1")
              (("1" (case "cons1_var!1=t!1")
                (("1" (delete -2 -3)
                  (("1" (inst 1 "null" "cons2_var!1")
                    (("1" (expand "append")
                      (("1" (replace -1 1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "elt_append3"
                   ("l1" "(:cons1_var!1:)" "l2" "cons2_var!1" "t"
                    "t!1"))
                  (("2"
                    (lemma "elt_singleton"
                     ("t1" "cons1_var!1" "t2" "t!1"))
                    (("2" (hide -4 2)
                      (("2" (grind :exclude "elt")
                        (("2" (delete -2 +)
                          (("2" (reveal -1 1)
                            (("2" (prop)
                              (("2"
                                (skolem!)
                                (("2"
                                  (inst
                                   1
                                   "cons(cons1_var!1,l1!1)"
                                   "l2!1")
                                  (("2"
                                    (expand "append" 1)
                                    (("2"
                                      (decompose-equality 1)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem!)
              (("2" (replace -1 1)
                (("2" (delete -)
                  (("2" (expand "elt")
                    (("2" (inst 1 "length(l1!1)")
                      (("1" (rewrite "nth_append")
                        (("1" (expand "nth") (("1" (propax) nil nil))
                          nil)
                         ("2" (delete 2)
                          (("2" (expand "length" 1 2)
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (rewrite "length_append")
                        (("2" (expand "length" 1 2)
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil) nil
    (elt const-decl "bool" listprops nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil) nil
    (elt_singleton formula-decl nil listprops nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (elt_append3 formula-decl nil listprops nil)
    (length_append formula-decl nil list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil listprops nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   636 176 nil nil))
 (elt_append4_strong 0
  (elt_append4_strong-1 nil 3398153732 3398153743
   ("" (induct "l")
    (("1" (skolem-typepred)
      (("1" (delete +)
        (("1" (expand "length") (("1" (ground) nil nil)) nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem!)
          (("2" (prop)
            (("1" (case "i!1=0")
              (("1" (delete -3)
                (("1" (replace -1 -2)
                  (("1" (expand "nth" -2)
                    (("1" (inst 1 "null" "cons2_var!1")
                      (("1" (expand "append")
                        (("1" (replace -2 1) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "length" 1 2)
                        (("2" (ground) nil nil)) nil)
                       ("3" (expand "length") (("3" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 "t!1" "i!1-1")
                (("1" (hide -2 2)
                  (("1" (expand "nth")
                    (("1" (ground)
                      (("1" (reveal -1 1)
                        (("1" (prop)
                          (("1" (skolem-typepred)
                            (("1"
                              (inst 1 "cons(cons1_var!1, l1!1)" "l2!1")
                              (("1"
                                (expand "append" 1)
                                (("1"
                                  (replace -4 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1 2)
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (expand "length" 1)
                                (("3"
                                  (delete -2 -3 -4 -5 2)
                                  (("3" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete -1 3)
                  (("2" (typepred "i!1")
                    (("2" (expand "length" -1) (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem-typepred)
              (("2" (replace -3 1)
                (("2" (delete -4)
                  (("2"
                    (lemma "nth_append"
                     ("l1" "l1!1" "l2" "cons(t!1,l2!1)" "i" "i!1"))
                    (("1" (replace* -1 -2)
                      (("1" (delete -1 -2)
                        (("1" (ground)
                          (("1" (expand "nth") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "i!1")
                      (("2" (delete 2)
                        (("2" (expand "length" 1 1)
                          (("2" (replace* -2 -3)
                            (("2" (delete -2 -3 -4)
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   untried
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    nil nil nil (nth_append formula-decl nil listprops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   903 188 nil nil)))

