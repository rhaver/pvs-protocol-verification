(nsl_responder
 (b_TCC1 0
  (b_TCC1-1 nil 3377094834 3416211823
   ("" (use "b_ax") (("" (skolem!) (("" (inst 1 "b!1") nil nil)) nil))
    nil)
   proved
   ((b!1 skolem-const-decl "Identity" needham nil)
    (a const-decl "Identity" needham nil)
    (/= const-decl "boolean" notequal nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Identity nonempty-type-decl nil needham nil)
    (b_ax formula-decl nil needham nil))
   30021 30 t nil))
 (Nonces_TCC1 0
  (Nonces_TCC1-1 nil 3377094834 3416211735
   ("" (skolem!)
    (("" (typepred "pt[[Identity,Role],Nonce]")
      (("" (delete -1)
        (("" (inst -1 "(i!1,r!1)")
          (("" (skolem!)
            (("" (inst 1 "n!1")
              (("" (expand "IRpart") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (setof type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Nonce nonempty-type-decl nil needham nil)
    (Role type-decl nil needham nil)
    (Identity nonempty-type-decl nil needham nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IRpart const-decl "[[Identity, Role] -> setof[Nonce]]" needham
     nil)
    nil nil nil)
   129719 90 t nil))
 (n_prop 0
  (n_prop-1 nil 3416206515 3416211544
   ("" (skosimp*)
    (("" (typepred "nb" "pt[[Identity, Role], Nonce]")
      (("" (delete -3)
        (("" (inst -2 "(i!1, r!1)" "(b,resp)" "nb")
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nb const-decl "Nonces(b, resp)" needham nil)
    (Nonces nonempty-type-eq-decl nil needham nil)
    (resp adt-constructor-decl "(resp?)" needham nil)
    (resp? adt-recognizer-decl "[Role -> boolean]" needham nil)
    (b const-decl "{i: Identity | i /= a}" needham nil)
    (a const-decl "Identity" needham nil)
    (/= const-decl "boolean" notequal nil)
    (IRpart const-decl "[[Identity, Role] -> setof[Nonce]]" needham
     nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-decl nil needham nil)
    (Role type-decl nil needham nil)
    (Identity nonempty-type-decl nil needham nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   39 40 t shostak))
 (n_orig 0
  (n_orig-1 nil 3416206829 3416211544
   ("" (skosimp)
    (("" (typepred "pt[[Identity, Role], Nonce]" "nb")
      (("" (delete -2)
        (("" (inst -1 "(i!1, resp)" "(b, resp)" "nb")
          (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   unchecked
   ((nb const-decl "Nonces(b, resp)" needham nil)
    (Nonces nonempty-type-eq-decl nil needham nil)
    (resp adt-constructor-decl "(resp?)" needham nil)
    (resp? adt-recognizer-decl "[Role -> boolean]" needham nil)
    (b const-decl "{i: Identity | i /= a}" needham nil)
    (a const-decl "Identity" needham nil)
    (IRpart const-decl "[[Identity, Role] -> setof[Nonce]]" needham
     nil)
    (pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (setof type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Nonce nonempty-type-decl nil needham nil)
    (Role type-decl nil needham nil)
    (Identity nonempty-type-decl nil needham nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   66 30 t shostak))
 (E_TCC1 0
  (E_TCC1-1 nil 3377094834 3416211545 ("" (cases-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil needham nil)
    (public? adt-recognizer-decl "[Message -> boolean]" needham nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" needham nil)
    (Key type-eq-decl nil needham nil))
   104 80 nil nil))
 (rho_TCC1 0
  (rho_TCC1-1 nil 3377094835 3416211545 ("" (termination-tcc) nil nil)
   unchecked ((<< adt-def-decl "(well_founded?[Message])" needham nil))
   47 40 nil shostak))
 (rho_TCC2 0
  (rho_TCC2-1 nil 3377094835 3416211545 ("" (termination-tcc) nil nil)
   unchecked ((<< adt-def-decl "(well_founded?[Message])" needham nil))
   76 30 nil shostak))
 (rho_TCC3 0
  (rho_TCC3-1 nil 3377094837 3416211545 ("" (termination-tcc) nil nil)
   unchecked
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil needham nil)
    (public? adt-recognizer-decl "[Message -> boolean]" needham nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" needham nil)
    (Key type-eq-decl nil needham nil)
    (<< adt-def-decl "(well_founded?[Message])" needham nil))
   76 40 nil shostak))
 (authenticated 0
  (authenticated-1 nil 3377094834 3416211549
   ("" (auto-rewrite-theory "sets")
    (("" (rewrite "authentication_by_rank" + ("rho" "rho"))
      (("1" (delete 2) (("1" (grind) nil nil)) nil)
       ("2" (delete 2)
        (("2" (expand "|-")
          (("2" (rule-induct "Gen")
            (("2" (skolem!)
              (("2" (smash)
                (("1" (inst?) (("1" (assert) nil nil)) nil)
                 ("2" (delete -2)
                  (("2" (skosimp)
                    (("2" (replace -3 1)
                      (("2" (delete -3) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (delete -2)
                  (("3" (skolem!) (("3" (grind) nil nil)) nil)) nil)
                 ("4" (delete -2)
                  (("4" (skolem!) (("4" (grind) nil nil)) nil)) nil)
                 ("5" (delete -2)
                  (("5" (skosimp)
                    (("5" (replace -3 1)
                      (("5" (delete -3) (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (delete 2)
        (("3" (skolem!)
          (("3" (expand "USER")
            (("3" (expand "RankUser")
              (("3" (interleaving)
                (("1" (interleaving2)
                  (("1" (expand "UINIT")
                    (("1" (choice3)
                      (("1" (prefix)
                        (("1" (delete 2 3)
                          (("1" (typepred "i!2")
                            (("1"
                              (lemma "n_prop" ("i" "i!1" "r" "init"))
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (delete 2 3)
                          (("2" (choice3)
                            (("2" (prefix)
                              (("2"
                                (delete 2 3)
                                (("2"
                                  (prefix)
                                  (("1"
                                    (delete -1 2 3)
                                    (("1"
                                      (expand "rho")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete 3)
                                    (("2"
                                      (case
                                       "i!1=a AND i!3=b AND i!4=nb")
                                      (("1"
                                        (delete -2 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (prefix)
                                        (("1"
                                          (delete 2 3 5)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (mdecompose-equality -3)
                                              nil
                                              nil)
                                             ("2"
                                              (decompose-equality -2)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (delete - 2 3 4 5)
                                          (("2" (stop) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (interleaving2)
                  (("2" (expand "URESP")
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (choice3)
                          (("1" (prefix)
                            (("1" (delete 2 3)
                              (("1"
                                (prefix)
                                (("1"
                                  (delete -1 2 3)
                                  (("1"
                                    (lemma "n_orig" ("i" "i!1"))
                                    (("1"
                                      (typepred "i!2")
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete 2 3)
                                  (("2"
                                    (prefix)
                                    (("2"
                                      (delete -2 +)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (choice3)
                          (("2" (prefix)
                            (("2" (delete 2 3)
                              (("2"
                                (prefix)
                                (("1"
                                  (delete 2 3)
                                  (("1"
                                    (typepred "i!2")
                                    (("1"
                                      (lemma "n_orig" ("i" "i!1"))
                                      (("1" (grind-dec-eq) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete 2 3)
                                  (("2"
                                    (prefix)
                                    (("2"
                                      (delete 2 3)
                                      (("2"
                                        (prefix)
                                        (("1"
                                          (delete 2 3)
                                          (("1"
                                            (typepred "i!2")
                                            (("1"
                                              (lemma
                                               "n_orig"
                                               ("i" "i!1"))
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (delete - 2 3 4)
                                          (("2" (stop) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (delete 2)
        (("4" (skolem-typepred)
          (("4" (expand "T")
            (("4" (replace -1)
              (("4" (delete -1)
                (("4" (assert)
                  (("4" (expand "rho") (("4" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   unchecked
   ((authentication_by_rank formula-decl nil dynetwork nil)
    (event type-decl nil dynetwork nil) (set type-eq-decl nil sets nil)
    (R const-decl "set[event]" needham nil)
    (T const-decl "set[event]" needham nil)
    (rho def-decl "bool" needham nil) (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs41_csp-rules/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs41_csp-rules/")
    (process type-eq-decl nil processes "../pvs41_csp-rules/")
    (USER const-decl "process[event]" needham nil)
    (Identity nonempty-type-decl nil needham nil)
    (Message type-decl nil needham nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (INIT const-decl "bool" needham nil)
    (setof type-eq-decl nil defined_types nil)
    (\|- const-decl "bool" needham nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (E const-decl "Message" needham nil)
    (conc3 const-decl "Message" needham nil)
    (Gen_weak_induction formula-decl nil needham nil)
    (RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (commit_resp adt-constructor-decl
     "[[Identity, Identity, Nonce] -> (commit_resp?)]" needham nil)
    (commit_resp? adt-recognizer-decl "[Message -> boolean]" needham
     nil)
    (n_orig formula-decl nil needham nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs41_csp-rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs41_csp-rules/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Stop const-decl "process" processes "../pvs41_csp-rules/")
    (running_init adt-constructor-decl
     "[[Identity, Identity, Nonce] -> (running_init?)]" needham nil)
    (running_init? adt-recognizer-decl "[Message -> boolean]" needham
     nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (Choice const-decl "process[T]" parametric_choice
     "../pvs41_csp-rules/")
    (user adt-constructor-decl "[Identity -> (user?)]" needham nil)
    (user? adt-recognizer-decl "[Message -> boolean]" needham nil)
    (nonce adt-constructor-decl "[Nonce -> (nonce?)]" needham nil)
    (nonce? adt-recognizer-decl "[Message -> boolean]" needham nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     needham nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" needham nil)
    (public adt-constructor-decl "[Identity -> (public?)]" needham nil)
    (Key type-eq-decl nil needham nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" needham nil)
    (public? adt-recognizer-decl "[Message -> boolean]" needham nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (>> const-decl "process" processes "../pvs41_csp-rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs41_csp-rules/")
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs41_csp-rules/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (a const-decl "Identity" needham nil)
    (b const-decl "{i: Identity | i /= a}" needham nil)
    (nb const-decl "Nonces(b, resp)" needham nil)
    (restriction_stop formula-decl nil restriction_rules
     "../pvs41_csp-rules/")
    (x_public adt-accessor-decl "[(public?) -> Identity]" needham nil)
    (x_user adt-accessor-decl "[(user?) -> Identity]" needham nil)
    (x_nonce adt-accessor-decl "[(nonce?) -> Nonce]" needham nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" needham nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" needham nil)
    (n_prop formula-decl nil needham nil)
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs41_csp-rules/")
    (uniform_stop2 formula-decl nil uniform_props
     "../pvs41_csp-rules/")
    (restriction_pref formula-decl nil restriction_rules
     "../pvs41_csp-rules/")
    (complement const-decl "set" sets nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs41_csp-rules/")
    (uniform_interleave2 formula-decl nil uniform_props
     "../pvs41_csp-rules/")
    (restriction_free_par formula-decl nil restriction_rules
     "../pvs41_csp-rules/")
    (Nonce nonempty-type-decl nil needham nil)
    (Role type-decl nil needham nil)
    (IRpart const-decl "[[Identity, Role] -> setof[Nonce]]" needham
     nil)
    (init? adt-recognizer-decl "[Role -> boolean]" needham nil)
    (init adt-constructor-decl "(init?)" needham nil)
    (Nonces nonempty-type-eq-decl nil needham nil)
    (Interleave const-decl "process[T]" multipar "../pvs41_csp-rules/")
    (UINIT const-decl "process[event]" needham nil)
    (resp? adt-recognizer-decl "[Role -> boolean]" needham nil)
    (resp adt-constructor-decl "(resp?)" needham nil)
    (URESP const-decl "process[event]" needham nil))
   4545 3530 t nil)))

