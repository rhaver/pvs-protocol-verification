(monotonicity3
 (monotonic_par2 0
  (monotonic_par2-1 nil 3662229313
   ("" (grind)
    (("" (inst 1 "t!1")
      (("" (skolem!) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((U formal-nonempty-type-decl nil monotonicity3 nil)
    (T formal-type-decl nil monotonicity3 nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (t!1 skolem-const-decl "[i: U -> (P!1(i))]" monotonicity3 nil)
    (P!1 skolem-const-decl "[U -> process[T]]" monotonicity3 nil)
    (Q!1 skolem-const-decl "[U -> process[T]]" monotonicity3 nil)
    (Par const-decl "process[T]" multipar nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (monotonic_free_par2 0
  (monotonic_free_par2-1 nil 3662229313
   ("" (skosimp)
    (("" (expand "Interleave")
      (("" (rewrite "monotonic_par2") nil nil)) nil))
    nil)
   ((Interleave const-decl "process[T]" multipar nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (U formal-nonempty-type-decl nil monotonicity3 nil)
    (emptyset const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil monotonicity3 nil)
    (monotonic_par2 formula-decl nil monotonicity3 nil))
   nil)))

