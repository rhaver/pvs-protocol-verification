(monotonicity
 (monotonic_stop 0
  (monotonic_stop-1 nil 3662229313
   ("" (lemma "stop_subset[T]") (("" (propax) nil)) nil)
   ((stop_subset formula-decl nil process_rules nil)
    (T formal-type-decl nil monotonicity nil))
   nil))
 (monotonic_pref 0
  (monotonic_pref-1 nil 3662229313
   ("" (skolem!)
    (("" (grind :if-match nil)
      (("1" (inst - "cons(a!1, x!1)")
        (("1" (ground)
          (("1" (skolem!)
            (("1" (case "cdr(cons(a!1, x!1)) = t1!1")
              (("1" (assert) nil nil)
               ("2" (replace -1) (("2" (assert) nil nil)) nil))
              nil))
            nil)
           ("2" (inst?) nil nil))
          nil))
        nil)
       ("2" (inst?) (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((>> const-decl "process" processes nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil monotonicity nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (t1!1 skolem-const-decl "(P!1)" monotonicity nil)
    (P!1 skolem-const-decl "process[T]" monotonicity nil)
    (Q!1 skolem-const-decl "process[T]" monotonicity nil))
   nil))
 (monotonic_choice 0
  (monotonic_choice-1 nil 3662229313
   ("" (skosimp) (("" (grind) nil)) nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (union const-decl "set" sets nil)
    (\\/ const-decl "process" processes nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (T formal-type-decl nil monotonicity nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil))
   nil))
 (monotonic_choice2 0
  (monotonic_choice2-1 nil 3662229313
   ("" (grind :exclude ("prefix_closed") :if-match nil)
    (("" (inst? -)
      (("" (skolem!)
        (("" (inst - "x!1")
          (("" (assert) (("" (inst + "Q!1") nil))))))))))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil monotonicity nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil)
    (Choice const-decl "process" processes nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (monotonic_par 0
  (monotonic_par-1 nil 3662229313
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (Par const-decl "process" processes nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil monotonicity nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil))
   nil))
 (monotonic_free_par 0
  (monotonic_free_par-1 nil 3662229313
   ("" (skosimp)
    (("" (expand "//") (("" (rewrite "monotonic_par") nil)))) nil)
   ((// const-decl "process" processes nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (emptyset const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil monotonicity nil)
    (monotonic_par formula-decl nil monotonicity nil))
   nil))
 (monotonic_hide 0
  (monotonic_hide-1 nil 3662229313
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (/ const-decl "process" processes nil)
    (proj const-decl "[trace, set[T] -> trace]" traces nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil monotonicity nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil))
   nil))
 (monotonic_rename 0
  (monotonic_rename-1 nil 3662229313
   ("" (skosimp) (("" (grind) nil nil)) nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (rename const-decl "process" processes nil)
    (subset? const-decl "bool" sets nil)
    (dom const-decl "setof[T]" processes nil)
    (member const-decl "bool" sets nil)
    (sigma const-decl "setof[T]" processes nil)
    (sigma const-decl "[trace -> set[T]]" traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil monotonicity nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil))
   nil)))

