(more_list_props
 (add_TCC1 0
  (add_TCC1-1 nil 3662229310
   ("" (skolem!)
    (("" (expand "append") (("" (lift-if) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((append def-decl "list[T]" list_props nil)) nil))
 (add_null 0
  (add_null-1 nil 3662229310 ("" (grind) nil nil)
   ((append def-decl "list[T]" list_props nil)
    (add const-decl "(cons?[T])" more_list_props nil))
   nil))
 (add_cons 0
  (add_cons-1 nil 3662229310 ("" (grind) nil nil)
   ((append def-decl "list[T]" list_props nil)
    (add const-decl "(cons?[T])" more_list_props nil))
   nil))
 (length_append 0
  (length_append-1 nil 3662229310
   ("" (skolem + (_ "l2!1")) (("" (induct-and-simplify "l1") nil nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (length_add 0
  (length_add-1 nil 3662229310
   ("" (auto-rewrite "length" "add" "length_append")
    (("" (skolem!) (("" (assert) nil nil)) nil)) nil)
   ((add const-decl "(cons?[T])" more_list_props nil)
    (length def-decl "nat" list_props nil)
    (length_append formula-decl nil more_list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (length_reverse 0
  (length_reverse-1 nil 3662229310
   ("" (induct-and-simplify "l" :rewrites ("length_append")) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_append formula-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (length_cdr 0
  (length_cdr-1 nil 3662229310
   ("" (auto-rewrite "length")
    (("" (skolem!) (("" (assert) nil nil)) nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (length_zero 0
  (length_zero-1 nil 3662229310 ("" (grind) nil nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil))
 (length_non_zero 0
  (length_non_zero-1 nil 3662229310 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (reverse_cons 0
  (reverse_cons-1 nil 3662229310 ("" (grind) nil nil)
   ((reverse def-decl "list[T]" list_props nil)
    (add const-decl "(cons?[T])" more_list_props nil))
   nil))
 (reverse_add 0
  (reverse_add-1 nil 3662229310
   ("" (grind) (("" (rewrite "reverse_append") nil nil)) nil)
   ((reverse def-decl "list[T]" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (reverse_append formula-decl nil list_props nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (add const-decl "(cons?[T])" more_list_props nil))
   nil))
 (cons_to_add 0
  (cons_to_add-1 nil 3662229310
   ("" (auto-rewrite "add_null" "add_cons")
    (("" (induct "cons_l")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (grind :if-match nil)
        (("1" (inst + "a!1" "cons(cons1_var!1, l!1)")
          (("1" (assert) nil nil)) nil)
         ("2" (inst + "cons1_var!1" "null")
          (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (add const-decl "(cons?[T])" more_list_props nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil))
   nil))
 (add_induction 0
  (add_induction-1 nil 3662229310
   ("" (skosimp)
    (("" (case "FORALL (n : nat), l : length(l) = n IMPLIES P!1(l)")
      (("1" (skolem!) (("1" (inst - "length(l!1)" "l!1") nil nil)) nil)
       ("2" (delete 2)
        (("2" (auto-rewrite "length_zero" "length_add")
          (("2" (induct "n")
            (("1" (skosimp) (("1" (assert) nil nil)) nil)
             ("2" (skosimp*)
              (("2" (use "cons_to_add" ("cons_l" "l!1"))
                (("1" (skolem!)
                  (("1" (replace -1)
                    (("1" (inst - "l!2")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "length_non_zero" ("l" "l!1"))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_non_zero formula-decl nil more_list_props nil)
    (length_add formula-decl nil more_list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons_to_add formula-decl nil more_list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_zero formula-decl nil more_list_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (every_true 0
  (every_true-1 nil 3662229310 ("" (induct-and-simplify "l") nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   nil))
 (every_implies 0
  (every_implies-1 nil 3662229310
   ("" (induct-and-simplify "l") nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   nil))
 (every_implies2 0
  (every_implies2-1 nil 3662229310
   ("" (induct-and-simplify "l") nil nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil))
   nil))
 (every_implies3 0
  (every_implies3-1 nil 3662229310
   ("" (skosimp) (("" (induct-and-simplify "l") nil nil)) nil)
   ((list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (every_implies4 0
  (every_implies4-1 nil 3662229310
   ("" (skosimp)
    (("" (induct "l")
      (("1" (grind) nil nil)
       ("2" (skosimp)
        (("2" (expand "every" -3)
          (("2" (flatten)
            (("2" (forward-chain "every_implies3")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (expand "every" 1)
                    (("2" (split 1)
                      (("1" (inst? -6)
                        (("1" (assert)
                          (("1" (expand "every" -3 1)
                            (("1" (expand "every" -3)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst? -8)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (T formal-type-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (every_implies3 formula-decl nil more_list_props nil))
   nil)))

