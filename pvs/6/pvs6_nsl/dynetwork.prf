(dynetwork
 (enemy_TCC1 0
  ("enemy_TCC1-1" nil 3383918433
   ("" (expand "monotonic?")
    (("" (expand "<=")
      (("" (skosimp*)
        (("" (expand "F")
          (("" (rewrite "monotonic_choice")
            (("1" (delete 2)
              (("1" (rewrite "monotonic_choice3")
                (("1" (delete 2)
                  (("1" (skolem!)
                    (("1" (rewrite "monotonic_pref")
                      (("1" (inst -1 ("add(i!1`3, x!1)")) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (delete 2)
              (("2" (rewrite "monotonic_choice")
                (("1" (delete 2) (("1" (grind) nil nil)) nil)
                 ("2" (delete 2) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" fixed_points "../pvs6_csp_rules/")
    (F const-decl "process[event]" dynetwork nil)
    (t1!1 skolem-const-decl "(X!1(x!1))" dynetwork nil)
    (Y!1 skolem-const-decl "[setof[M] -> process[event]]" dynetwork
     nil)
    (x!1 skolem-const-decl "setof[M]" dynetwork nil)
    (X!1 skolem-const-decl "[setof[M] -> process[event]]" dynetwork
     nil)
    (t1!1 skolem-const-decl "(X!1(x!1))" dynetwork nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (monotonic_pref formula-decl nil monotonicity "../pvs6_csp_rules/")
    (monotonic_choice3 formula-decl nil monotonicity2
     "../pvs6_csp_rules/")
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (event type-decl nil dynetwork nil)
    (leak adt-constructor-decl "[M -> (leak?)]" dynetwork nil)
    (leak? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (\|- formal-const-decl "setof[[setof[M], M]]" dynetwork nil)
    (\\/ const-decl "process" processes "../pvs6_csp_rules/")
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (Choice const-decl "process[T]" parametric_choice
     "../pvs6_csp_rules/")
    (M formal-type-decl nil dynetwork nil)
    (I formal-nonempty-type-decl nil dynetwork nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (monotonic_choice formula-decl nil monotonicity
     "../pvs6_csp_rules/")
    (monotonic? const-decl "bool" fixed_points "../pvs6_csp_rules/"))
   nil))
 (enemy_def 0
  (enemy_def-1 nil 3383915907
   ("" (expand "enemy")
    (("" (skolem!)
      (("" (use "fixed_point" ("G" "F"))
        (("1" (replace -1 + rl)
          (("1" (expand "F" 1 1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (use "enemy_TCC1") nil nil))
        nil))
      nil))
    nil)
   ((event type-decl nil dynetwork nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (M formal-type-decl nil dynetwork nil)
    (F const-decl "process[event]" dynetwork nil)
    (monotonic? const-decl "bool" fixed_points "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (fixed_point formula-decl nil fixed_points "../pvs6_csp_rules/")
    (enemy const-decl "[setof[M] -> process[event]]" dynetwork nil))
   nil))
 (invariant 0
  (invariant-1 nil 3383915907
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp)
      (("" (expand "network")
        (("" (expand "RankNetwork")
          (("" (parallel)
            (("" (delete 2)
              (("" (inst 1 "trans?" "rec?")
                (("" (split)
                  (("1" (delete -1 -2) (("1" (grind) nil nil)) nil)
                   ("2" (delete -1 -2) (("2" (grind) nil nil)) nil)
                   ("3" (delete -1 -2) (("3" (grind) nil nil)) nil)
                   ("4" (delete -2)
                    (("4" (rewrite "restriction_elim")
                      (("4" (delete 2)
                        (("4" (expand "RankEnemy")
                          (("4" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("5" (delete -1)
                    (("5" (interleaving2)
                      (("5" (inst?)
                        (("5" (expand "RankUser")
                          (("5" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankNetwork const-decl "setof[trace[event]]" dynetwork nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (restriction_elim formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (RankEnemy const-decl "setof[trace[event]]" dynetwork nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (uniform_par23 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (pred type-eq-decl nil defined_types nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (restriction_par formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil) (union const-decl "set" sets nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (setof type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (M formal-type-decl nil dynetwork nil)
    (enemy const-decl "[setof[M] -> process[event]]" dynetwork nil)
    (INIT formal-const-decl "setof[M]" dynetwork nil)
    (I formal-nonempty-type-decl nil dynetwork nil)
    (Interleave const-decl "process[T]" multipar "../pvs6_csp_rules/")
    (event type-decl nil dynetwork nil)
    (network const-decl "process[event]" dynetwork nil))
   nil))
 (enemy_prop2 0
  (enemy_prop2-1 nil 3383915907
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp)
      (("" (expand "enemy")
        (("" (expand "RankEnemy")
          (("" (fix2)
            (("1" (delete 2)
              (("1" (inst 1 "q1(rho!1)" "q2(rho!1)")
                (("1" (split)
                  (("1" (skolem!)
                    (("1" (split)
                      (("1" (expand "q1") (("1" (ground) nil nil)) nil)
                       ("2" (flatten)
                        (("2" (expand "q2")
                          (("2" (assert)
                            (("2" (split)
                              (("1"
                                (skosimp)
                                (("1"
                                  (inst? -4)
                                  (("1"
                                    (split)
                                    (("1"
                                      (inst?)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete -1 -2)
                    (("2" (skosimp*)
                      (("2" (expand "F")
                        (("2" (choice)
                          (("1" (choice3)
                            (("1" (prefix)
                              (("1"
                                (expand "q2")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (delete 2)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (expand "q1" -1)
                                    (("2"
                                      (lemma
                                       "uniform_strengthen[event]")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (inst
                                           -1
                                           "q1(rho!1)(add(i!2`3, i!1))"
                                           "q2(rho!1)(add(i!2`3, i!1))")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (delete -2 2)
                                              (("2"
                                                (skolem!)
                                                (("2"
                                                  (ground)
                                                  (("1"
                                                    (expand "q1")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "q2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (ground)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (choice)
                            (("1" (choice3)
                              (("1"
                                (prefix)
                                (("1"
                                  (delete -1 -2 2)
                                  (("1"
                                    (typepred "i!2`3")
                                    (("1"
                                      (expand "q2")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst 1 "i!1")
                                          (("1"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (expand "Gen")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst?) nil nil))
                                nil))
                              nil)
                             ("2" (choice3)
                              (("2"
                                (prefix)
                                (("1"
                                  (delete -1 -2 2)
                                  (("1"
                                    (typepred "i!2")
                                    (("1"
                                      (expand "q2")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst 1 "i!1")
                                          (("1"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (expand "Gen")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (use "enemy_TCC1") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankEnemy const-decl "setof[trace[event]]" dynetwork nil)
    (leak adt-constructor-decl "[M -> (leak?)]" dynetwork nil)
    (leak? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (\|- formal-const-decl "setof[[setof[M], M]]" dynetwork nil)
    (\\/ const-decl "process" processes "../pvs6_csp_rules/")
    (add const-decl "(nonempty?)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (Choice const-decl "process[T]" parametric_choice
     "../pvs6_csp_rules/")
    (I formal-nonempty-type-decl nil dynetwork nil)
    (uniform_choice2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_strengthen formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (Gen const-decl "set[M]" dynetwork nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (q1 const-decl "[set[M] -> pred[event]]" dynetwork nil)
    (q2 const-decl "[set[M] -> pred[event]]" dynetwork nil)
    (uniform2_fix2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (monotonic? const-decl "bool" fixed_points "../pvs6_csp_rules/")
    (F const-decl "process[event]" dynetwork nil)
    (INIT formal-const-decl "setof[M]" dynetwork nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (set type-eq-decl nil sets nil)
    (complement const-decl "set" sets nil)
    (M formal-type-decl nil dynetwork nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (event type-decl nil dynetwork nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (enemy const-decl "[setof[M] -> process[event]]" dynetwork nil))
   nil))
 (authentication_by_rank 0
  (authentication_by_rank-1 nil 3383915907
   ("" (skosimp)
    (("" (rewrite "authentication_equiv[event]")
      (("" (lemma "sat_transitive2[event]")
        ((""
          (inst -1 "every! e: rho!1(msg(e))" "every(complement(T!1))"
           "network(users!1) # R!1")
          (("" (assert)
            (("" (delete 2)
              (("" (split)
                (("1" (expand "network")
                  (("1" (parallel)
                    (("1" (delete 2)
                      (("1" (inst 1 "trans?" "rec?")
                        (("1" (ground)
                          (("1" (delete -) (("1" (grind) nil nil)) nil)
                           ("2" (delete -) (("2" (grind) nil nil)) nil)
                           ("3" (delete -) (("3" (grind) nil nil)) nil)
                           ("4" (delete -3 -4)
                            (("4" (rewrite "restriction_elim")
                              (("4"
                                (delete 2)
                                (("4"
                                  (use "enemy_prop2")
                                  (("4"
                                    (expand "RankEnemy")
                                    (("4"
                                      (skosimp)
                                      (("4"
                                        (expand "subset?" 1)
                                        (("4"
                                          (expand "member")
                                          (("4"
                                            (skosimp)
                                            (("4"
                                              (expand "Gen")
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("5" (interleaving2)
                            (("5" (expand "RankUser")
                              (("5" (inst? -3) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "subset?" 1)
                  (("2" (expand "member")
                    (("2" (lemma "every_implies3[event]")
                      (("2" (inst?)
                        (("2" (split)
                          (("1" (propax) nil nil)
                           ("2" (delete 2)
                            (("2" (skosimp)
                              (("2"
                                (expand "complement")
                                (("2"
                                  (expand "member")
                                  (("2" (inst? -6) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((authentication_equiv formula-decl nil authentication
     "../pvs6_csp_rules/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (I formal-nonempty-type-decl nil dynetwork nil)
    (network const-decl "process[event]" dynetwork nil)
    (event type-decl nil dynetwork nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (M formal-type-decl nil dynetwork nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (set type-eq-decl nil sets nil)
    (complement const-decl "set" sets nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (every_implies3 formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (T!1 skolem-const-decl "setof[event]" dynetwork nil)
    (a!1 skolem-const-decl "event" dynetwork nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (restriction_elim formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (enemy_prop2 formula-decl nil dynetwork nil)
    (Gen const-decl "set[M]" dynetwork nil)
    (RankEnemy const-decl "setof[trace[event]]" dynetwork nil)
    (RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (uniform_par23 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (Interleave const-decl "process[T]" multipar "../pvs6_csp_rules/")
    (INIT formal-const-decl "setof[M]" dynetwork nil)
    (enemy const-decl "[setof[M] -> process[event]]" dynetwork nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (union const-decl "set" sets nil)
    (restriction_par formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (sat_transitive2 formula-decl nil satisfaction
     "../pvs6_csp_rules/"))
   nil)))

