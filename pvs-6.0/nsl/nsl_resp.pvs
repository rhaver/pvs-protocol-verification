% NSLPK protocol

nsl_responder : THEORY

BEGIN

 Identity	: NONEMPTY_TYPE
 Nonce		: NONEMPTY_TYPE

 Message : DATATYPE WITH SUBTYPES Key, Nonkey
 BEGIN
  user		(x_user		: Identity)	: user?		: Nonkey
  nonce		(x_nonce	: Nonce)	: nonce?	: Nonkey
  conc		(x_conc, y_conc : Message)	: conc?		: Nonkey
  public	(x_public	: Identity)	: public?	: Key
  secret	(x_secret 	: Identity)	: secret?	: Key
  code		(x_code	: Key, y_code : Message): code?		: Nonkey
  running_init (x_i, x_j : Identity, n : Nonce) : running_init? : Nonkey
  commit_resp  (x_i, x_j : Identity, n : Nonce) : commit_resp?  : Nonkey
 END Message


%------------------------------
%  identities of two agents 
%------------------------------

 a : Identity

 b_ax : AXIOM (EXISTS (b : Identity) : b /= a)
 b : { i : Identity | i /= a }


%---------------------------------------------------
%  partitioning the nonces among users and roles
%---------------------------------------------------

 IMPORTING partition

 Role : TYPE = {init, resp}

 IRpart : [[Identity,Role] -> setof[Nonce]] = pt[[Identity,Role], Nonce]

 Nonces(i : Identity, r : Role) : NONEMPTY_TYPE =
                (IRpart(i,r))

 nb : Nonces(b, resp)

 n_prop : LEMMA FORALL (i: Identity, r: Role): (r /= resp) => NOT pt[[Identity,Role], Nonce](i,r)(nb)
 n_orig : LEMMA FORALL (i: Identity): IRpart(i,resp)(nb) => i = b


%-------------------------
%  encryption function
%-------------------------

 E(k : Key, m : Message) : Message =
  CASES m OF
   code(k1, m1) : CASES k1 OF
     public(i) : IF k = secret(i) THEN m1 ELSE code(k, m) ENDIF,
     secret(i) : IF k = public(i) THEN m1 ELSE code(k, m) ENDIF
    ENDCASES
   ELSE code(k, m)
  ENDCASES


%----------------------
%  generates relation
%----------------------

 k : VAR Key
 m1, m2 : VAR Message

 Gen(S : setof[Message], m : Message) : INDUCTIVE bool =
	S(m)
  OR	(EXISTS m1, m2 : Gen(S, m1) AND Gen(S, m2) AND m = conc(m1, m2))
  OR	(EXISTS m1 : Gen(S, conc(m1, m)))
  OR	(EXISTS m2 : Gen(S, conc(m, m2)))
  OR	(EXISTS m1, k : Gen(S, m1) AND Gen(S, k) AND m = E(k, m1))

;|-(S : setof[Message], m : Message) : bool = Gen(S, m)


%-----------------------------
%  enemy's initial knowledge
%-----------------------------

 INIT(m : Message) : bool =
  CASES m OF
   user(z) : TRUE,
   nonce(z) : z /= nb,
   public(z) : TRUE,
   secret(z) : z /= a AND z /= b
   ELSE FALSE
  ENDCASES

 IMPORTING dynetwork[Identity, Message, INIT, |-]


%-------------------------
%  message abbreviations
%-------------------------

 v, w, x, y, z : VAR Message

 conc2(x, y) : Message = conc(x, y)
 conc3(x, y, z) : Message = conc(conc(x, y), z)
 conc4(w, x, y, z) : Message = conc(conc(conc(w, x), y), z)
 conc5(v, w, x, y, z) : Message = conc(conc(conc(conc(v, w), x), y), z)


%-------------------------
%  process definitions
%-------------------------

 UINIT(i : Identity, ni : Nonces(i, init)) : process[event] =
  Choice! (j : Identity) :
   (trans(i, j, E(public(j), conc(nonce(ni), user(i)))) >>
    Choice! (n : Nonce) :
     (rec(i, j, E(public(i), conc3(nonce(ni), nonce(n), user(j)))) >>
      (signal(running_init(i, j, n)) >>
       (trans(i, j, E(public(j), nonce(n))) >> Stop[event]))))

 URESP(i : Identity, nr : Nonces(i, resp)) : process[event] =
  IF (nr = nb) THEN
   Choice! (n : Nonce) :
    (rec(i, a, E(public(i), conc(nonce(n), user(a)))) >>
     (trans(i, a, E(public(a), conc3(nonce(n), nonce(nr), user(i)))) >>
      (rec(i, a, E(public(i), nonce(nr))) >>
       (signal(commit_resp(a, i, nr)) >> Stop[event]))))
  ELSE
   Choice! (j : Identity, n : Nonce) :
    (rec(i, j, E(public(i), conc(nonce(n), user(j)))) >>
     (trans(i, j, E(public(j), conc3(nonce(n), nonce(nr), user(i)))) >>
      (rec(i, j, E(public(i), nonce(nr))) >>
       (signal(commit_resp(j, i, nr)) >> Stop[event]))))
  ENDIF

 USER(i : Identity) : process[event] =
		(Interleave! (ni : Nonces(i, init)) : UINIT(i, ni))
				//
	        (Interleave! (nr : Nonces(i, resp)) : URESP(i, nr))


%-------------------------
%  authentication sets 
%-------------------------

 T : set[event] = { e : event | e = signal(commit_resp(a, b, nb)) }

 R : set[event] = { e : event | e = signal(running_init(a, b, nb)) }


%-----------------
%  rank function
%-----------------

 rho(m : Message) : RECURSIVE bool =
  CASES m OF
   user(z) : TRUE,
   nonce(z) : z /= nb,
   public(z) : TRUE,
   secret(z) : z /= a AND z /= b,
   conc(z1, z2) : rho(z1) AND rho(z2),
   code(z1, z2) : rho(z2) OR
	(z1 = public(a) AND (EXISTS (n : Nonce) : z2 = conc3(nonce(n), nonce(nb), user(b)))),
   commit_resp(z1, z2, z3) : z1 /= a OR z2 /= b OR z3 /= nb
   ELSE TRUE
  ENDCASES
 MEASURE m BY <<


%-----------------
%  main theorem
%-----------------

 authenticated : THEOREM network(USER) |> auth(T, R)


END nsl_responder
