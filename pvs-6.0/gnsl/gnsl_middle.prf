(gnsl_middle
 (p_TCC1 0
  (p_TCC1-1 nil 3397757162 ("" (inst 1 "3") nil nil)
   ((nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (mid_TCC1 0
  (mid_TCC1-1 nil 3397757162
   ("" (typepred "p") (("" (ground) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil))
   nil))
 (mid_TCC2 0
  (mid_TCC2-1 nil 3397906934
   ("" (typepred "p") (("" (inst 1 "1") (("" (ground) nil nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil))
   nil))
 (hu_TCC1 0
  (hu_TCC1-1 nil 3397757162
   ("" (inst 1 "LAMBDA (k: nat_to_p): k") (("" (skosimp) nil nil)) nil)
   ((/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (IRpart_TCC1 0
  (IRpart_TCC1-1 nil 3397906934 ("" (inst 1 "(2,0,0)") nil nil)
   ((Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (Nonces_TCC1 0
  (Nonces_TCC1-1 nil 3398251641
   ("" (skolem-typepred)
    (("" (typepred "pt[[nat_from_2, Identity, Role], Nonce]")
      (("" (delete -1)
        (("" (inst -1 "(P!1, u!1, r!1)")
          (("" (skolem!)
            (("" (inst 1 "n!1")
              (("" (expand "IRpart") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (setof type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (n!1 skolem-const-decl "Nonce" gnsl_middle nil)
    (r!1 skolem-const-decl "Role" gnsl_middle nil)
    (u!1 skolem-const-decl "Identity" gnsl_middle nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (n_mid_TCC1 0
  (n_mid_TCC1-1 nil 3397757162
   ("" (typepred "mid") (("" (ground) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil))
   nil))
 (n_prop 0
  (n_prop-1 nil 3398251302
   ("" (skolem-typepred)
    (("" (typepred "n_mid")
      (("" (typepred "pt[[nat_from_2, Identity, Role], Nonce]")
        (("" (delete -2)
          (("" (inst -1 "(P!1, u!1, r!1)" "(p, hu(mid), mid)" "n_mid")
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (n_orig 0
  (n_orig-1 nil 3398252246
   ("" (skosimp)
    (("" (typepred "pt[[nat_from_2, Identity, Role], Nonce]" "n_mid")
      (("" (delete -2)
        (("" (inst -1 "(P!1, u!1, r!1)" "(p, hu(mid), mid)" "n_mid")
          (("" (expand "IRpart") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (setof type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (E_TCC1 0
  (E_TCC1-1 nil 3397757162 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_middle nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (Key type-eq-decl nil gnsl_middle nil))
   nil))
 (select_right_nonce1_TCC1 0
  (select_right_nonce1_TCC1-1 nil 3397900557
   ("" (skolem-typepred) (("" (ground) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (select_right_nonce1_TCC2 0
  (select_right_nonce1_TCC2-1 nil 3397929062 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (select_right_nonce1 0
  ("select_right_nonce1-1" nil 3397932261
   ("" (skolem!)
    (("" (typepred "P!1" "p" "mid")
      (("" (prop)
        (("1" (replace* -1)
          (("1" (delete -1)
            (("1" (rewrite "div_cancel2") (("1" (ground) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "((mid-1)/(p-2))*(P!1-2)>=0")
          (("1" (rewrite "nonneg_floor_is_nat") nil nil)
           ("2" (delete 2)
            (("2"
              (lemma "pos_times_le" ("x" "(mid-1)/(p-2)" "y" "P!1-2"))
              (("2" (ground)
                (("2" (delete 1 3 4)
                  (("2" (rewrite "div_mult_pos_le2") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (case "P!1=2")
          (("1" (replace* -1) (("1" (ground) nil nil)) nil)
           ("2" (typepred "floor(((mid-1)/(p-2))*(P!1-2))")
            (("2" (case "((mid-1)/(p-2))*(P!1-2) < P!1-1")
              (("1" (delete -3) (("1" (ground) nil nil)) nil)
               ("2" (delete -1 -2 3)
                (("2" (case "((mid-1)/(p-2))*(P!1-2) < P!1-2")
                  (("1" (ground) nil nil)
                   ("2" (delete 2)
                    (("2" (rewrite "div_mult_pos_lt2" :dir rl)
                      (("2" (rewrite "div_simp")
                        (("2" (rewrite "div_mult_pos_lt1") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_floor_is_nat judgement-tcc nil floor_ceil nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (pos_times_le formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_cancel2 formula-decl nil real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (select_right_nonce2_TCC1 0
  (select_right_nonce2_TCC1-1 nil 3397974503 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (select_right_nonce2_TCC2 0
  (select_right_nonce2_TCC2-1 nil 3397978509 ("" (subtype-tcc) nil nil)
   ((rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (select_right_nonce2 0
  ("select_right_nonce2-1" nil 3397974914
   ("" (skolem!)
    (("" (typepred "P!1" "p" "mid")
      (("" (prop)
        (("1" (replace* -1)
          (("1" (delete -1)
            (("1" (rewrite "div_cancel2") (("1" (ground) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "((mid - 1) / (p - 2)) * (P!1 - 2) >= 0")
          (("1" (rewrite "floor_plus_int") (("1" (ground) nil nil))
            nil)
           ("2" (delete 2)
            (("2"
              (lemma "pos_times_le" ("x" "(mid-1)/(p-2)" "y" "P!1-2"))
              (("2" (ground)
                (("2" (delete 1 3 4)
                  (("2" (rewrite "div_mult_pos_le2") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (typepred "floor(((mid - 1) / (p - 2)) * (P!1 - 2))")
          (("3" (rewrite "floor_plus_int")
            (("3" (case "((mid-1)/(p-2))*(P!1-2) < P!1-2")
              (("1" (ground) nil nil)
               ("2" (delete -1 -2 2)
                (("2" (rewrite "div_mult_pos_lt2" :dir rl)
                  (("2" (rewrite "div_simp")
                    (("2" (rewrite "div_mult_pos_lt1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_simp formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (integer nonempty-type-from-decl nil integers nil)
    (pos_times_le formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_cancel2 formula-decl nil real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (select_right_nonce3_TCC1 0
  (select_right_nonce3_TCC1-1 nil 3397929062 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (select_right_nonce3_TCC2 0
  (select_right_nonce3_TCC2-1 nil 3397932581 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (select_right_nonce3 0
  (select_right_nonce3-1 nil 3397921697
   ("" (skolem!)
    (("" (typepred "P!1" "p" "mid")
      (("" (prop)
        (("1" (replace* -1)
          (("1" (delete -1)
            (("1" (rewrite "div_cancel2") (("1" (ground) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "(mid/(p-1))*(P!1-1) >= 0")
          (("1" (rewrite "nonneg_floor_is_nat") nil nil)
           ("2" (delete 2)
            (("2" (lemma "pos_times_le" ("x" "mid/(p-1)" "y" "P!1-1"))
              (("2" (ground)
                (("2" (delete 1 3 4)
                  (("2" (rewrite "div_mult_pos_le2") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (typepred "floor((mid/(p-1))*(P!1-1))")
          (("3" (case "(mid/(p-1))*(P!1-1) < P!1-1")
            (("1" (delete -3) (("1" (ground) nil nil)) nil)
             ("2" (delete -1 -2 2)
              (("2" (rewrite "div_mult_pos_lt2" :dir rl)
                (("2" (rewrite "div_simp")
                  (("2" (rewrite "div_mult_pos_lt1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (div_simp formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_floor_is_nat judgement-tcc nil floor_ceil nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (pos_times_le formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   shostak))
 (UROLE_INIT_TCC1 0
  (UROLE_INIT_TCC1-1 nil 3397757162
   ("" (skolem!)
    (("" (typepred "il!1" "P!1")
      (("" (delete -1)
        (("" (lemma "length_non_zero" ("l" "il!1"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (UROLE_INIT_TCC2 0
  (UROLE_INIT_TCC2-1 nil 3397757162 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (UROLE_INIT_TCC3 0
  (UROLE_INIT_TCC3-1 nil 3397757162
   ("" (skolem!)
    (("" (prop)
      (("1" (typepred "mid") (("1" (ground) nil nil)) nil)
       ("2" (typepred "mid")
        (("2" (typepred "nl!1")
          (("2" (typepred "P!1")
            (("2" (delete -2)
              (("2" (ground)
                (("2" (replace -2 1)
                  (("2" (delete -2) (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (UROLE_INIT_TCC4 0
  (UROLE_INIT_TCC4-1 nil 3397900111
   ("" (skolem!)
    (("" (use "select_right_nonce1")
      (("" (typepred "nl!1")
        (("" (delete -1) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((select_right_nonce1 formula-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil))
 (UROLE_INIT_TCC5 0
  (UROLE_INIT_TCC5-1 nil 3662270947
   ("" (skolem-typepred)
    (("" (delete -2 -4)
      (("" (use "select_right_nonce1") (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (select_right_nonce1 formula-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (UROLE_LAST_TCC1 0
  (UROLE_LAST_TCC1-1 nil 3397757162 ("" (subtype-tcc) nil nil) nil
   nil))
 (UROLE_LAST_TCC2 0
  (UROLE_LAST_TCC2-1 nil 3397757162
   ("" (skolem!) (("" (typepred "p") (("" (ground) nil nil)) nil)) nil)
   ((p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_LAST_TCC3 0
  (UROLE_LAST_TCC3-1 nil 3397931718
   ("" (skolem!)
    (("" (typepred "mid" "p" "P!1" "nl!1")
      (("" (replace* -6)
        (("" (delete -5 -6)
          (("" (prop)
            (("1" (case "(mid / (p - 1)) * (P!1 - 1) >= 0")
              (("1" (rewrite "nonneg_floor_is_nat") nil nil)
               ("2" (delete 2)
                (("2"
                  (lemma "pos_times_le"
                   ("x" "mid / (p - 1)" "y" "P!1-1"))
                  (("2" (ground)
                    (("2" (delete 1 3 4)
                      (("2" (rewrite "div_mult_pos_le2") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "floor((mid / (p - 1)) * (P!1 - 1))")
              (("2" (case "(mid / (p - 1)) * (P!1 - 1) < P!1-1")
                (("1" (delete -3) (("1" (ground) nil nil)) nil)
                 ("2" (delete -1 -2 2)
                  (("2" (rewrite "div_mult_pos_lt2" :dir rl)
                    (("2" (rewrite "div_simp")
                      (("2" (rewrite "div_mult_pos_lt1") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_simp formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (div_mult_pos_lt2 formula-decl nil real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_floor_is_nat judgement-tcc nil floor_ceil nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (pos_times_le formula-decl nil real_props nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (UROLE_LAST_TCC4 0
  (UROLE_LAST_TCC4-1 nil 3662270947 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (LastMessage_TCC1 0
  (LastMessage_TCC1-1 nil 3397757162 ("" (subtype-tcc) nil nil) nil
   nil))
 (LastMessage_TCC2 0
  (LastMessage_TCC2-1 nil 3397757162
   ("" (skosimp)
    (("" (typepred "il2!1")
      (("" (delete -1)
        (("" (lemma "length_non_zero" ("l" "il2!1"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat_1_to type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (LastMessage_TCC3 0
  (LastMessage_TCC3-1 nil 3397979774
   ("" (skosimp)
    (("" (typepred "il2!1" "P!1" "i!1")
      (("" (delete -1 -4 1)
        (("" (lemma "length_non_zero" ("l" "il2!1"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat_1_to type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC1 0
  (UROLE_MIDDLE_TCC1-1 nil 3397757162 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC2 0
  (UROLE_MIDDLE_TCC2-1 nil 3398252299
   ("" (skosimp*)
    (("" (typepred "nnI!1")
      (("" (lemma "n_orig" ("P" "P!1" "u" "u!1" "r" "i!1"))
        (("" (typepred "k!1" "i!1" "mid") (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n_orig formula-decl nil gnsl_middle nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC3 0
  (UROLE_MIDDLE_TCC3-1 nil 3397757162 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC4 0
  (UROLE_MIDDLE_TCC4-1 nil 3397757162 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC5 0
  (UROLE_MIDDLE_TCC5-1 nil 3398252335
   ("" (skosimp*)
    (("" (typepred "nnI!1")
      (("" (lemma "n_orig" ("P" "P!1" "u" "u!1" "r" "i!1"))
        (("" (typepred "k!1" "i!1") (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n_orig formula-decl nil gnsl_middle nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC6 0
  (UROLE_MIDDLE_TCC6-1 nil 3397978509
   ("" (skosimp)
    (("" (skolem! 2)
      (("" (prop)
        (("1" (ground) nil nil)
         ("2" (expand "length" 1)
          (("2" (typepred "nl2!1" "P!1" "i!1")
            (("2" (delete -1)
              (("2" (replace -1 1)
                (("2" (delete -1)
                  (("2" (lemma "select_right_nonce2" ("P" "P!1"))
                    (("2" (flatten)
                      (("2" (delete -1 -2 2) (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC7 0
  (UROLE_MIDDLE_TCC7-1 nil 3397979774
   ("" (skosimp*)
    (("" (typepred "il2!1" "P!1")
      (("" (delete -1 -3 -5)
        (("" (lemma "length_non_zero" ("l" "il2!1"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC8 0
  (UROLE_MIDDLE_TCC8-1 nil 3397979774
   ("" (skosimp*) (("" (typepred "k!1") (("" (ground) nil nil)) nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (UROLE_MIDDLE_TCC9 0
  (UROLE_MIDDLE_TCC9-1 nil 3398252373
   ("" (skosimp*)
    (("" (typepred "k!1" "i!1" "nnI!1")
      (("" (lemma "n_orig" ("P" "P!1" "u" "u!1" "r" "i!1"))
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (n_orig formula-decl nil gnsl_middle nil))
   nil))
 (UROLE_MIDDLE_TCC10 0
  (UROLE_MIDDLE_TCC10-1 nil 3398088005 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC11 0
  (UROLE_MIDDLE_TCC11-1 nil 3398088007
   ("" (skolem-typepred)
    (("" (lemma "n_orig" ("P" "P!1" "u" "u!1")) (("" (grind) nil nil))
      nil))
    nil)
   ((n_orig formula-decl nil gnsl_middle nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC12 0
  (UROLE_MIDDLE_TCC12-1 nil 3398252412
   ("" (skolem-typepred)
    (("" (lemma "n_prop" ("P" "P!1" "u" "u!1")) (("" (grind) nil nil))
      nil))
    nil)
   ((n_prop formula-decl nil gnsl_middle nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (UROLE_MIDDLE_TCC13 0
  (UROLE_MIDDLE_TCC13-1 nil 3398088007 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (UROLE_MIDDLE_TCC14 0
  (UROLE_MIDDLE_TCC14-1 nil 3398088007
   ("" (skolem-typepred)
    (("" (prop)
      (("" (skolem-typepred)
        (("" (lemma "length_non_zero" ("l" "il2!1"))
          (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (UROLE_MIDDLE_TCC15 0
  (UROLE_MIDDLE_TCC15-1 nil 3398088007
   ("" (skosimp*)
    (("" (lemma "select_right_nonce2" ("P" "P!1"))
      (("" (flatten)
        (("" (typepred nl2!1 P!1)
          (("" (delete -1 -4 1)
            (("" (expand length 1) (("" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (select_right_nonce2 formula-decl nil gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC16 0
  (UROLE_MIDDLE_TCC16-1 nil 3398088007 ("" (grind) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil))
   nil))
 (UROLE_MIDDLE_TCC17 0
  (UROLE_MIDDLE_TCC17-1 nil 3398088007
   ("" (skosimp*)
    (("" (typepred nl1!1)
      (("" (replace -2 3)
        (("" (lemma "select_right_nonce2" ("P" "P!1"))
          (("" (flatten)
            (("" (delete -1 -4 -5 2) (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_1_to type-eq-decl nil gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (select_right_nonce2 formula-decl nil gnsl_middle nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC18 0
  (UROLE_MIDDLE_TCC18-1 nil 3398088007
   ("" (skosimp*)
    (("" (typepred "il2!1" "i!1" "P!1")
      (("" (delete -1 -3 1 2)
        (("" (lemma "length_non_zero" ("l" "il2!1"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat_1_to type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (USER_TCC1 0
  (USER_TCC1-1 nil 3397757162 ("" (existence-tcc) nil nil) nil nil))
 (USER_TCC2 0
  (USER_TCC2-1 nil 3398183104
   ("" (skolem-typepred)
    (("" (prop)
      (("" (case "3 <= P!1")
        (("1" (delete -3 1)
          (("1" (typepred "pt[[nat_from_2, Identity, Role], Nonce]")
            (("1" (delete -1)
              (("1" (inst -1 "(P!1, u!1, 1)")
                (("1" (skolem! -1)
                  (("1" (inst 1 "(1, n!1)")
                    (("1" (expand "IRpart") (("1" (propax) nil nil))
                      nil)
                     ("2" (delete -1 -3) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (delete 2) (("2" (inst 1 "0") nil nil)) nil))
            nil))
          nil)
         ("2" (delete -1 3) (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n!1 skolem-const-decl "Nonce" gnsl_middle nil)
    (u!1 skolem-const-decl "Identity" gnsl_middle nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (setof type-eq-decl nil defined_types nil)
    (pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (hu_list_exists_TCC1 0
  (hu_list_exists_TCC1-1 nil 3397757162 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil))
 (hu_list_exists 0
  (hu_list_exists-1 nil 3397933004
   ("" (typepred "p")
    (("" (inst 1 "gen_f_list(p, 0, hu)")
      (("1" (split)
        (("1" (rewrite "gen1") nil nil)
         ("2" (skolem!) (("2" (rewrite "gen2") nil nil)) nil))
        nil)
       ("2" (ground) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (gen_f_list def-decl "list[T]" listprops nil)
    (gen2 formula-decl nil listprops nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (gen1 formula-decl nil listprops nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil))
   shostak))
 (hu_list_TCC1 0
  (hu_list_TCC1-1 nil 3397757162
   ("" (lemma "hu_list_exists") (("" (propax) nil nil)) nil)
   ((hu_list_exists formula-decl nil gnsl_middle nil)) nil))
 (cons_hu_list 0
  (cons_hu_list-1 nil 3397933043
   ("" (typepred "hu_list")
    (("" (delete -1 -3)
      (("" (prop)
        (("" (expand "length" -1) (("" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_middle nil))
   shostak))
 (rho_premid_TCC1 0
  (rho_premid_TCC1-1 nil 3398182964 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_middle
     nil))
   nil))
 (rho_premid_TCC2 0
  (rho_premid_TCC2-1 nil 3398182964 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_middle
     nil))
   nil))
 (rho_premid_TCC3 0
  (rho_premid_TCC3-1 nil 3398182964 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_middle nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_middle
     nil))
   nil))
 (rho_premid_TCC4 0
  (rho_premid_TCC4-1 nil 3398182964 ("" (subtype-tcc) nil nil) nil
   nil))
 (rho_premid_TCC5 0
  (rho_premid_TCC5-1 nil 3398182964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_middle nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (rho_premid_TCC6 0
  (rho_premid_TCC6-1 nil 3398182964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_middle nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (rho_premid_TCC7 0
  (rho_premid_TCC7-1 nil 3398182964 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_middle nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (rho_postmid_TCC1 0
  (rho_postmid_TCC1-1 nil 3399647881 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_middle
     nil))
   nil))
 (rho_postmid_TCC2 0
  (rho_postmid_TCC2-1 nil 3399647881 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_middle
     nil))
   nil))
 (rho_postmid_TCC3 0
  (rho_postmid_TCC3-1 nil 3399647881 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_middle nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_middle
     nil))
   nil))
 (rho_postmid_TCC4 0
  (rho_postmid_TCC4-1 nil 3399647881 ("" (subtype-tcc) nil nil) nil
   nil))
 (rho_postmid_TCC5 0
  (rho_postmid_TCC5-1 nil 3399656908 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_middle nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (restrictpremid_init 0
  (restrictpremid_init-1 nil 3399207208
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (expand "RankUser")
        (("" (interleaving2)
          (("" (expand "UROLE_INIT")
            (("" (typepred "P!1")
              (("" (lemma "select_right_nonce1" ("P" "P!1"))
                (("" (flatten)
                  (("" (delete -1)
                    (("" (choice3)
                      (("1" (prefix)
                        (("1" (delete -1 -2 2 3)
                          (("1" (typepred "i!1" "mid")
                            (("1"
                              (lemma "n_prop"
                               ("P" "P!1" "u" "u!1" "r" "0"))
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (delete 2 3)
                          (("2" (prefix)
                            (("2" (delete 2 3)
                              (("2"
                                (prefix)
                                (("1"
                                  (delete - 2 3)
                                  (("1"
                                    (expand "rho_premid")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete 3)
                                  (("2"
                                    (prefix)
                                    (("1"
                                      (delete 2 3)
                                      (("1"
                                        (expand "R_premid")
                                        (("1"
                                          (case
                                           "v!1=0 AND cons(u!1,i!2`2)=hu_list AND nth(i!2`1,floor(((mid-1)/(p-2))*P!1-2*((mid-1)/(p-2))))=n_mid")
                                          (("1"
                                            (delete -2 -3 -4 -5 1)
                                            (("1" (ground) nil nil))
                                            nil)
                                           ("2"
                                            (delete -2 -3 3)
                                            (("2"
                                              (expand "E")
                                              (("2"
                                                (comment
                                                 "explore the 3 options that could make -1 true")
                                                (("2"
                                                  (expand
                                                   "rho_premid"
                                                   -1)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (delete 1)
                                                      (("1"
                                                        (lemma
                                                         "elt_append2"
                                                         ("l1"
                                                          "(:i!1:)"
                                                          "l2"
                                                          "i!2`1"
                                                          "t"
                                                          "n_mid"))
                                                        (("1"
                                                          (grind
                                                           :exclude
                                                           "elt")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp*)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("2"
                                                          (decompose-equality
                                                           -2)
                                                          (("2"
                                                            (decompose-equality
                                                             -1)
                                                            (("2"
                                                              (decompose-equality
                                                               -2)
                                                              (("2"
                                                                (typepred
                                                                 "nl1!1"
                                                                 "nl2!1"
                                                                 "i!2`1"
                                                                 "i!2`2"
                                                                 "i!3"
                                                                 "hu_list"
                                                                 "v!1"
                                                                 "p")
                                                                (("2"
                                                                  (delete
                                                                   -1
                                                                   -3
                                                                   -5
                                                                   -7
                                                                   -11)
                                                                  (("2"
                                                                    (comment
                                                                     "prove all three conjuncts in 1, except for one (which is necessary to prove 2)")
                                                                    (("2"
                                                                      (comment
                                                                       "establish some equalities first")
                                                                      (("2"
                                                                        (case
                                                                         "P!1=p"
                                                                         "i!3=p"
                                                                         "rem(p)(i!3)=0")
                                                                        (("1"
                                                                          (comment
                                                                           "split up 1")
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "rho_premid"
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (delete
                                                                                   2
                                                                                   3)
                                                                                  (("1"
                                                                                    (comment
                                                                                     "the next message is sent to 1")
                                                                                    (("1"
                                                                                      (inst
                                                                                       2
                                                                                       "1")
                                                                                      (("1"
                                                                                        (replace*
                                                                                         -1
                                                                                         -2
                                                                                         -3)
                                                                                        (("1"
                                                                                          (split)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -11
                                                                                               "1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -14
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -11
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (delete
                                                                                                     -
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             1
                                                                                             "cdr(nl1!1)"
                                                                                             "nl2!1")
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -11
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -16
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -11
                                                                                                       1
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -14
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           -
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (decompose-equality
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "mid")
                                                                                                  (("2"
                                                                                                    (delete
                                                                                                     -2
                                                                                                     -3
                                                                                                     -4
                                                                                                     -5
                                                                                                     -7
                                                                                                     -8
                                                                                                     -9
                                                                                                     -10
                                                                                                     -11
                                                                                                     -12
                                                                                                     -13
                                                                                                     -14
                                                                                                     -15
                                                                                                     -16
                                                                                                     -18
                                                                                                     -19
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "length_non_zero"
                                                                                                       ("l"
                                                                                                        "nl1!1"))
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "append"
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          (("2"
                                                                                                            (decompose-equality
                                                                                                             -5)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (rewrite
                                                                                               "length_cdr"
                                                                                               1)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -4
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (typepred
                                                                                               "mid")
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "length_non_zero"
                                                                                                 ("l"
                                                                                                  "nl1!1"))
                                                                                                (("3"
                                                                                                  (delete
                                                                                                   -3
                                                                                                   -4
                                                                                                   -5
                                                                                                   -6
                                                                                                   -8
                                                                                                   -9
                                                                                                   -10
                                                                                                   -11
                                                                                                   -12
                                                                                                   -13
                                                                                                   -14
                                                                                                   -15
                                                                                                   -16
                                                                                                   -17
                                                                                                   -18
                                                                                                   -19
                                                                                                   -20
                                                                                                   2)
                                                                                                  (("3"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (comment
                                                                                         "this is why we needed the v!1=0 consequent")
                                                                                        (("2"
                                                                                          (delete
                                                                                           -)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          ";;; this is why we needed the v!1=0 consequent"))
                                                                                        nil))
                                                                                      ";;; the next message is sent to 1"))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (replace*
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -11
                                                                                 "0")
                                                                                (("2"
                                                                                  (expand
                                                                                   "remove"
                                                                                   -14)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -14
                                                                                     1)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -16
                                                                                       1)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -11
                                                                                         1
                                                                                         rl)
                                                                                        (("2"
                                                                                          (delete
                                                                                           -
                                                                                           2)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nth")
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "list_cons_eta")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               "select_right_nonce1"
                                                                               ("P"
                                                                                "P!1"))
                                                                              (("3"
                                                                                (prop)
                                                                                (("3"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "equality_nth"
                                                                                     ("l1"
                                                                                      "cons(i!1,i!2`1)"
                                                                                      "l2"
                                                                                      "append(nl1!1,cons(n_mid,nl2!1))"))
                                                                                    (("3"
                                                                                      (prop)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         "mid")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "nth_append"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -8
                                                                                             -1)
                                                                                            (("1"
                                                                                              (delete
                                                                                               -2
                                                                                               -3
                                                                                               -4
                                                                                               -5
                                                                                               -6
                                                                                               -7
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11
                                                                                               -12
                                                                                               -13
                                                                                               -14
                                                                                               -15
                                                                                               -16
                                                                                               -17
                                                                                               -18
                                                                                               -19
                                                                                               -20
                                                                                               -21
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (delete
                                                                                               -1
                                                                                               -2
                                                                                               -3
                                                                                               -4
                                                                                               -5
                                                                                               -6
                                                                                               -7
                                                                                               -10
                                                                                               -11
                                                                                               -13
                                                                                               -14
                                                                                               -15
                                                                                               -16
                                                                                               -17
                                                                                               -18
                                                                                               -19
                                                                                               -20
                                                                                               -21
                                                                                               2
                                                                                               3)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -9
                                                                                             1)
                                                                                            (("2"
                                                                                              (replace*
                                                                                               -5
                                                                                               -6)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            ";;; split up 1"))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("2"
                                                                            (delete
                                                                             -
                                                                             2
                                                                             3)
                                                                            (("2"
                                                                              (rewrite
                                                                               "rem_def")
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "1")
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (delete
                                                                           -5
                                                                           -6
                                                                           -7
                                                                           -8
                                                                           -9
                                                                           -10
                                                                           -11
                                                                           -12
                                                                           -14
                                                                           -15
                                                                           2
                                                                           3)
                                                                          (("3"
                                                                            (lemma
                                                                             "equality_length"
                                                                             ("l1"
                                                                              "cons(i!1,i!2`1)"
                                                                              "l2"
                                                                              "append(nl1!1,cons(n_mid,nl2!1))"))
                                                                            (("3"
                                                                              (prop)
                                                                              (("3"
                                                                                (rewrite
                                                                                 "length_append"
                                                                                 -1)
                                                                                (("3"
                                                                                  (expand
                                                                                   "length"
                                                                                   -1
                                                                                   (1
                                                                                    2))
                                                                                  (("3"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (delete
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           -5
                                                                           -6
                                                                           -8
                                                                           -9
                                                                           -12
                                                                           -13
                                                                           -14
                                                                           2
                                                                           3)
                                                                          (("4"
                                                                            (replace
                                                                             -4
                                                                             -1)
                                                                            (("4"
                                                                              (rewrite
                                                                               "length_remove"
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replace
                                                                                 -2
                                                                                 -1)
                                                                                (("1"
                                                                                  (delete
                                                                                   -2
                                                                                   -3
                                                                                   -4)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (delete
                                                                                 -1
                                                                                 -2
                                                                                 -4
                                                                                 2)
                                                                                (("2"
                                                                                  (nonemptylist
                                                                                   "hu_list")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        ";;; establish some equalities first"))
                                                                      ";;; prove all three conjuncts in 1, except for one (which is necessary to prove 2)"))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (delete -2 +)
                                                      (("3"
                                                        (skosimp*)
                                                        (("3"
                                                          (decompose-equality
                                                           -2)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  ";;; explore the 3 options that could make -1 true"))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (delete - 2 3 4)
                                      (("2" (stop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "i!2`1")
                        (("2" (delete -1 -3 -5 2)
                          (("2" (ground) nil nil)) nil))
                        nil)
                       ("3" (typepred "i!2`2")
                        (("3" (delete -1 -3 -4 -5 2)
                          (("3" (ground) nil nil)) nil))
                        nil)
                       ("4" (delete - 2) (("4" (grind) nil nil)) nil)
                       ("5" (delete -1 -2 2)
                        (("5" (nonemptylist "i!2`2") nil nil)) nil)
                       ("6" (delete - 2) (("6" (grind) nil nil)) nil)
                       ("7" (delete -1 -2 2)
                        (("7" (skolem!)
                          (("7" (nonemptylist "il!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((event type-decl nil dynetwork nil)
    (\|- const-decl "bool" gnsl_middle nil)
    (INIT const-decl "bool" gnsl_middle nil)
    (Message type-decl nil gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (UROLE_INIT const-decl "process[event]" gnsl_middle nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (R_premid const-decl "set[event]" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (member const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rho_premid def-decl "bool" gnsl_middle nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_middle nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (nth def-decl "T" list_props nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_middle nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_middle
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_middle nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_middle
     nil)
    (E const-decl "Message" gnsl_middle nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_middle nil)
    (n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]"
     gnsl_middle nil)
    (length_remove formula-decl nil listprops nil)
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (equality_length formula-decl nil listprops nil)
    (rem_def formula-decl nil modulo_arithmetic nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil listprops nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i!2 skolem-const-decl "[{x: list[Nonce] | length(x) = P!1 - 1},
 {x: list[Identity] | length(x) = P!1 - 1}]" gnsl_middle nil)
    (i!1 skolem-const-decl "Nonces(P!1, u!1, 0)" gnsl_middle nil)
    (u!1 skolem-const-decl "Identity" gnsl_middle nil)
    (equality_nth formula-decl nil listprops nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (v!1 skolem-const-decl "below[mid]" gnsl_middle nil)
    (Message_public_extensionality formula-decl nil gnsl_middle nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (Message_conc_extensionality formula-decl nil gnsl_middle nil)
    (Message_ilist_extensionality formula-decl nil gnsl_middle nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Message_nlist_extensionality formula-decl nil gnsl_middle nil)
    (nl1!1 skolem-const-decl "{x: list[Nonce] | length(x) = mid}"
     gnsl_middle nil)
    (nl2!1 skolem-const-decl
     "{x: list[Nonce] | length(x) = -1 - mid + i!3}" gnsl_middle nil)
    (i!3 skolem-const-decl "{x: nat | mid < x AND x <= p}" gnsl_middle
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_middle
     nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_middle
     nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (append def-decl "list[T]" list_props nil)
    (elt_append2 formula-decl nil listprops nil)
    (n_prop formula-decl nil gnsl_middle nil)
    (elt const-decl "bool" listprops nil)
    (remove def-decl "list[T]" listprops nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_middle nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (select_right_nonce1 formula-decl nil gnsl_middle nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (RankUser const-decl "setof[trace[event]]" dynetwork nil))
   nil))
 (restrictpremid_middle 0
  ("restrictpremid_middle-1" "" 3399727349
   ("" (auto-rewrite-theory "sets")
    (("" (auto-rewrite "USER_TCC2")
      (("" (skosimp)
        (("" (expand "RankUser")
          (("" (interleaving2)
            (("" (typepred "i!1`1" "P!1")
              (("" (lemma "select_right_nonce2" ("P" "P!1"))
                (("" (flatten)
                  (("" (delete -1)
                    (("" (expand "UROLE_MIDDLE")
                      (("" (lift-if)
                        (("" (prop)
                          (("1"
                            (case "P!1=p AND u!1=hu(mid) AND i!1`1=mid")
                            (("1" (flatten)
                              (("1"
                                (choice3)
                                (("1"
                                  (replace* -1 -2 -3 -4)
                                  (("1"
                                    (prefix)
                                    (("1"
                                      (delete 2 3)
                                      (("1"
                                        (prefix)
                                        (("1"
                                          (delete -6 -7 -8 2 3)
                                          (("1"
                                            (grind
                                             :if-match
                                             nil
                                             :exclude
                                             ("remove" "elt"))
                                            (("1"
                                              (comment
                                               "contradiction in -5 and i!1`1=mid")
                                              (("1"
                                                (typepred "i!2`1")
                                                (("1"
                                                  (delete
                                                   -1
                                                   -3
                                                   -5
                                                   -8
                                                   -9
                                                   -10
                                                   -13
                                                   -15
                                                   -17
                                                   +)
                                                  (("1"
                                                    (decompose-equality
                                                     -5)
                                                    (("1"
                                                      (decompose-equality
                                                       -1)
                                                      (("1"
                                                        (replace -1 -3)
                                                        (("1"
                                                          (rewrite
                                                           "length_append"
                                                           -3)
                                                          (("1"
                                                            (delete
                                                             -1
                                                             -2
                                                             -7
                                                             -9
                                                             -10)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                ";;; contradiction in -5 and i!1`1=mid"))
                                              nil)
                                             ("2"
                                              (comment
                                               "contradiction in -9")
                                              (("2"
                                                (decompose-equality -9)
                                                nil
                                                ";;; contradiction in -9"))
                                              nil)
                                             ("3"
                                              (comment
                                               "prove the outgoing message conforms to 1")
                                              (("3"
                                                (delete 2 3)
                                                (("3"
                                                  (typepred
                                                   "i!2`1"
                                                   "i!2`3"
                                                   "i!2`4"
                                                   "hu_list")
                                                  (("3"
                                                    (delete
                                                     -1
                                                     -3
                                                     -6
                                                     -9)
                                                    (("3"
                                                      (inst 1 "mid+1")
                                                      (("3"
                                                        (comment
                                                         "simplify using the rem-function")
                                                        (("3"
                                                          (case
                                                           "rem(p)(mid+1)=mid+1")
                                                          (("1"
                                                            (replace*
                                                             -1)
                                                            (("1"
                                                              (split)
                                                              (("1"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (inst
                                                                   -6
                                                                   "0")
                                                                  (("1"
                                                                    (delete
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10
                                                                     -11
                                                                     -13
                                                                     -14
                                                                     -15
                                                                     2)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 1
                                                                 "i!2`1"
                                                                 "null")
                                                                (("2"
                                                                  (decompose-equality
                                                                   1)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("2"
                                                                      (comment
                                                                       "prove the equality of these lists by equality of their lengths and elements")
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_nth_equality[Identity]"
                                                                         1)
                                                                        (("1"
                                                                          (rewrite
                                                                           "length_append"
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "length_remove"
                                                                             1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_cdr"
                                                                               1)
                                                                              (("1"
                                                                                (delete
                                                                                 -1
                                                                                 -2
                                                                                 -4
                                                                                 -6
                                                                                 -8
                                                                                 -9
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14
                                                                                 -15
                                                                                 2
                                                                                 3)
                                                                                (("1"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skolem-typepred)
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append"
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_cdr"
                                                                               -1)
                                                                              (("2"
                                                                                (delete
                                                                                 2
                                                                                 3)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "nth_append"
                                                                                   ("l1"
                                                                                    "i!2`3"
                                                                                    "l2"
                                                                                    "cons(hu(mid), cdr(i!2`4))"
                                                                                    "i"
                                                                                    "i!3"))
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (delete
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "nth_remove"
                                                                                         ("l"
                                                                                          "hu_list"
                                                                                          "i"
                                                                                          "1+mid"
                                                                                          "j"
                                                                                          "i!3"))
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (delete
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace*
                                                                                               -4
                                                                                               -6
                                                                                               -11
                                                                                               -13)
                                                                                              (("1"
                                                                                                (delete
                                                                                                 -2
                                                                                                 -3
                                                                                                 -4
                                                                                                 -6
                                                                                                 -8
                                                                                                 -10
                                                                                                 -12
                                                                                                 -14)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "i!3<mid OR i!3=mid OR i!3>mid")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (grind
                                                                                                         :exclude
                                                                                                         "nth")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (delete
                                                                                                     -
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (delete
                                                                                           -2
                                                                                           -3
                                                                                           -5
                                                                                           -7
                                                                                           -9
                                                                                           -10
                                                                                           -12
                                                                                           -14
                                                                                           -15
                                                                                           -16
                                                                                           2)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (rewrite
                                                                                     "length_cdr"
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        ";;; prove the equality of these lists by equality of their lengths and elements"))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6
                                                             -7
                                                             -8
                                                             -9
                                                             -10
                                                             -11
                                                             -12
                                                             -13
                                                             -14
                                                             2
                                                             3)
                                                            (("2"
                                                              (rewrite
                                                               "rem_def")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "0")
                                                                (("2"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          ";;; simplify using the rem-function"))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                ";;; prove the outgoing message conforms to 1"))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (delete 2 3)
                                          (("2"
                                            (prefix)
                                            (("2"
                                              (delete -2 -7 -8 -9 +)
                                              (("2"
                                                (comment
                                                 "-1 should evaluate to false")
                                                (("2"
                                                  (grind
                                                   :exclude
                                                   ("remove" "elt"))
                                                  (("1"
                                                    (decompose-equality
                                                     -8)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "i!2`2"
                                                     "v!1")
                                                    (("2"
                                                      (delete
                                                       -1
                                                       -4
                                                       -6
                                                       -8
                                                       -10
                                                       -13
                                                       -15
                                                       -17)
                                                      (("2"
                                                        (comment
                                                         "contradiction in i!3=mid, -2 and -5")
                                                        (("2"
                                                          (case
                                                           "i!3=mid")
                                                          (("1"
                                                            (delete
                                                             -2
                                                             -4
                                                             -5
                                                             -7
                                                             -8
                                                             -9
                                                             -10)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (decompose-equality
                                                             -6)
                                                            (("2"
                                                              (decompose-equality
                                                               -2)
                                                              (("2"
                                                                (lemma
                                                                 "equality_length"
                                                                 ("l1"
                                                                  "cons(n_mid,i!2`2)"
                                                                  "l2"
                                                                  "append(nl1!1,cons(n_mid,nl2!1))"))
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (delete
                                                                         -2
                                                                         -3
                                                                         -5
                                                                         -8
                                                                         -11)
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          ";;; contradiction in i!3=mid, -2 and -5"))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "elt")
                                                    (("3"
                                                      (inst 1 "0")
                                                      (("3"
                                                        (expand "nth")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  ";;; -1 should evaluate to false"))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete -1 -2 -3 -4 -5 -6 -7 -9 2 3)
                                  (("2"
                                    (nonemptylist "i!2`4")
                                    nil
                                    nil))
                                  nil)
                                 ("3" (nonemptylist "i!2`3") nil nil)
                                 ("4"
                                  (delete - 2 3)
                                  (("4"
                                    (skosimp* 1)
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (delete - 2 3)
                                  (("5"
                                    (skosimp*)
                                    (("5" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("6"
                                  (skolem!)
                                  (("6"
                                    (delete
                                     -1
                                     -2
                                     -3
                                     -4
                                     -5
                                     -6
                                     -7
                                     -9
                                     2
                                     3)
                                    (("6"
                                      (nonemptylist "il2!1")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("7"
                                  (delete - 2 3)
                                  (("7"
                                    (skosimp*)
                                    (("7"
                                      (typepred "k!1")
                                      (("7" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("8"
                                  (delete - 2 3)
                                  (("8"
                                    (skosimp*)
                                    (("8"
                                      (typepred "k!1")
                                      (("8" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete -2 -3 -4 -5 -6 -7 2 3)
                              (("2"
                                (typepred "i!1`2")
                                (("2"
                                  (lemma
                                   "n_orig"
                                   ("P" "P!1" "u" "u!1" "r" "i!1`1"))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "mid")
                              (("3"
                                (delete -1 -3 -4 -5 -6 -7 -8 2 3)
                                (("3" (ground) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (choice3)
                            (("1" (prefix)
                              (("1"
                                (delete 2 3)
                                (("1"
                                  (prefix)
                                  (("1"
                                    (delete -3 -4 2 3)
                                    (("1"
                                      (expand "E")
                                      (("1"
                                        (expand "rho_premid" -1)
                                        (("1"
                                          (comment
                                           "3 different cases are to be distinguished amongst for the (assumed) validity of the received message")
                                          (("1"
                                            (split)
                                            (("1"
                                              (comment
                                               "n_mid is not contained in a list of nonces")
                                              (("1"
                                                (expand "rho_premid" 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (delete 2 3)
                                                    (("1"
                                                      (lemma
                                                       "elt_append3"
                                                       ("l1"
                                                        "i!2`1"
                                                        "l2"
                                                        "(:i!1`2:)"
                                                        "t"
                                                        "n_mid"))
                                                      (("1"
                                                        (lemma
                                                         "elt_singleton"
                                                         ("t1"
                                                          "i!1`2"
                                                          "t2"
                                                          "n_mid"))
                                                        (("1"
                                                          (grind
                                                           :exclude
                                                           "elt")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                ";;; n_mid is not contained in a list of nonces"))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (decompose-equality -2)
                                                (("2"
                                                  (decompose-equality
                                                   -1)
                                                  (("2"
                                                    (decompose-equality
                                                     -2)
                                                    (("2"
                                                      (typepred
                                                       "i!3"
                                                       "i!2`1"
                                                       "i!2`3"
                                                       "i!2`4"
                                                       "nl1!1"
                                                       "nl2!1"
                                                       "hu_list")
                                                      (("2"
                                                        (delete
                                                         -2
                                                         -3
                                                         -5
                                                         -7
                                                         -9
                                                         -11
                                                         -13
                                                         -15
                                                         -18
                                                         -20
                                                         -22
                                                         +)
                                                        (("2"
                                                          (comment
                                                           "contradiction in -1, -10 and i!3=i!1`1")
                                                          (("2"
                                                            (case
                                                             "P!1=p"
                                                             "i!1`1=i!3")
                                                            (("1"
                                                              (lemma
                                                               "select_right_nonce2"
                                                               ("P"
                                                                "P!1"))
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (delete
                                                                   -2
                                                                   -3
                                                                   -5
                                                                   -7
                                                                   -8
                                                                   -9
                                                                   -10
                                                                   -11
                                                                   -12
                                                                   -13
                                                                   -14
                                                                   -16)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -4)
                                                                    (("1"
                                                                      (delete
                                                                       -1)
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -10
                                                               -3)
                                                              (("2"
                                                                (rewrite
                                                                 "length_append"
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -3
                                                                   1)
                                                                  (("2"
                                                                    (delete
                                                                     -1
                                                                     -2
                                                                     -4
                                                                     -5
                                                                     -8
                                                                     -9
                                                                     -10
                                                                     -11
                                                                     -12)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               "equality_length"
                                                               ("l1"
                                                                "append(i!2`3,i!2`4)"
                                                                "l2"
                                                                "remove(hu_list,rem(p)(i!3))"))
                                                              (("3"
                                                                (prop)
                                                                (("3"
                                                                  (rewrite
                                                                   "length_append"
                                                                   -1)
                                                                  (("3"
                                                                    (rewrite
                                                                     "length_remove"
                                                                     -1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (delete
                                                                       -2
                                                                       -3
                                                                       -6
                                                                       -7
                                                                       -9
                                                                       -10
                                                                       -11
                                                                       -12)
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "length_non_zero"
                                                                       ("l"
                                                                        "hu_list"))
                                                                      (("2"
                                                                        (typepred
                                                                         "p")
                                                                        (("2"
                                                                          (delete
                                                                           -3
                                                                           -4
                                                                           -5
                                                                           -6
                                                                           -7
                                                                           -8
                                                                           -9
                                                                           -11
                                                                           -12
                                                                           -13
                                                                           -14
                                                                           2)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            ";;; contradiction in -1, -10 and i!3=i!1`1"))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (skosimp*)
                                              (("3"
                                                (delete
                                                 -1
                                                 -3
                                                 -4
                                                 -5
                                                 -6
                                                 +)
                                                (("3"
                                                  (assert :flush? t)
                                                  (("3"
                                                    (decompose-equality
                                                     -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            ";;; 3 different cases are to be distinguished amongst for the (assumed) validity of the received message"))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete 2 3)
                                    (("2"
                                      (prefix)
                                      (("2"
                                        (delete 2 3)
                                        (("2"
                                          (prefix)
                                          (("1"
                                            (delete - 2 3 4 5)
                                            (("1"
                                              (expand "rho_premid")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (delete -2 3)
                                            (("2"
                                              (comment
                                               "consider the case where the process is blocked and the case where the process is not blocked")
                                              (("2"
                                                (expand "R_premid")
                                                (("2"
                                                  (case
                                                   "i!1`1=v!1 AND append(i!2`3,cons(u!1,i!2`4))=hu_list AND nth(cons(i!1`2,i!2`2),floor(1+((mid-1)/(p-2))*(P!1-2))-i!1`1)=n_mid")
                                                  (("1"
                                                    (delete
                                                     -2
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     -8
                                                     1
                                                     3
                                                     4)
                                                    (("1"
                                                      (ground)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete -2 3)
                                                    (("2"
                                                      (expand "E")
                                                      (("2"
                                                        (expand
                                                         "rho_premid"
                                                         -1)
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (delete
                                                             -2
                                                             -3
                                                             -4
                                                             -5
                                                             -6
                                                             1
                                                             3
                                                             4)
                                                            (("1"
                                                              (expand
                                                               "LastMessage")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (prefix)
                                                                    (("1"
                                                                      (delete
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (lemma
                                                                         "elt_append2"
                                                                         ("l1"
                                                                          "(:i!1`2:)"
                                                                          "l2"
                                                                          "i!2`2"
                                                                          "t"
                                                                          "n_mid"))
                                                                        (("1"
                                                                          (grind
                                                                           :exclude
                                                                           "elt")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       -
                                                                       2)
                                                                      (("2"
                                                                        (stop)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (prefix)
                                                                    (("1"
                                                                      (delete
                                                                       2
                                                                       3)
                                                                      (("1"
                                                                        (lemma
                                                                         "elt_append2"
                                                                         ("l1"
                                                                          "(:i!1`2:)"
                                                                          "l2"
                                                                          "i!2`2"
                                                                          "t"
                                                                          "n_mid"))
                                                                        (("1"
                                                                          (grind
                                                                           :exclude
                                                                           "elt")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       -
                                                                       2
                                                                       3)
                                                                      (("2"
                                                                        (stop)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (skosimp*)
                                                            (("2"
                                                              (delete
                                                               -1
                                                               -3
                                                               -4
                                                               -5
                                                               -6
                                                               -7
                                                               +)
                                                              (("2"
                                                                (decompose-equality
                                                                 -1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (comment
                                                             "the process is not blocked, and the message previously received is escaped in rho")
                                                            (("3"
                                                              (comment
                                                               "establish some convenient equalities first")
                                                              (("3"
                                                                (skosimp*)
                                                                (("3"
                                                                  (decompose-equality
                                                                   -1)
                                                                  (("3"
                                                                    (assert
                                                                     :flush?
                                                                     t)
                                                                    (("3"
                                                                      (decompose-equality
                                                                       -2)
                                                                      (("3"
                                                                        (decompose-equality
                                                                         -1)
                                                                        (("3"
                                                                          (decompose-equality
                                                                           -2)
                                                                          (("3"
                                                                            (typepred
                                                                             "i!2`2"
                                                                             "i!2`3"
                                                                             "i!2`4"
                                                                             "nl1!1"
                                                                             "nl2!1"
                                                                             "hu_list"
                                                                             "v!1"
                                                                             "i!3")
                                                                            (("3"
                                                                              (delete
                                                                               -1
                                                                               -3
                                                                               -5
                                                                               -7
                                                                               -9
                                                                               -11
                                                                               -20
                                                                               -21)
                                                                              (("3"
                                                                                (case
                                                                                 "P!1=p"
                                                                                 "i!3=i!1`1")
                                                                                (("1"
                                                                                  (comment
                                                                                   "split LastMessage up, since one part will be trivial")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "LastMessage")
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (split
                                                                                         2)
                                                                                        (("1"
                                                                                          (delete
                                                                                           -3
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           -8
                                                                                           -9
                                                                                           -11
                                                                                           -13
                                                                                           -14
                                                                                           -15
                                                                                           -16
                                                                                           -17
                                                                                           -18
                                                                                           2
                                                                                           3
                                                                                           4)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "mid")
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (delete
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (split
                                                                                           2)
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (prefix)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "E"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "rho_premid"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       1
                                                                                                       2
                                                                                                       5
                                                                                                       6
                                                                                                       7
                                                                                                       8)
                                                                                                      (("1"
                                                                                                        (comment
                                                                                                         "next message is sent to i!1`1+1")
                                                                                                        (("1"
                                                                                                          (comment
                                                                                                           "the consequent 2 is needed for the TCC's from instantianting 1 with i!1`1+1")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "i!1`1+1")
                                                                                                            (("1"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (decompose-equality
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "equality_nth"
                                                                                                                   ("l1"
                                                                                                                    "append(i!2`3,i!2`4)"
                                                                                                                    "l2"
                                                                                                                    "remove(hu_list,i!3)"))
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "i!1`1")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "nth_append"
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "nth_remove"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -10
                                                                                                                             "1+i!1`1")
                                                                                                                            (("1"
                                                                                                                              (delete
                                                                                                                               -2
                                                                                                                               -3
                                                                                                                               -4
                                                                                                                               -6
                                                                                                                               -7
                                                                                                                               -8
                                                                                                                               -9
                                                                                                                               -11
                                                                                                                               -12
                                                                                                                               -13
                                                                                                                               -14
                                                                                                                               -15
                                                                                                                               -16
                                                                                                                               -17
                                                                                                                               -18
                                                                                                                               -19
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (rewrite
                                                                                                                         "length_append"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (delete
                                                                                                                           -1
                                                                                                                           -2
                                                                                                                           -3
                                                                                                                           -6
                                                                                                                           -7
                                                                                                                           -8
                                                                                                                           -9
                                                                                                                           -10
                                                                                                                           -11
                                                                                                                           -12
                                                                                                                           -13
                                                                                                                           -14
                                                                                                                           -15
                                                                                                                           -16
                                                                                                                           -18
                                                                                                                           2
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (case
                                                                                                                 "cons?(nl1!1)")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "cdr(nl1!1)"
                                                                                                                   "nl2!1")
                                                                                                                  (("1"
                                                                                                                    (decompose-equality
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (decompose-equality
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "length(append(i!2`3,cons(u!1,cdr(i!2`4))))=p-1")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "length_nth_equality[Identity]"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "length_remove"
                                                                                                                             1
                                                                                                                             :dir
                                                                                                                             rl)
                                                                                                                            (("1"
                                                                                                                              (delete
                                                                                                                               -2
                                                                                                                               -3
                                                                                                                               -4
                                                                                                                               -5
                                                                                                                               -6
                                                                                                                               -7
                                                                                                                               -8
                                                                                                                               -9
                                                                                                                               -11
                                                                                                                               -12
                                                                                                                               -13
                                                                                                                               -14
                                                                                                                               -15
                                                                                                                               -16
                                                                                                                               -17
                                                                                                                               -18
                                                                                                                               -19
                                                                                                                               -20
                                                                                                                               2
                                                                                                                               3)
                                                                                                                              (("1"
                                                                                                                                (ground)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (delete
                                                                                                                               -1
                                                                                                                               -2
                                                                                                                               -3
                                                                                                                               -5
                                                                                                                               -6
                                                                                                                               -7
                                                                                                                               -8
                                                                                                                               -9
                                                                                                                               -10
                                                                                                                               -11
                                                                                                                               -12
                                                                                                                               -13
                                                                                                                               -14
                                                                                                                               -15
                                                                                                                               -16
                                                                                                                               -17
                                                                                                                               -18
                                                                                                                               -19
                                                                                                                               2
                                                                                                                               3
                                                                                                                               4)
                                                                                                                              (("2"
                                                                                                                                (nonemptylist
                                                                                                                                 "hu_list")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skolem-typepred)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "nth_append"
                                                                                                                               ("l1"
                                                                                                                                "i!2`3"
                                                                                                                                "l2"
                                                                                                                                "cons(u!1,cdr(i!2`4))"
                                                                                                                                "i"
                                                                                                                                "i!4"))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (delete
                                                                                                                                   -1
                                                                                                                                   -4
                                                                                                                                   -7
                                                                                                                                   -10
                                                                                                                                   -11
                                                                                                                                   -14
                                                                                                                                   -15
                                                                                                                                   -16
                                                                                                                                   -17
                                                                                                                                   -20
                                                                                                                                   2
                                                                                                                                   3)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "nth_remove"
                                                                                                                                     ("l"
                                                                                                                                      "hu_list"
                                                                                                                                      "i"
                                                                                                                                      "1+i!1`1"
                                                                                                                                      "j"
                                                                                                                                      "i!4"))
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (delete
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "nth"
                                                                                                                                           1
                                                                                                                                           2)
                                                                                                                                          (("1"
                                                                                                                                            (lemma
                                                                                                                                             "equality_nth"
                                                                                                                                             ("l1"
                                                                                                                                              "append(i!2`3,i!2`4)"
                                                                                                                                              "l2"
                                                                                                                                              "remove(hu_list,i!3)"))
                                                                                                                                            (("1"
                                                                                                                                              (prop)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "i!4")
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "nth_append"
                                                                                                                                                   ("l1"
                                                                                                                                                    "i!2`3"
                                                                                                                                                    "l2"
                                                                                                                                                    "i!2`4"
                                                                                                                                                    "i"
                                                                                                                                                    "i!4"))
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     -2)
                                                                                                                                                    (("1"
                                                                                                                                                      (delete
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "nth_remove"
                                                                                                                                                         ("l"
                                                                                                                                                          "hu_list"
                                                                                                                                                          "i"
                                                                                                                                                          "i!3"
                                                                                                                                                          "j"
                                                                                                                                                          "i!4"))
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           -2)
                                                                                                                                                          (("1"
                                                                                                                                                            (delete
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "i!4<i!1`1 OR i!4=i!1`1 OR i!4>i!1`1")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -10
                                                                                                                                                                 "i!3")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "nth"
                                                                                                                                                                   -2
                                                                                                                                                                   2)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (grind
                                                                                                                                                                     :exclude
                                                                                                                                                                     ("nth"
                                                                                                                                                                      "append"
                                                                                                                                                                      "remove"))
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (delete
                                                                                                                                                                 -
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (ground)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (rewrite
                                                                                                                                                   "length_append"
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (delete
                                                                                                                                                     -3
                                                                                                                                                     -7
                                                                                                                                                     -8
                                                                                                                                                     -9
                                                                                                                                                     -10
                                                                                                                                                     -11
                                                                                                                                                     -12
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (ground)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (rewrite
                                                                                                                                 "length_append"
                                                                                                                                 -1)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (rewrite
                                                                                                                           "length_append"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "length"
                                                                                                                             1
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "length_cdr"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (delete
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -4
                                                                                                                                 -7
                                                                                                                                 -8
                                                                                                                                 -9
                                                                                                                                 -10
                                                                                                                                 -11
                                                                                                                                 -12
                                                                                                                                 -13
                                                                                                                                 -14
                                                                                                                                 -15
                                                                                                                                 -16
                                                                                                                                 -17
                                                                                                                                 -18
                                                                                                                                 -19
                                                                                                                                 2
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (decompose-equality
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (delete
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5
                                                                                                                         -6
                                                                                                                         -7
                                                                                                                         -8
                                                                                                                         -9
                                                                                                                         -10
                                                                                                                         -11
                                                                                                                         -12
                                                                                                                         -13
                                                                                                                         -15
                                                                                                                         -16
                                                                                                                         -17
                                                                                                                         -18
                                                                                                                         -19
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "append"
                                                                                                                           -2)
                                                                                                                          (("2"
                                                                                                                            (decompose-equality
                                                                                                                             -2)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (rewrite
                                                                                                                     "length_cdr"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (delete
                                                                                                                       -1
                                                                                                                       -3
                                                                                                                       -4
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -8
                                                                                                                       -9
                                                                                                                       -10
                                                                                                                       -11
                                                                                                                       -12
                                                                                                                       -13
                                                                                                                       -14
                                                                                                                       -15
                                                                                                                       -16
                                                                                                                       -17
                                                                                                                       -18
                                                                                                                       -19
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (delete
                                                                                                                   -1
                                                                                                                   -2
                                                                                                                   -3
                                                                                                                   -4
                                                                                                                   -5
                                                                                                                   -6
                                                                                                                   -7
                                                                                                                   -8
                                                                                                                   -9
                                                                                                                   -13
                                                                                                                   -14
                                                                                                                   -15
                                                                                                                   -16
                                                                                                                   -17
                                                                                                                   -18
                                                                                                                   2
                                                                                                                   3)
                                                                                                                  (("2"
                                                                                                                    (nonemptylist
                                                                                                                     "nl1!1")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            ";;; the consequent 2 is needed for the TCC's from instantianting 1 with i!1`1+1"))
                                                                                                          ";;; next message is sent to i!1`1+1"))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (delete
                                                                                                 -
                                                                                                 2
                                                                                                 3
                                                                                                 4
                                                                                                 5
                                                                                                 6)
                                                                                                (("2"
                                                                                                  (stop)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (delete
                                                                                             -6
                                                                                             -7
                                                                                             -10
                                                                                             -11
                                                                                             -12
                                                                                             -13
                                                                                             -16
                                                                                             -17
                                                                                             2
                                                                                             3
                                                                                             4)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "length_nth_equality[Identity]"
                                                                                               1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "length_append"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (delete
                                                                                                     -1
                                                                                                     -3
                                                                                                     -7
                                                                                                     -8
                                                                                                     -9
                                                                                                     -10
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skolem-typepred)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "length_append"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "equality_nth"
                                                                                                       ("l1"
                                                                                                        "append(i!2`3,i!2`4)"
                                                                                                        "l2"
                                                                                                        "remove(hu_list,i!3)"))
                                                                                                      (("2"
                                                                                                        (prop)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "nth_append"
                                                                                                           ("l1"
                                                                                                            "i!2`3"
                                                                                                            "l2"
                                                                                                            "cons(u!1,i!2`4)"
                                                                                                            "i"
                                                                                                            "i!4"))
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (delete
                                                                                                               -1
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "nth_append"
                                                                                                                 ("l1"
                                                                                                                  "i!2`3"
                                                                                                                  "l2"
                                                                                                                  "i!2`4"))
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "nth_remove"
                                                                                                                   ("l"
                                                                                                                    "hu_list"
                                                                                                                    "i"
                                                                                                                    "i!3"))
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -11
                                                                                                                     "i!3")
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -11
                                                                                                                       -13
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -13
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nth"
                                                                                                                           1
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "i!4<i!1`1 OR i!4=i!1`1 OR i!4>i!1`1")
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (grind
                                                                                                                                 :exclude
                                                                                                                                 ("nth"
                                                                                                                                  "remove"
                                                                                                                                  "append"))
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind
                                                                                                                                 :exclude
                                                                                                                                 ("nth"
                                                                                                                                  "remove"
                                                                                                                                  "append"))
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (case
                                                                                                                                 "0<=i!4-1 AND i!4-1<p-1")
                                                                                                                                (("1"
                                                                                                                                  (flatten
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -6
                                                                                                                                     "i!4-1")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -5
                                                                                                                                       "i!4-1")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -4
                                                                                                                                         "i!4-1")
                                                                                                                                        (("1"
                                                                                                                                          (ground)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (delete
                                                                                                                                           -3
                                                                                                                                           -4
                                                                                                                                           -5
                                                                                                                                           -6
                                                                                                                                           -7
                                                                                                                                           -8
                                                                                                                                           -9
                                                                                                                                           -10
                                                                                                                                           -11
                                                                                                                                           -13
                                                                                                                                           -14
                                                                                                                                           -15
                                                                                                                                           -16
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (ground)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (delete
                                                                                                                                         -3
                                                                                                                                         -4
                                                                                                                                         -5
                                                                                                                                         -6
                                                                                                                                         -7
                                                                                                                                         -9
                                                                                                                                         -12
                                                                                                                                         -13
                                                                                                                                         -14
                                                                                                                                         -15
                                                                                                                                         -16
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (ground)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (delete
                                                                                                                                       -3
                                                                                                                                       -4
                                                                                                                                       -5
                                                                                                                                       -6
                                                                                                                                       -7
                                                                                                                                       -9
                                                                                                                                       -12
                                                                                                                                       -13
                                                                                                                                       -14
                                                                                                                                       -15
                                                                                                                                       -16
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (rewrite
                                                                                                                                         "length_append"
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (ground)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (delete
                                                                                                                                   -2
                                                                                                                                   -3
                                                                                                                                   -4
                                                                                                                                   -6
                                                                                                                                   -8
                                                                                                                                   -11
                                                                                                                                   -12
                                                                                                                                   -13
                                                                                                                                   -14
                                                                                                                                   -15
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     "i!1`1")
                                                                                                                                    (("2"
                                                                                                                                      (ground)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (delete
                                                                                                                               -
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (ground)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lemma
                                                                                             "select_right_nonce2"
                                                                                             ("P"
                                                                                              "P!1"))
                                                                                            (("3"
                                                                                              (delete
                                                                                               -4
                                                                                               -5
                                                                                               -6
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11
                                                                                               -12
                                                                                               -13
                                                                                               -15
                                                                                               -16
                                                                                               -17
                                                                                               -18
                                                                                               -19
                                                                                               2
                                                                                               3
                                                                                               4)
                                                                                              (("3"
                                                                                                (prop)
                                                                                                (("3"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (replace
                                                                                                     -7
                                                                                                     1)
                                                                                                    (("3"
                                                                                                      (replace*
                                                                                                       -4)
                                                                                                      (("3"
                                                                                                        (rewrite
                                                                                                         "nth_append"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           1
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (delete
                                                                                                             -1
                                                                                                             -2
                                                                                                             -3
                                                                                                             -4
                                                                                                             -5
                                                                                                             -7)
                                                                                                            (("1"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (delete
                                                                                                             -1
                                                                                                             -2
                                                                                                             -3
                                                                                                             -4
                                                                                                             -5
                                                                                                             -7
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (ground)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    ";;; split LastMessage up, since one part will be trivial"))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "equality_length"
                                                                                   ("l1"
                                                                                    "cons(i!1`2,i!2`2)"
                                                                                    "l2"
                                                                                    "append(nl1!1,cons(n_mid,nl2!1))"))
                                                                                  (("2"
                                                                                    (delete
                                                                                     -4
                                                                                     -5
                                                                                     -8
                                                                                     -9
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     -14
                                                                                     -15
                                                                                     -16
                                                                                     -17
                                                                                     -18
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("2"
                                                                                      (prop)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "length_append"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1
                                                                                           (1
                                                                                            2))
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (lemma
                                                                                   "equality_length"
                                                                                   ("l1"
                                                                                    "append(i!2`3,i!2`4)"
                                                                                    "l2"
                                                                                    "remove(hu_list,i!3)"))
                                                                                  (("3"
                                                                                    (delete
                                                                                     -2
                                                                                     -5
                                                                                     -6
                                                                                     -8
                                                                                     -9
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     -14
                                                                                     -15
                                                                                     -16
                                                                                     -17
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("3"
                                                                                      (prop)
                                                                                      (("3"
                                                                                        (rewrite
                                                                                         "length_append"
                                                                                         -1)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "length_remove"
                                                                                           -1
                                                                                           :dir
                                                                                           rl)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "length_non_zero"
                                                                                             ("l"
                                                                                              "hu_list"))
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "p")
                                                                                              (("2"
                                                                                                (delete
                                                                                                 -3
                                                                                                 -4
                                                                                                 -5
                                                                                                 -7
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                ";;; establish some convenient equalities first"))
                                                              ";;; the process is not blocked, and the message previously received is escaped in rho"))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (prop)
                                                    (("3"
                                                      (typepred
                                                       "i!2`2")
                                                      (("3"
                                                        (delete
                                                         -1
                                                         -3
                                                         -4
                                                         -5
                                                         -6
                                                         -7
                                                         -9
                                                         -10
                                                         -11
                                                         2
                                                         3
                                                         4
                                                         5)
                                                        (("3"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("3"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                ";;; consider the case where the process is blocked and the case where the process is not blocked"))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "i!2`2")
                              (("2"
                                (delete -1 -3 -4 -6 -7 -8 2 3 4)
                                (("2"
                                  (expand "length" 1)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (delete -1 -2 -3 -4 2 3 4)
                              (("3" (nonemptylist "i!2`4") nil nil))
                              nil)
                             ("4" (typepred "i!2`3")
                              (("4"
                                (delete -1 -3 -4 -5 -6 -7 -8 2 3 4)
                                (("4" (ground) nil nil))
                                nil))
                              nil)
                             ("5" (skolem!)
                              (("5"
                                (typepred "nl2!1")
                                (("5"
                                  (delete -1 -3 -4 -6 -7 -8 2 3 4)
                                  (("5"
                                    (expand "length" 1)
                                    (("5" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (skolem!)
                              (("6"
                                (delete -1 -2 -3 -4 -6 2 3 4)
                                (("6" (nonemptylist "il2!1") nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (choice3)
                            (("1" (prefix)
                              (("1"
                                (delete 2 3)
                                (("1"
                                  (prefix)
                                  (("1"
                                    (delete - 2 3 4 5 6)
                                    (("1"
                                      (expand "rho_premid")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete 2 3)
                                    (("2"
                                      (prefix)
                                      (("1"
                                        (delete 2 3)
                                        (("1"
                                          (expand "E")
                                          (("1"
                                            (comment
                                             "consider the three cases which could make -1 true")
                                            (("1"
                                              (expand "rho_premid" -1)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (comment
                                                   "n_mid is not contained in any nonce list")
                                                  (("1"
                                                    (expand
                                                     "rho_premid"
                                                     1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (delete
                                                         -2
                                                         -3
                                                         -4
                                                         -5
                                                         -6
                                                         2
                                                         3
                                                         4
                                                         6)
                                                        (("1"
                                                          (lemma
                                                           "elt_append3"
                                                           ("l1"
                                                            "i!2`1"
                                                            "l2"
                                                            "(:i!1`2:)"
                                                            "t"
                                                            "n_mid"))
                                                          (("1"
                                                            (lemma
                                                             "elt_singleton"
                                                             ("t1"
                                                              "i!1`2"
                                                              "t2"
                                                              "n_mid"))
                                                            (("1"
                                                              (grind
                                                               :exclude
                                                               "elt")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    ";;; n_mid is not contained in any nonce list"))
                                                  nil)
                                                 ("2"
                                                  (skosimp*)
                                                  (("2"
                                                    (expand
                                                     "rho_premid"
                                                     1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (typepred
                                                         "i!2`1"
                                                         "i!2`3"
                                                         "i!2`4"
                                                         "hu_list")
                                                        (("2"
                                                          (delete
                                                           -1
                                                           -3
                                                           -5
                                                           -7
                                                           -12
                                                           -13
                                                           -14
                                                           1
                                                           3
                                                           5
                                                           6)
                                                          (("2"
                                                            (decompose-equality
                                                             -6)
                                                            (("2"
                                                              (decompose-equality
                                                               -7)
                                                              (("2"
                                                                (decompose-equality
                                                                 -1)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("2"
                                                                    (case
                                                                     "P!1=p"
                                                                     "i!3=i!1`1"
                                                                     "rem(p)(i!1`1)=i!1`1")
                                                                    (("1"
                                                                      (replace*
                                                                       -2
                                                                       -3)
                                                                      (("1"
                                                                        (replace*
                                                                         -1)
                                                                        (("1"
                                                                          (comment
                                                                           "the next message is sent to i=i!1`1+1")
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "i!1`1+1")
                                                                            (("1"
                                                                              (case
                                                                               "rem(p)(1+i!1`1)=i!1`1+1")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "equality_nth"
                                                                                     ("l1"
                                                                                      "append(i!2`3,i!2`4)"
                                                                                      "l2"
                                                                                      "remove(hu_list,i!1`1)"))
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "i!1`1")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "nth_append"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "nth_remove"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -13
                                                                                                   "i!1`1+1")
                                                                                                  (("1"
                                                                                                    (delete
                                                                                                     -2
                                                                                                     -3
                                                                                                     -4
                                                                                                     -5
                                                                                                     -6
                                                                                                     -7
                                                                                                     -8
                                                                                                     -9
                                                                                                     -10
                                                                                                     -11
                                                                                                     -12
                                                                                                     -14
                                                                                                     -15
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "length_append"
                                                                                           1)
                                                                                          (("2"
                                                                                            (delete
                                                                                             -1
                                                                                             -2
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -12
                                                                                             -13
                                                                                             -14
                                                                                             2
                                                                                             3)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   2)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "nl1!1"
                                                                                     "nl2!1")
                                                                                    (("2"
                                                                                      (delete
                                                                                       -1
                                                                                       -3)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "nl1!1"
                                                                                         "append(nl2!1,(:i!1`2:))")
                                                                                        (("1"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -8
                                                                                               1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "append_assoc"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "append"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "length_nth_equality[Identity]"
                                                                                               1)
                                                                                              (("1"
                                                                                                (delete
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "length_append"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "length_remove"
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "length_cdr"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           -1
                                                                                                           -2
                                                                                                           -3
                                                                                                           -4
                                                                                                           -5
                                                                                                           -6
                                                                                                           -7
                                                                                                           -8
                                                                                                           -9
                                                                                                           -10
                                                                                                           -14
                                                                                                           -15
                                                                                                           -16)
                                                                                                          (("1"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "length_non_zero"
                                                                                                       ("l"
                                                                                                        "hu_list"))
                                                                                                      (("2"
                                                                                                        (delete
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         -10
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13
                                                                                                         -15
                                                                                                         -17
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skolem-typepred)
                                                                                                (("2"
                                                                                                  (delete
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (rewrite
                                                                                                     "length_append"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "length_cdr"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "nth_append"
                                                                                                           ("l1"
                                                                                                            "i!2`3"
                                                                                                            "l2"
                                                                                                            "cons(u!1,cdr(i!2`4))"
                                                                                                            "i"
                                                                                                            "i!4"))
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (delete
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -4
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "nth_remove"
                                                                                                                   ("l"
                                                                                                                    "hu_list"
                                                                                                                    "i"
                                                                                                                    "1+i!1`1"
                                                                                                                    "j"
                                                                                                                    "i!4"))
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (delete
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "equality_nth"
                                                                                                                         ("l1"
                                                                                                                          "append(i!2`3,i!2`4)"
                                                                                                                          "l2"
                                                                                                                          "remove(hu_list,i!1`1)"))
                                                                                                                        (("1"
                                                                                                                          (prop)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "i!4")
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_append"
                                                                                                                               ("l1"
                                                                                                                                "i!2`3"
                                                                                                                                "l2"
                                                                                                                                "i!2`4"
                                                                                                                                "i"
                                                                                                                                "i!4"))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (delete
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "nth_remove"
                                                                                                                                     ("l"
                                                                                                                                      "hu_list"
                                                                                                                                      "i"
                                                                                                                                      "i!1`1"
                                                                                                                                      "j"
                                                                                                                                      "i!4"))
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (delete
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "nth"
                                                                                                                                           1
                                                                                                                                           2)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "nth"
                                                                                                                                             -1
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (replace*
                                                                                                                                               -13
                                                                                                                                               -14)
                                                                                                                                              (("1"
                                                                                                                                                (delete
                                                                                                                                                 -3
                                                                                                                                                 -4
                                                                                                                                                 -5
                                                                                                                                                 -7
                                                                                                                                                 -8
                                                                                                                                                 -9
                                                                                                                                                 -10
                                                                                                                                                 -12
                                                                                                                                                 -18)
                                                                                                                                                (("1"
                                                                                                                                                  (case
                                                                                                                                                   "i!4<i!1`1 OR i!4=i!1`1 OR i!4>i!1`1")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -9
                                                                                                                                                     "i!1`1")
                                                                                                                                                    (("1"
                                                                                                                                                      (grind
                                                                                                                                                       :exclude
                                                                                                                                                       ("nth"
                                                                                                                                                        "append"
                                                                                                                                                        "remove"))
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (delete
                                                                                                                                                     -
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (ground)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (delete
                                                                                                                                 -1
                                                                                                                                 -3
                                                                                                                                 -4
                                                                                                                                 -5
                                                                                                                                 -6
                                                                                                                                 -7
                                                                                                                                 -8
                                                                                                                                 -9
                                                                                                                                 -10
                                                                                                                                 -11
                                                                                                                                 -12
                                                                                                                                 -13
                                                                                                                                 -14
                                                                                                                                 -15
                                                                                                                                 -16
                                                                                                                                 -17
                                                                                                                                 -18
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (rewrite
                                                                                                                               "length_append"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (delete
                                                                                                                                 -2
                                                                                                                                 -3
                                                                                                                                 -4
                                                                                                                                 -5
                                                                                                                                 -6
                                                                                                                                 -7
                                                                                                                                 -8
                                                                                                                                 -9
                                                                                                                                 -10
                                                                                                                                 -11
                                                                                                                                 -12
                                                                                                                                 -13
                                                                                                                                 -14
                                                                                                                                 -15
                                                                                                                                 -16
                                                                                                                                 -17
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (ground)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (delete
                                                                                                                     -2
                                                                                                                     -3
                                                                                                                     -4
                                                                                                                     -5
                                                                                                                     -6
                                                                                                                     -7
                                                                                                                     -8
                                                                                                                     -9
                                                                                                                     -10
                                                                                                                     -11
                                                                                                                     -15
                                                                                                                     -16
                                                                                                                     -17
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (rewrite
                                                                                                               "length_cdr"
                                                                                                               1)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "length_append"
                                                                                           1)
                                                                                          (("2"
                                                                                            (delete
                                                                                             -1
                                                                                             -3
                                                                                             -4
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9
                                                                                             -10
                                                                                             -11
                                                                                             -12
                                                                                             -13
                                                                                             -14
                                                                                             -15
                                                                                             -16)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "select_right_nonce2"
                                                                                 ("P"
                                                                                  "p"))
                                                                                (("2"
                                                                                  (delete
                                                                                   -1
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -9
                                                                                   -10
                                                                                   -11
                                                                                   -12
                                                                                   -14
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "rem_def")
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "0")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "i!3")
                                                                              (("2"
                                                                                (delete
                                                                                 -2
                                                                                 -3
                                                                                 -5
                                                                                 -6
                                                                                 -7
                                                                                 -8
                                                                                 -9
                                                                                 -10
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -15
                                                                                 2)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            ";;; the next message is sent to i=i!1`1+1"))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       -1
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       -10
                                                                       -12
                                                                       2
                                                                       3)
                                                                      (("2"
                                                                        (rewrite
                                                                         "rem_def"
                                                                         1)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "0")
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (replace
                                                                       -3
                                                                       -5)
                                                                      (("3"
                                                                        (rewrite
                                                                         "length_append"
                                                                         -5)
                                                                        (("3"
                                                                          (expand
                                                                           "length"
                                                                           -5
                                                                           1)
                                                                          (("3"
                                                                            (typepred
                                                                             "nl1!1"
                                                                             "nl2!1")
                                                                            (("3"
                                                                              (delete
                                                                               -1
                                                                               -3
                                                                               -5
                                                                               -6
                                                                               -7
                                                                               -8
                                                                               -10
                                                                               -11
                                                                               -12
                                                                               -13
                                                                               -14
                                                                               -15
                                                                               2
                                                                               3)
                                                                              (("3"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (lemma
                                                                       "equality_length"
                                                                       ("l1"
                                                                        "append(i!2`3,i!2`4)"
                                                                        "l2"
                                                                        "remove(hu_list,rem(p)(i!3))"))
                                                                      (("4"
                                                                        (delete
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -9
                                                                         -10
                                                                         -11
                                                                         2
                                                                         3)
                                                                        (("4"
                                                                          (prop)
                                                                          (("4"
                                                                            (rewrite
                                                                             "length_append"
                                                                             -1)
                                                                            (("4"
                                                                              (rewrite
                                                                               "length_remove"
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "p")
                                                                                (("2"
                                                                                  (delete
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   2)
                                                                                  (("2"
                                                                                    (nonemptylist
                                                                                     "hu_list")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skosimp*)
                                                  (("3"
                                                    (delete
                                                     -1
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     -7
                                                     +)
                                                    (("3"
                                                      (comment
                                                       "contradiction in -1")
                                                      (("3"
                                                        (assert
                                                         :flush?
                                                         t)
                                                        (("3"
                                                          (decompose-equality
                                                           -1)
                                                          nil
                                                          nil))
                                                        ";;; contradiction in -1"))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              ";;; consider the three cases which could make -1 true"))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete 2 3)
                                        (("2"
                                          (prefix)
                                          (("2"
                                            (delete -2 2 3)
                                            (("2"
                                              (expand "E")
                                              (("2"
                                                (expand
                                                 "rho_premid"
                                                 -1)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (delete
                                                     -2
                                                     -3
                                                     -4
                                                     -5
                                                     -6
                                                     2
                                                     3
                                                     4)
                                                    (("1"
                                                      (expand
                                                       "LastMessage")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (prefix)
                                                            (("1"
                                                              (delete
                                                               2
                                                               3)
                                                              (("1"
                                                                (lemma
                                                                 "elt_append2"
                                                                 ("l1"
                                                                  "(:i!1`2:)"
                                                                  "l2"
                                                                  "i!2`2"
                                                                  "t"
                                                                  "n_mid"))
                                                                (("1"
                                                                  (grind
                                                                   :if-match
                                                                   nil
                                                                   :exclude
                                                                   "elt")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (delete
                                                               -
                                                               2
                                                               3)
                                                              (("2"
                                                                (stop)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (prefix)
                                                            (("1"
                                                              (delete
                                                               2
                                                               3)
                                                              (("1"
                                                                (lemma
                                                                 "elt_append2"
                                                                 ("l1"
                                                                  "(:i!1`2:)"
                                                                  "l2"
                                                                  "i!2`2"
                                                                  "t"
                                                                  "n_mid"))
                                                                (("1"
                                                                  (expand
                                                                   "E")
                                                                  (("1"
                                                                    (expand
                                                                     "rho_premid"
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (delete
                                                                         2
                                                                         3)
                                                                        (("1"
                                                                          (grind
                                                                           :exclude
                                                                           "elt")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (delete
                                                               -
                                                               2
                                                               3
                                                               4)
                                                              (("2"
                                                                (stop)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (delete
                                                       -1
                                                       -3
                                                       -4
                                                       -5
                                                       -6
                                                       -7
                                                       +)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (delete
                                                     -2
                                                     -3
                                                     -4
                                                     1
                                                     3
                                                     4)
                                                    (("3"
                                                      (skosimp*)
                                                      (("3"
                                                        (assert
                                                         :flush?
                                                         t)
                                                        (("3"
                                                          (decompose-equality
                                                           -2)
                                                          (("3"
                                                            (decompose-equality
                                                             -1)
                                                            (("3"
                                                              (decompose-equality
                                                               -2)
                                                              (("3"
                                                                (typepred
                                                                 "i!2`2"
                                                                 "i!2`3"
                                                                 "i!2`4"
                                                                 "nl1!1"
                                                                 "nl2!1"
                                                                 "hu_list"
                                                                 "v!1"
                                                                 "i!3")
                                                                (("3"
                                                                  (delete
                                                                   -1
                                                                   -3
                                                                   -5
                                                                   -7
                                                                   -9
                                                                   -11
                                                                   -13
                                                                   -15
                                                                   -19)
                                                                  (("3"
                                                                    (case
                                                                     "P!1=p"
                                                                     "i!3=i!1`1")
                                                                    (("1"
                                                                      (lemma
                                                                       "select_right_nonce2"
                                                                       ("P"
                                                                        "P!1"))
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (delete
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             -5
                                                                             -6
                                                                             -7
                                                                             -8
                                                                             -9
                                                                             -10
                                                                             -11
                                                                             -14
                                                                             -15
                                                                             -16
                                                                             -17)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "equality_length"
                                                                       ("l1"
                                                                        "cons(i!1`2,i!2`2)"
                                                                        "l2"
                                                                        "append(nl1!1,cons(n_mid,nl2!1))"))
                                                                      (("2"
                                                                        (prop)
                                                                        (("2"
                                                                          (rewrite
                                                                           "length_append"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1
                                                                             (1
                                                                              2))
                                                                            (("2"
                                                                              (delete
                                                                               -4
                                                                               -5
                                                                               -8
                                                                               -9
                                                                               -10
                                                                               -11
                                                                               -12
                                                                               -13
                                                                               -14
                                                                               2)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "equality_length"
                                                                       ("l1"
                                                                        "append(i!2`3,i!2`4)"
                                                                        "l2"
                                                                        "remove(hu_list,i!3)"))
                                                                      (("3"
                                                                        (prop)
                                                                        (("3"
                                                                          (rewrite
                                                                           "length_append"
                                                                           -1)
                                                                          (("3"
                                                                            (rewrite
                                                                             "length_remove"
                                                                             -1
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (delete
                                                                               -2
                                                                               -5
                                                                               -6
                                                                               -8
                                                                               -9
                                                                               -10
                                                                               -11
                                                                               -12
                                                                               -13
                                                                               2)
                                                                              (("1"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "p")
                                                                              (("2"
                                                                                (lemma
                                                                                 "length_non_zero"
                                                                                 ("l"
                                                                                  "hu_list"))
                                                                                (("2"
                                                                                  (delete
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -10
                                                                                   -11
                                                                                   -12
                                                                                   -13
                                                                                   -14
                                                                                   -15
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete -1 -2 -3 -5 2 3 4 5)
                              (("2" (nonemptylist "i!2`4") nil nil))
                              nil)
                             ("3" (typepred "i!2`1")
                              (("3"
                                (delete -1 -3 -4 -5 -6 -7 3 4 5)
                                (("3" (ground) nil nil))
                                nil))
                              nil)
                             ("4" (typepred "i!2`3")
                              (("4"
                                (delete -1 -3 -4 -5 -6 -7 2 3 4 5)
                                (("4" (ground) nil nil))
                                nil))
                              nil)
                             ("5" (skolem!)
                              (("5"
                                (delete -1 -2 -3 -5 2 3 4 5)
                                (("5" (nonemptylist "il2!1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (n_orig formula-decl nil gnsl_middle nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (equality_length formula-decl nil listprops nil)
    (elt const-decl "bool" listprops nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (Message_public_extensionality formula-decl nil gnsl_middle nil)
    (Message_conc_extensionality formula-decl nil gnsl_middle nil)
    (nth_append formula-decl nil listprops nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (i!3 skolem-const-decl
     "below[length[Identity](append(i!2`3, cons(hu(mid), cdr(i!2`4))))]"
     gnsl_middle nil)
    (i!2 skolem-const-decl "[{x: list[Nonce] | length(x) = i!1`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!1`1},
 {x: list[Identity] |
          (length(x) = i!1`1) AND
           (FORALL (k: below[i!1`1]): nth(x, k) = hu(k))},
 {x: list[Identity] |
          (length(x) = P!1 - 1 - i!1`1) AND
           (FORALL (k: below[P!1 - 1 - i!1`1]):
              nth(x, k) = hu(1 + k + i!1`1))}]" gnsl_middle nil)
    (i!1 skolem-const-decl "[k: nat_1_to(P!1), Nonces(P!1, u!1, k)]"
     gnsl_middle nil)
    (u!1 skolem-const-decl "Identity" gnsl_middle nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_middle nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nth_remove formula-decl nil listprops nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (length_remove formula-decl nil listprops nil)
    (length_nth_equality formula-decl nil listprops nil)
    (Message_ilist_extensionality formula-decl nil gnsl_middle nil)
    (rem_def formula-decl nil modulo_arithmetic nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_middle
     nil)
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (remove def-decl "list[T]" listprops nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_middle nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (E const-decl "Message" gnsl_middle nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_middle
     nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_middle nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_middle
     nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_middle nil)
    (append def-decl "list[T]" list_props nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (LastMessage const-decl "event" gnsl_middle nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (commit? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (commit adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (commit?)]" gnsl_middle nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]"
     gnsl_middle nil)
    (elt_append3 formula-decl nil listprops nil)
    (elt_singleton formula-decl nil listprops nil)
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (elt_append2 formula-decl nil listprops nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_middle
     nil)
    (equality_nth formula-decl nil listprops nil)
    (i!2 skolem-const-decl "[{x: list[Nonce] | length(x) = i!1`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!1`1},
 {x: list[Identity] | length(x) = i!1`1},
 {x: list[Identity] | length(x) = P!1 - 1 - i!1`1}]" gnsl_middle nil)
    (v!1 skolem-const-decl "below[mid]" gnsl_middle nil)
    (i!3 skolem-const-decl "{x: nat | 0 < x AND x <= v!1}" gnsl_middle
     nil)
    (nl1!1 skolem-const-decl "{x: list[Nonce] | length(x) = mid - i!3}"
     gnsl_middle nil)
    (Message_nlist_extensionality formula-decl nil gnsl_middle nil)
    (i!4 skolem-const-decl
     "below[length[Identity](append(i!2`3, cons(u!1, cdr(i!2`4))))]"
     gnsl_middle nil)
    (i!4 skolem-const-decl
     "below[length[Identity](append(i!2`3, cons(u!1, i!2`4)))]"
     gnsl_middle nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_middle nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (append_assoc formula-decl nil list_props nil)
    (i!4 skolem-const-decl
     "below[length[Identity](append(i!2`3, cons(u!1, cdr(i!2`4))))]"
     gnsl_middle nil)
    (nl2!1 skolem-const-decl
     "{x: list[Nonce] | length(x) = -1 - mid + i!3}" gnsl_middle nil)
    (i!3 skolem-const-decl "{x: nat | mid < x AND x <= p}" gnsl_middle
     nil)
    (i!2 skolem-const-decl "[{x: list[Nonce] | length(x) = i!1`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!1`1},
 {x: list[Identity] | length(x) = i!1`1},
 {x: list[Identity] | length(x) = P!1 - 1 - i!1`1}]" gnsl_middle nil)
    (select_right_nonce2 formula-decl nil gnsl_middle nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_premid def-decl "bool" gnsl_middle nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (TRUE const-decl "bool" booleans nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (set type-eq-decl nil sets nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (R_premid const-decl "set[event]" gnsl_middle nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (UROLE_MIDDLE const-decl "process[event]" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (Message type-decl nil gnsl_middle nil)
    (INIT const-decl "bool" gnsl_middle nil)
    (\|- const-decl "bool" gnsl_middle nil)
    (event type-decl nil dynetwork nil)
    (USER_TCC2 existence-tcc nil gnsl_middle nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (restrictpremid_last 0
  (restrictpremid_last-1 nil 3399211782
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (expand "RankUser")
        (("" (interleaving2)
          (("" (expand "UROLE_LAST")
            (("" (typepred "P!1")
              (("" (lemma "select_right_nonce3" ("P" "P!1"))
                (("" (flatten)
                  (("" (delete -1)
                    (("" (choice3)
                      (("1" (prefix)
                        (("1" (delete 2 3)
                          (("1" (prefix)
                            (("1" (delete - 2 3)
                              (("1"
                                (expand "rho_premid")
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (delete 2 3)
                              (("2"
                                (prefix)
                                (("1"
                                  (delete 2 3)
                                  (("1"
                                    (expand "E")
                                    (("1"
                                      (comment
                                       "explore the 3 options that could make -1 true")
                                      (("1"
                                        (expand "rho_premid" -1)
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand "rho_premid" -1)
                                            (("1"
                                              (typepred "i!1" "mid")
                                              (("1"
                                                (expand "rho_premid" 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (delete
                                                     -2
                                                     -6
                                                     -7
                                                     -8
                                                     2
                                                     3)
                                                    (("1"
                                                      (lemma
                                                       "n_prop"
                                                       ("P"
                                                        "P!1"
                                                        "u"
                                                        "u!1"
                                                        "r"
                                                        "P!1-1"))
                                                      (("1"
                                                        (lemma
                                                         "elt_append3"
                                                         ("l1"
                                                          "i!2`1"
                                                          "l2"
                                                          "(:i!1:)"
                                                          "t"
                                                          "n_mid"))
                                                        (("1"
                                                          (lemma
                                                           "elt_singleton"
                                                           ("t1"
                                                            "i!1"
                                                            "t2"
                                                            "n_mid"))
                                                          (("1"
                                                            (grind
                                                             :exclude
                                                             "elt")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skosimp*)
                                            (("2"
                                              (decompose-equality -1)
                                              (("2"
                                                (decompose-equality -2)
                                                (("2"
                                                  (decompose-equality
                                                   -1)
                                                  (("2"
                                                    (decompose-equality
                                                     -2)
                                                    (("2"
                                                      (expand
                                                       "rho_premid"
                                                       1)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (typepred
                                                           "i!2`1"
                                                           "i!2`2"
                                                           "nl1!1"
                                                           "nl2!1"
                                                           "mid"
                                                           "hu_list"
                                                           "p")
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -3
                                                             -5
                                                             -7
                                                             -9
                                                             -11
                                                             -18
                                                             -19
                                                             1
                                                             3)
                                                            (("2"
                                                              (comment
                                                               "the outgoing message is sent to 0 = p mod p, establish some equalities first")
                                                              (("2"
                                                                (case
                                                                 "P!1=p"
                                                                 "i!3=p-1"
                                                                 "rem(p)(i!3)=p-1"
                                                                 "rem(p)(p)=0")
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "p")
                                                                  (("1"
                                                                    (replace*
                                                                     -1
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     -15)
                                                                    (("1"
                                                                      (delete
                                                                       -1
                                                                       -2
                                                                       -3)
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             -8
                                                                             "0")
                                                                            (("1"
                                                                              (replace
                                                                               -10
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -8
                                                                                 1
                                                                                 rl)
                                                                                (("1"
                                                                                  (delete
                                                                                   -)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           1
                                                                           "nl1!1"
                                                                           "append(nl2!1,(:i!1:))")
                                                                          (("1"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               1)
                                                                              (("1"
                                                                                (replace
                                                                                 -11
                                                                                 1)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "append_assoc"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "append"
                                                                                     1
                                                                                     2)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (decompose-equality
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "remove"
                                                                                 1)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "length_nth_equality[Identity]"
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "length_append"
                                                                                     1)
                                                                                    (("1"
                                                                                      (rewrite
                                                                                       "length_cdr"
                                                                                       1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "length_cdr"
                                                                                         1)
                                                                                        (("1"
                                                                                          (delete
                                                                                           -1
                                                                                           -2
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -8
                                                                                           -9
                                                                                           -10
                                                                                           -11
                                                                                           -12
                                                                                           -13
                                                                                           2)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skolem-typepred)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "nth_append"
                                                                                       ("l1"
                                                                                        "cdr(i!2`2)"
                                                                                        "l2"
                                                                                        "(:hu(p-1):)"
                                                                                        "i"
                                                                                        "i!4"))
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (delete
                                                                                           -1)
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "length_cdr"
                                                                                             1)
                                                                                            (("1"
                                                                                              (case
                                                                                               "i!4<p-2 OR i!4=p-2")
                                                                                              (("1"
                                                                                                (delete
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (ground)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -12
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nth_remove"
                                                                                                       ("l"
                                                                                                        "hu_list"
                                                                                                        "i"
                                                                                                        "p-1"
                                                                                                        "j"
                                                                                                        "i!4+1"))
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (delete
                                                                                                             -)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -5
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "nth_cdr"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -10
                                                                                                             "p-1")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -10
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "length_append"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "length_cdr"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (delete
                                                                                                     -2
                                                                                                     -3
                                                                                                     -4
                                                                                                     -5
                                                                                                     -6
                                                                                                     -7
                                                                                                     -8
                                                                                                     -9
                                                                                                     -10
                                                                                                     -12
                                                                                                     -13
                                                                                                     -14
                                                                                                     2
                                                                                                     3)
                                                                                                    (("2"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (delete
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5
                                                                                         -6
                                                                                         -7
                                                                                         -8
                                                                                         -9
                                                                                         -10
                                                                                         -11
                                                                                         -12
                                                                                         -13
                                                                                         -14
                                                                                         2
                                                                                         3)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "length_append"
                                                                                           -1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "length_append"
                                                                             1)
                                                                            (("2"
                                                                              (delete
                                                                               -1
                                                                               -2
                                                                               -3
                                                                               -4
                                                                               -6
                                                                               -7
                                                                               -8
                                                                               -9
                                                                               -10
                                                                               -11
                                                                               -12
                                                                               -13)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (delete
                                                                   -
                                                                   2)
                                                                  (("2"
                                                                    (rewrite
                                                                     "rem_def")
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "1")
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("3"
                                                                    (delete
                                                                     -
                                                                     2)
                                                                    (("3"
                                                                      (rewrite
                                                                       "rem_def")
                                                                      (("3"
                                                                        (inst
                                                                         1
                                                                         "0")
                                                                        (("3"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (replace
                                                                   -11
                                                                   -2)
                                                                  (("4"
                                                                    (rewrite
                                                                     "length_append"
                                                                     -2)
                                                                    (("4"
                                                                      (expand
                                                                       "length"
                                                                       -2
                                                                       1)
                                                                      (("4"
                                                                        (delete
                                                                         -3
                                                                         -6
                                                                         -7
                                                                         -8
                                                                         -9
                                                                         -10
                                                                         -11
                                                                         -12
                                                                         -13
                                                                         2)
                                                                        (("4"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (replace
                                                                   -9
                                                                   -2)
                                                                  (("5"
                                                                    (delete
                                                                     -1
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -7
                                                                     -9
                                                                     -10
                                                                     -11
                                                                     -12
                                                                     2)
                                                                    (("5"
                                                                      (rewrite
                                                                       "length_remove"
                                                                       -1
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (nonemptylist
                                                                           "hu_list")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                ";;; the outgoing message is sent to 0 = p mod p, establish some equalities first"))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (skosimp*)
                                            (("3"
                                              (delete -1 -3 -4 -5 1)
                                              (("3"
                                                (decompose-equality -1)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        ";;; explore the 3 options that could make -1 true"))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete 2 3)
                                  (("2"
                                    (prefix)
                                    (("2"
                                      (delete - 2 3)
                                      (("2" (stop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete - 2) (("2" (grind) nil nil)) nil)
                       ("3" (delete -1 -2 2)
                        (("3" (nonemptylist "i!2`2") nil nil)) nil)
                       ("4" (typepred "i!2`1")
                        (("4" (delete -1 -3 2) (("4" (ground) nil nil))
                          nil))
                        nil)
                       ("5" (typepred "i!2`2")
                        (("5" (delete -1 -3 -4 -5 2)
                          (("5" (ground) nil nil)) nil))
                        nil)
                       ("6" (delete - 2) (("6" (grind) nil nil)) nil)
                       ("7" (skolem!)
                        (("7" (delete -1 -2 2)
                          (("7" (nonemptylist "il!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((event type-decl nil dynetwork nil)
    (\|- const-decl "bool" gnsl_middle nil)
    (INIT const-decl "bool" gnsl_middle nil)
    (Message type-decl nil gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (UROLE_LAST const-decl "process[event]" gnsl_middle nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (R_premid const-decl "set[event]" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil) (set type-eq-decl nil sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (member const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rho_premid def-decl "bool" gnsl_middle nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_middle nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_middle nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_middle
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_middle nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_middle
     nil)
    (E const-decl "Message" gnsl_middle nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (n_prop formula-decl nil gnsl_middle nil)
    (elt_singleton formula-decl nil listprops nil)
    (n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (elt_append3 formula-decl nil listprops nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_middle
     nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_middle
     nil)
    (length_remove formula-decl nil listprops nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (rem_def formula-decl nil modulo_arithmetic nil)
    (i!3 skolem-const-decl "{x: nat | mid < x AND x <= p}" gnsl_middle
     nil)
    (nl2!1 skolem-const-decl
     "{x: list[Nonce] | length(x) = -1 - mid + i!3}" gnsl_middle nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_middle nil)
    (u!1 skolem-const-decl "Identity" gnsl_middle nil)
    (i!1 skolem-const-decl "Nonces(P!1, u!1, P!1 - 1)" gnsl_middle nil)
    (Message_ilist_extensionality formula-decl nil gnsl_middle nil)
    (length_nth_equality formula-decl nil listprops nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (nth_append formula-decl nil listprops nil)
    (nth_remove formula-decl nil listprops nil)
    (nth_cdr formula-decl nil listprops nil)
    (Message_nlist_extensionality formula-decl nil gnsl_middle nil)
    (append_assoc formula-decl nil list_props nil)
    (Message_conc_extensionality formula-decl nil gnsl_middle nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Message_public_extensionality formula-decl nil gnsl_middle nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]"
     gnsl_middle nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (remove def-decl "list[T]" listprops nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_middle nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (select_right_nonce3 formula-decl nil gnsl_middle nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (RankUser const-decl "setof[trace[event]]" dynetwork nil))
   nil))
 (authentication_premid 0
  (authentication_premid-1 nil 3398183780
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      ((""
        (rewrite "authentication_by_rank" + ("rho" "rho_premid(v!1)"))
        (("1" (delete 2)
          (("1" (comment "intruder's initial knowledge is in rho")
            (("1" (skolem!)
              (("1" (prop)
                (("1" (expand "INIT")
                  (("1" (expand "rho_premid") (("1" (smash) nil nil))
                    nil))
                  nil))
                nil))
              ";;; intruder's initial knowledge is in rho"))
            nil))
          nil)
         ("2" (delete 2)
          (("2"
            (comment "from of a set of messages in rho, no message not in rho can be generated")
            (("2" (expand "|-")
              (("2" (rule-induct "Gen")
                (("2" (skolem!)
                  (("2" (smash)
                    (("1" (inst -2 "m!2") (("1" (prop) nil nil)) nil)
                     ("2" (delete -2)
                      (("2" (skolem!)
                        (("2" (flatten)
                          (("2" (replace -3 1)
                            (("2" (expand "rho_premid" 1)
                              (("2" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (delete -2)
                      (("3" (skolem!)
                        (("3" (expand "rho_premid" -1)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (delete -2)
                      (("4" (skolem!)
                        (("4" (expand "rho_premid" -1)
                          (("4" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("5" (delete -2)
                      (("5" (skolem!)
                        (("5" (flatten)
                          (("5" (expand "rho_premid" -1)
                            (("5" (replace -2 1)
                              (("5"
                                (expand "rho_premid")
                                (("5"
                                  (delete -2)
                                  (("5" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (delete -2)
                      (("6" (skolem!)
                        (("6" (flatten)
                          (("6" (replace -2 1)
                            (("6" (delete -2)
                              (("6"
                                (expand "rho_premid")
                                (("6"
                                  (expand "elt")
                                  (("6"
                                    (inst 1 "0")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (delete 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("7" (delete -2)
                      (("7" (skolem!)
                        (("7" (flatten)
                          (("7" (replace -3 1)
                            (("7" (delete -3)
                              (("7"
                                (expand "rho_premid")
                                (("7"
                                  (lemma
                                   "elt_append3"
                                   ("l1"
                                    "nl1!1"
                                    "l2"
                                    "nl2!1"
                                    "t"
                                    "n_mid"))
                                  (("7" (prop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("8" (delete -2)
                      (("8" (skolem!)
                        (("8" (flatten)
                          (("8" (replace -3 1)
                            (("8" (delete -3)
                              (("8"
                                (replace -2 -1)
                                (("8"
                                  (delete -2)
                                  (("8"
                                    (expand "rho_premid")
                                    (("8"
                                      (lemma
                                       "elt_append1"
                                       ("l1"
                                        "nl1!1"
                                        "l2"
                                        "nl2!1"
                                        "t"
                                        "n_mid"))
                                      (("8" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("9" (delete -2)
                      (("9" (skolem!)
                        (("9" (flatten)
                          (("9" (replace -3 1)
                            (("9" (delete -3)
                              (("9"
                                (replace -2 -1)
                                (("9"
                                  (delete -2)
                                  (("9"
                                    (expand "rho_premid")
                                    (("9"
                                      (lemma
                                       "elt_append2"
                                       ("l1"
                                        "nl1!1"
                                        "l2"
                                        "nl2!1"
                                        "t"
                                        "n_mid"))
                                      (("9" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("10" (delete -2)
                      (("10" (skolem!)
                        (("10" (flatten)
                          (("10" (replace -2 1)
                            (("10" (delete -2)
                              (("10"
                                (expand "rho_premid" 1)
                                (("10" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("11" (delete -2)
                      (("11" (skolem!)
                        (("11" (flatten)
                          (("11" (replace -2 1)
                            (("11" (delete -)
                              (("11"
                                (expand "rho_premid")
                                (("11" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("12" (delete -2)
                      (("12" (skolem!)
                        (("12" (flatten)
                          (("12" (replace -3 1)
                            (("12" (delete -3)
                              (("12"
                                (expand "rho_premid" 1)
                                (("12" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("13" (delete -2)
                      (("13" (skolem!)
                        (("13" (flatten)
                          (("13" (replace -3 1)
                            (("13" (delete -)
                              (("13"
                                (expand "rho_premid")
                                (("13" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("14" (delete -2)
                      (("14" (skolem!)
                        (("14" (flatten)
                          (("14" (replace -3 1)
                            (("14" (delete -)
                              (("14"
                                (expand "rho_premid")
                                (("14" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("15" (delete -2)
                      (("15" (skolem!)
                        (("15" (flatten)
                          (("15" (replace -3 1)
                            (("15" (delete -3)
                              (("15"
                                (typepred "k!1")
                                (("15"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand "rho_premid" -3)
                                    (("2"
                                      (assert)
                                      (("2" (lazy-grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              ";;; from of a set of messages in rho, no message not in rho can be generated"))
            nil))
          nil)
         ("3" (delete 2)
          (("3" (comment "users maintain the rank function")
            (("3" (skolem!)
              (("3" (expand "USER")
                (("3" (expand "RankUser")
                  (("3" (interleaving2)
                    (("1" (interleaving)
                      (("1" (interleaving)
                        (("1"
                          (lemma "restrictpremid_init"
                           ("P" "i!2" "u" "i!1"))
                          (("1"
                            (grind :exclude
                             ("rho_premid" "UROLE_INIT"))
                            nil nil))
                          nil)
                         ("2"
                          (lemma "restrictpremid_last"
                           ("P" "i!2" "u" "i!1"))
                          (("2"
                            (grind :exclude
                             ("rho_premid" "UROLE_LAST"))
                            nil nil))
                          nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (stop) nil nil)
                           ("2"
                            (lemma "restrictpremid_middle"
                             ("P" "i!2" "u" "i!1"))
                            (("2"
                              (grind :exclude
                               ("rho_premid" "UROLE_MIDDLE"))
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (delete 3)
                        (("3" (use "USER_TCC2") (("3" (prop) nil nil))
                          nil))
                        nil)
                       ("4" (delete 2)
                        (("4" (use "USER_TCC2") nil nil)) nil))
                      nil)
                     ("2" (delete 2) (("2" (use "USER_TCC2") nil nil))
                      nil)
                     ("3" (delete 2)
                      (("3" (skolem!) (("3" (use "USER_TCC2") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              ";;; users maintain the rank function"))
            nil))
          nil)
         ("4" (delete 2)
          (("4" (comment "T is not in rho")
            (("4" (skolem-typepred)
              (("4" (expand "T")
                (("4" (replace -1 -2)
                  (("4" (delete -1) (("4" (grind) nil nil)) nil)) nil))
                nil))
              ";;; T is not in rho"))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (restriction_free_par formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uniform_interleave2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (restrictpremid_last formula-decl nil gnsl_middle nil)
    (restrictpremid_init formula-decl nil gnsl_middle nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Par const-decl "process" processes "../pvs6_csp_rules/")
    (\|> const-decl "bool" satisfaction "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (restrictpremid_middle formula-decl nil gnsl_middle nil)
    (USER_TCC2 existence-tcc nil gnsl_middle nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (TRUE const-decl "bool" booleans nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (// const-decl "process" processes "../pvs6_csp_rules/")
    (Interleave const-decl "process[T]" multipar "../pvs6_csp_rules/")
    (UROLE_INIT const-decl "process[event]" gnsl_middle nil)
    (UROLE_LAST const-decl "process[event]" gnsl_middle nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (UROLE_MIDDLE const-decl "process[event]" gnsl_middle nil)
    (complement const-decl "set" sets nil)
    (remove def-decl "list[T]" listprops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (E const-decl "Message" gnsl_middle nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (append def-decl "list[T]" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (elt_append2 formula-decl nil listprops nil)
    (elt_append1 formula-decl nil listprops nil)
    (elt_append3 formula-decl nil listprops nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (n!1 skolem-const-decl "Nonce" gnsl_middle nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (elt const-decl "bool" listprops nil)
    (/= const-decl "boolean" notequal nil)
    (Gen_weak_induction formula-decl nil gnsl_middle nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (\|- const-decl "bool" gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (INIT const-decl "bool" gnsl_middle nil)
    (Message type-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (USER const-decl "process[event]" gnsl_middle nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (rho_premid def-decl "bool" gnsl_middle nil)
    (T const-decl "set[event]" gnsl_middle nil)
    (R_premid const-decl "set[event]" gnsl_middle nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil nat_types nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (event type-decl nil dynetwork nil)
    (authentication_by_rank formula-decl nil dynetwork nil))
   nil))
 (restrictpostmid_init 0
  (restrictpostmid_init-1 nil 3399648399
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (expand "RankUser")
        (("" (interleaving2)
          (("" (expand "UROLE_INIT")
            (("" (typepred "P!1")
              (("" (lemma "select_right_nonce1" ("P" "P!1"))
                (("" (flatten)
                  (("" (delete -1)
                    (("" (choice3)
                      (("1" (prefix)
                        (("1" (delete -1 -2 2 3)
                          (("1" (expand "E")
                            (("1" (expand "rho_postmid")
                              (("1"
                                (flatten)
                                (("1"
                                  (delete 2)
                                  (("1"
                                    (typepred "i!1")
                                    (("1"
                                      (lemma
                                       "n_prop"
                                       ("P" "P!1" "u" "u!1" "r" "0"))
                                      (("1"
                                        (typepred "mid")
                                        (("1"
                                          (lemma
                                           "elt_singleton"
                                           ("t1" "i!1" "t2" "n_mid"))
                                          (("1"
                                            (grind :exclude "elt")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete 2 3)
                          (("2" (prefix)
                            (("2" (delete 2 3)
                              (("2"
                                (prefix)
                                (("1"
                                  (delete - 2 3)
                                  (("1"
                                    (expand "rho_postmid")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete 2 3)
                                  (("2"
                                    (prefix)
                                    (("1"
                                      (delete -2 -3 2 3)
                                      (("1"
                                        (expand "E")
                                        (("1"
                                          (expand "rho_postmid" -1)
                                          (("1"
                                            (split)
                                            (("1"
                                              (lemma
                                               "elt_append2"
                                               ("l1"
                                                "(:i!1:)"
                                                "l2"
                                                "i!2`1"
                                                "t"
                                                "n_mid"))
                                              (("1"
                                                (grind :exclude "elt")
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (skosimp*)
                                              (("2"
                                                (comment
                                                 "contradiction in -2 and i!3<p")
                                                (("2"
                                                  (decompose-equality
                                                   -2)
                                                  (("2"
                                                    (decompose-equality
                                                     -1)
                                                    (("2"
                                                      (decompose-equality
                                                       -2)
                                                      (("2"
                                                        (typepred
                                                         "i!3"
                                                         "nl1!1"
                                                         "nl2!1"
                                                         "i!2`1"
                                                         "i!2`2"
                                                         "hu_list")
                                                        (("2"
                                                          (delete
                                                           -1
                                                           -3
                                                           -5
                                                           -7
                                                           -9
                                                           -11
                                                           -13
                                                           -16
                                                           -17
                                                           +)
                                                          (("2"
                                                            (case
                                                             "P!1=p")
                                                            (("1"
                                                              (lemma
                                                               "equality_length"
                                                               ("l1"
                                                                "cons(i!1,i!2`1)"
                                                                "l2"
                                                                "append(nl1!1,cons(n_mid,nl2!1))"))
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (rewrite
                                                                   "length_append"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1
                                                                     (1
                                                                      2))
                                                                    (("1"
                                                                      (delete
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       -10)
                                                                      (("1"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -7
                                                               -5)
                                                              (("2"
                                                                (rewrite
                                                                 "length_remove"
                                                                 -5
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (delete
                                                                   -1
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -7
                                                                   -8)
                                                                  (("1"
                                                                    (ground)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "p")
                                                                  (("2"
                                                                    (delete
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -6
                                                                     -8
                                                                     -9
                                                                     2)
                                                                    (("2"
                                                                      (nonemptylist
                                                                       "hu_list")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  ";;; contradiction in -2 and i!3<p"))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (delete - 2 3)
                                      (("2" (stop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "i!2`1")
                        (("2" (delete -1 -3 -5 2)
                          (("2" (ground) nil nil)) nil))
                        nil)
                       ("3" (typepred "i!2`2")
                        (("3" (delete -1 -3 -4 -5 2)
                          (("3" (ground) nil nil)) nil))
                        nil)
                       ("4" (delete - 2) (("4" (grind) nil nil)) nil)
                       ("5" (delete -1 -2 2)
                        (("5" (nonemptylist "i!2`2") nil nil)) nil)
                       ("6" (delete - 2) (("6" (grind) nil nil)) nil)
                       ("7" (skolem!)
                        (("7" (delete -1 -2 2)
                          (("7" (nonemptylist "il!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((event type-decl nil dynetwork nil)
    (\|- const-decl "bool" gnsl_middle nil)
    (INIT const-decl "bool" gnsl_middle nil)
    (Message type-decl nil gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (UROLE_INIT const-decl "process[event]" gnsl_middle nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (R_postmid const-decl "set[event]" gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (member const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rho_postmid def-decl "bool" gnsl_middle nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_middle nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_middle nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_middle
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_middle nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_middle
     nil)
    (E const-decl "Message" gnsl_middle nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_middle nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]"
     gnsl_middle nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_remove formula-decl nil listprops nil)
    (equality_length formula-decl nil listprops nil)
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_middle
     nil)
    (elt_append2 formula-decl nil listprops nil)
    (append def-decl "list[T]" list_props nil)
    (remove def-decl "list[T]" listprops nil)
    (n_prop formula-decl nil gnsl_middle nil)
    (elt_singleton formula-decl nil listprops nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (select_right_nonce1 formula-decl nil gnsl_middle nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (RankUser const-decl "setof[trace[event]]" dynetwork nil))
   nil))
 (restrictpostmid_middle 0
  (restrictpostmid_middle-1 nil 3399716951
   ("" (auto-rewrite-theory "sets")
    (("" (auto-rewrite "USER_TCC2")
      (("" (skosimp)
        (("" (expand "RankUser")
          (("" (interleaving2)
            (("" (typepred "i!1`1" "P!1")
              (("" (lemma "select_right_nonce2" ("P" "P!1"))
                (("" (flatten)
                  (("" (delete -1)
                    (("" (expand "UROLE_MIDDLE")
                      (("" (lift-if)
                        (("" (prop)
                          (("1"
                            (case "P!1=p AND u!1=hu(mid) AND i!1`1=mid")
                            (("1" (flatten)
                              (("1"
                                (choice3)
                                (("1"
                                  (prefix)
                                  (("1"
                                    (delete 2 3)
                                    (("1"
                                      (prefix)
                                      (("1"
                                        (comment
                                         "prove the outgoing message, containing n_mid, is in rho")
                                        (("1"
                                          (typepred
                                           "i!2`1"
                                           "i!2`3"
                                           "i!2`4"
                                           "hu_list")
                                          (("1"
                                            (delete
                                             -1
                                             -3
                                             -6
                                             -9
                                             -12
                                             -17
                                             -18
                                             -19
                                             2
                                             3
                                             4)
                                            (("1"
                                              (expand "E")
                                              (("1"
                                                (expand "rho_postmid")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (delete 1)
                                                    (("1"
                                                      (comment
                                                       "the outgoing message is sent to mid+1")
                                                      (("1"
                                                        (inst
                                                         1
                                                         "mid+1")
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "0")
                                                              (("1"
                                                                (delete
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9
                                                                 -11
                                                                 -12
                                                                 -13)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             1
                                                             "i!2`1"
                                                             "null")
                                                            (("1"
                                                              (mdecompose-equality
                                                               1)
                                                              (("1"
                                                                (rewrite
                                                                 "length_nth_equality[Identity]"
                                                                 1)
                                                                (("1"
                                                                  (rewrite
                                                                   "length_append"
                                                                   1)
                                                                  (("1"
                                                                    (rewrite
                                                                     "length_remove"
                                                                     1
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_cdr"
                                                                         1)
                                                                        (("1"
                                                                          (delete
                                                                           -1
                                                                           -3
                                                                           -5
                                                                           -7
                                                                           -9
                                                                           -10
                                                                           -11
                                                                           -12
                                                                           -13
                                                                           2)
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "length_non_zero"
                                                                       ("l"
                                                                        "hu_list"))
                                                                      (("2"
                                                                        (delete
                                                                         -2
                                                                         -3
                                                                         -4
                                                                         -5
                                                                         -6
                                                                         -8
                                                                         -10
                                                                         -11
                                                                         -12
                                                                         -13
                                                                         2
                                                                         3)
                                                                        (("2"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skolem-typepred)
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append"
                                                                     -1)
                                                                    (("2"
                                                                      (lemma
                                                                       "nth_append"
                                                                       ("l1"
                                                                        "i!2`3"
                                                                        "l2"
                                                                        "cons(u!1,cdr(i!2`4))"
                                                                        "i"
                                                                        "i!3"))
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (delete
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "length_cdr"
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "nth_remove"
                                                                                 ("l"
                                                                                  "hu_list"
                                                                                  "i"
                                                                                  "1+mid"
                                                                                  "j"
                                                                                  "i!3"))
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (delete
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       2)
                                                                                      (("1"
                                                                                        (case
                                                                                         "i!3<mid OR i!3=mid OR i!3>mid")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -7)
                                                                                          (("1"
                                                                                            (delete
                                                                                             -3
                                                                                             -13)
                                                                                            (("1"
                                                                                              (lazy-grind
                                                                                               :exclude
                                                                                               ("nth"
                                                                                                "append"
                                                                                                "remove"))
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (delete
                                                                                           -
                                                                                           2)
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   -2
                                                                                   -4
                                                                                   -6
                                                                                   -8
                                                                                   -10
                                                                                   -11
                                                                                   -12
                                                                                   -13
                                                                                   -14
                                                                                   2)
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        ";;; the outgoing message is sent to mid+1"))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          ";;; prove the outgoing message, containing n_mid, is in rho"))
                                        nil)
                                       ("2"
                                        (delete 2 3)
                                        (("2"
                                          (prefix)
                                          (("2"
                                            (delete
                                             -2
                                             -3
                                             -4
                                             -5
                                             -7
                                             -8
                                             -9
                                             -10
                                             -11
                                             +)
                                            (("2"
                                              (comment
                                               "the message in -1 contains n_mid but is not escaped in the rank function, hence it will evaluate to false")
                                              (("2"
                                                (grind :if-match nil)
                                                (("1"
                                                  (delete
                                                   -1
                                                   -2
                                                   -3
                                                   -4
                                                   -5
                                                   -6
                                                   -7
                                                   -9)
                                                  (("1"
                                                    (decompose-equality
                                                     -1)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 1 "0")
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                ";;; the message in -1 contains n_mid but is not escaped in the rank function, hence it will evaluate to false"))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete -1 -2 -3 -4 -5 -6 -8 2 3)
                                  (("2"
                                    (nonemptylist "i!2`4")
                                    nil
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "i!2`3")
                                  (("3"
                                    (delete
                                     -1
                                     -3
                                     -4
                                     -5
                                     -6
                                     -7
                                     -8
                                     -9
                                     -10
                                     -11
                                     -12
                                     2
                                     3)
                                    (("3" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skosimp* 1)
                                  (("4"
                                    (delete
                                     -3
                                     -4
                                     -5
                                     -6
                                     -7
                                     -8
                                     -9
                                     -10
                                     -11
                                     2
                                     3)
                                    (("4" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (skosimp* 1)
                                  (("5"
                                    (delete
                                     -3
                                     -4
                                     -5
                                     -6
                                     -7
                                     -8
                                     -9
                                     -10
                                     -11
                                     2
                                     3)
                                    (("5" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("6"
                                  (skolem!)
                                  (("6"
                                    (delete -1 -2 -3 -4 -5 -6 -7 2 3)
                                    (("6"
                                      (nonemptylist "il2!1")
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("7"
                                  (skosimp* 1)
                                  (("7"
                                    (delete
                                     -2
                                     -3
                                     -4
                                     -5
                                     -6
                                     -7
                                     -8
                                     -9
                                     -11
                                     -12
                                     -13
                                     -14
                                     -15
                                     -16
                                     -17
                                     -18
                                     -19
                                     2
                                     3)
                                    (("7" (ground) nil nil))
                                    nil))
                                  nil)
                                 ("8"
                                  (skosimp* 1)
                                  (("8"
                                    (delete
                                     -2
                                     -3
                                     -4
                                     -5
                                     -6
                                     -8
                                     -9
                                     -10
                                     -11
                                     -12
                                     -13
                                     -14
                                     -15
                                     -16
                                     2
                                     3)
                                    (("8" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete -2 -3 -4 -5 -6 -7 2 3)
                              (("2"
                                (typepred "i!1`2")
                                (("2"
                                  (lemma
                                   "n_orig"
                                   ("P" "P!1" "u" "u!1" "r" "i!1`1"))
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (choice3)
                            (("1" (prefix)
                              (("1"
                                (delete 2 3)
                                (("1"
                                  (prefix)
                                  (("1"
                                    (delete -3 -4 2 3)
                                    (("1"
                                      (expand "E")
                                      (("1"
                                        (expand "rho_postmid" -1)
                                        (("1"
                                          (split)
                                          (("1"
                                            (typepred "i!1`2")
                                            (("1"
                                              (lemma
                                               "n_prop"
                                               ("P"
                                                "P!1"
                                                "u"
                                                "u!1"
                                                "r"
                                                "i!1`1"))
                                              (("1"
                                                (lemma
                                                 "elt_append3"
                                                 ("l1"
                                                  "i!2`1"
                                                  "l2"
                                                  "(:i!1`2:)"
                                                  "t"
                                                  "n_mid"))
                                                (("1"
                                                  (lemma
                                                   "elt_singleton"
                                                   ("t1"
                                                    "i!1`2"
                                                    "t2"
                                                    "n_mid"))
                                                  (("1"
                                                    (grind
                                                     :if-match
                                                     nil
                                                     :exclude
                                                     "elt")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (comment
                                             "a contradiction is lurking in -2")
                                            (("2"
                                              (skosimp*)
                                              (("2"
                                                (decompose-equality -2)
                                                (("2"
                                                  (decompose-equality
                                                   -1)
                                                  (("2"
                                                    (decompose-equality
                                                     -2)
                                                    (("2"
                                                      (typepred
                                                       "i!2`1"
                                                       "i!2`3"
                                                       "i!2`4"
                                                       "nl1!1"
                                                       "nl2!1"
                                                       "hu_list"
                                                       "i!3")
                                                      (("2"
                                                        (lemma
                                                         "select_right_nonce2"
                                                         ("P" "P!1"))
                                                        (("2"
                                                          (flatten -1)
                                                          (("2"
                                                            (delete
                                                             -2
                                                             -3
                                                             -4
                                                             -6
                                                             -8
                                                             -10
                                                             -12
                                                             -14
                                                             -21
                                                             +)
                                                            (("2"
                                                              (case
                                                               "P!1=p"
                                                               "i!3=i!1`1")
                                                              (("1"
                                                                (delete
                                                                 -4
                                                                 -5
                                                                 -6
                                                                 -7
                                                                 -8
                                                                 -9
                                                                 -10
                                                                 -12
                                                                 -13
                                                                 -14
                                                                 -16
                                                                 -17
                                                                 -18)
                                                                (("1"
                                                                  (ground)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 -1
                                                                 -2
                                                                 -4
                                                                 -5
                                                                 -8
                                                                 -9
                                                                 -10
                                                                 -11
                                                                 -12
                                                                 -14
                                                                 -15
                                                                 -16
                                                                 -17)
                                                                (("2"
                                                                  (replace
                                                                   -4
                                                                   -1)
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_append"
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (lemma
                                                                 "equality_length"
                                                                 ("l1"
                                                                  "append(i!2`3,i!2`4)"
                                                                  "l2"
                                                                  "remove(hu_list,i!3)"))
                                                                (("3"
                                                                  (delete
                                                                   -2
                                                                   -3
                                                                   -6
                                                                   -7
                                                                   -9
                                                                   -10
                                                                   -11
                                                                   -13
                                                                   -14
                                                                   -15
                                                                   -16)
                                                                  (("3"
                                                                    (prop)
                                                                    (("3"
                                                                      (rewrite
                                                                       "length_append"
                                                                       -1)
                                                                      (("3"
                                                                        (rewrite
                                                                         "length_remove"
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "length_non_zero"
                                                                           ("l"
                                                                            "hu_list"))
                                                                          (("2"
                                                                            (delete
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -6
                                                                             2)
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              ";;; a contradiction is lurking in -2"))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete 2 3)
                                    (("2"
                                      (prefix)
                                      (("2"
                                        (delete 2 3)
                                        (("2"
                                          (prefix)
                                          (("1"
                                            (delete - 2 3 4 5)
                                            (("1"
                                              (expand "rho_postmid")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (delete -2 2 3)
                                            (("2"
                                              (expand "E" -1)
                                              (("2"
                                                (expand
                                                 "rho_postmid"
                                                 -1)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (lemma
                                                     "elt_append2"
                                                     ("l1"
                                                      "(:i!1`2:)"
                                                      "l2"
                                                      "i!2`2"
                                                      "t"
                                                      "n_mid"))
                                                    (("1"
                                                      (delete -3 -4 -5)
                                                      (("1"
                                                        (expand
                                                         "LastMessage")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (prefix2)
                                                              (("1"
                                                                (delete
                                                                 2
                                                                 3)
                                                                (("1"
                                                                  (grind
                                                                   :if-match
                                                                   nil
                                                                   :exclude
                                                                   "elt")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 -
                                                                 2
                                                                 3
                                                                 4)
                                                                (("2"
                                                                  (stop)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (delete
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 2
                                                                 3
                                                                 4)
                                                                (("3"
                                                                  (nonemptylist
                                                                   "i!2`4")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (prefix2)
                                                              (("1"
                                                                (delete
                                                                 2
                                                                 3
                                                                 4)
                                                                (("1"
                                                                  (grind
                                                                   :if-match
                                                                   nil
                                                                   :exclude
                                                                   "elt")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 -
                                                                 2
                                                                 3
                                                                 4
                                                                 5
                                                                 6)
                                                                (("2"
                                                                  (stop)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (delete
                                                                 -1
                                                                 -2
                                                                 2
                                                                 3
                                                                 4)
                                                                (("3"
                                                                  (nonemptylist
                                                                   "i!2`4")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (delete
                                                       -1
                                                       -3
                                                       -4
                                                       -5
                                                       -6
                                                       -7
                                                       -8
                                                       +)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "i!2`2")
                              (("2"
                                (delete -1 -3 -4 -6 -7 -8 2 3 4)
                                (("2"
                                  (expand "length" 1)
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (delete -1 -2 -3 -4 2 3 4)
                              (("3" (nonemptylist "i!2`4") nil nil))
                              nil)
                             ("4" (typepred "i!2`3")
                              (("4"
                                (delete -1 -3 -4 -5 -6 -7 -8 2 3 4)
                                (("4" (ground) nil nil))
                                nil))
                              nil)
                             ("5" (skolem!)
                              (("5"
                                (typepred "nl2!1")
                                (("5"
                                  (delete -1 -3 -4 -6 -7 -8 2 3 4)
                                  (("5"
                                    (expand "length" 1)
                                    (("5" (ground) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (skolem!)
                              (("6"
                                (delete -1 -2 -3 -4 2 3 4)
                                (("6" (nonemptylist "il2!1") nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (choice3)
                            (("1" (prefix)
                              (("1"
                                (delete 2 3)
                                (("1"
                                  (prefix)
                                  (("1"
                                    (delete - 2 3 4 5 6)
                                    (("1"
                                      (expand "rho_postmid")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete 3)
                                    (("2"
                                      (prefix)
                                      (("1"
                                        (delete 2 3)
                                        (("1"
                                          (expand "R_postmid")
                                          (("1"
                                            (case
                                             "i!1`1=w!1 AND append(i!2`3,cons(u!1,i!2`4))=hu_list AND nth(i!2`1,floor(1+((mid-1)/(p-2))*(P!1-2)))=n_mid")
                                            (("1"
                                              (delete
                                               -2
                                               -3
                                               -4
                                               -5
                                               -6
                                               -7
                                               1
                                               3
                                               4
                                               5)
                                              (("1" (ground) nil nil))
                                              nil)
                                             ("2"
                                              (delete -2 -3 3)
                                              (("2"
                                                (comment
                                                 "prove all the conjuncts of 1, except for the (by itself) unprovable first conjucts, which is used in the proof of 2")
                                                (("2"
                                                  (comment
                                                   "first, distinguish between the two separate cases that would make -1 true")
                                                  (("2"
                                                    (expand "E")
                                                    (("2"
                                                      (expand
                                                       "rho_postmid"
                                                       -1)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (lemma
                                                           "elt_append3"
                                                           ("l1"
                                                            "i!2`1"
                                                            "l2"
                                                            "(:i!1`2:)"
                                                            "t"
                                                            "n_mid"))
                                                          (("1"
                                                            (lemma
                                                             "elt_singleton"
                                                             ("t1"
                                                              "i!1`2"
                                                              "t2"
                                                              "n_mid"))
                                                            (("1"
                                                              (delete
                                                               -4
                                                               -5
                                                               -6
                                                               1
                                                               3
                                                               4
                                                               5)
                                                              (("1"
                                                                (grind
                                                                 :if-match
                                                                 nil
                                                                 :exclude
                                                                 "elt")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skosimp*)
                                                          (("2"
                                                            (decompose-equality
                                                             -1)
                                                            (("2"
                                                              (decompose-equality
                                                               -2)
                                                              (("2"
                                                                (decompose-equality
                                                                 -1)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("2"
                                                                    (typepred
                                                                     "i!2`1"
                                                                     "i!2`3"
                                                                     "i!2`4"
                                                                     "nl1!1"
                                                                     "nl2!1"
                                                                     "hu_list")
                                                                    (("2"
                                                                      (delete
                                                                       -1
                                                                       -3
                                                                       -5
                                                                       -7
                                                                       -9
                                                                       -11
                                                                       4
                                                                       5)
                                                                      (("2"
                                                                        (case
                                                                         "P!1=p"
                                                                         "i!3=i!1`1")
                                                                        (("1"
                                                                          (replace*
                                                                           -1
                                                                           -2
                                                                           -12)
                                                                          (("1"
                                                                            (split)
                                                                            (("1"
                                                                              (expand
                                                                               "rho_postmid"
                                                                               2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (delete
                                                                                   2
                                                                                   4)
                                                                                  (("1"
                                                                                    (inst
                                                                                     2
                                                                                     "i!1`1+1")
                                                                                    (("1"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "equality_nth"
                                                                                           ("l1"
                                                                                            "append(i!2`3,i!2`4)"
                                                                                            "l2"
                                                                                            "remove(hu_list,i!1`1)"))
                                                                                          (("1"
                                                                                            (prop)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "i!1`1")
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "nth_append"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "nth_remove"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -10
                                                                                                       "1+i!1`1")
                                                                                                      (("1"
                                                                                                        (delete
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13
                                                                                                         -14
                                                                                                         -15
                                                                                                         -16
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (rewrite
                                                                                                 "length_append"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (delete
                                                                                                   -1
                                                                                                   -2
                                                                                                   -3
                                                                                                   -6
                                                                                                   -7
                                                                                                   -8
                                                                                                   -9
                                                                                                   -10
                                                                                                   -11
                                                                                                   -12
                                                                                                   -13
                                                                                                   -15
                                                                                                   2
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         1
                                                                                         "nl1!1"
                                                                                         "append(nl2!1,(:i!1`2:))")
                                                                                        (("1"
                                                                                          (decompose-equality
                                                                                           1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -11
                                                                                             1)
                                                                                            (("1"
                                                                                              (delete
                                                                                               -
                                                                                               2)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "append_assoc"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "append"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "length_nth_equality[Identity]"
                                                                                               1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "length_append"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "length_cdr"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "length_remove"
                                                                                                       1
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (delete
                                                                                                         -1
                                                                                                         -2
                                                                                                         -3
                                                                                                         -6
                                                                                                         -7
                                                                                                         -9
                                                                                                         -10
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13
                                                                                                         -14
                                                                                                         -15
                                                                                                         2
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (delete
                                                                                                         -1
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -9
                                                                                                         -10
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13
                                                                                                         -14
                                                                                                         2
                                                                                                         3
                                                                                                         4)
                                                                                                        (("2"
                                                                                                          (nonemptylist
                                                                                                           "hu_list")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (skolem-typepred)
                                                                                                (("2"
                                                                                                  (rewrite
                                                                                                   "length_append"
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       "length_cdr"
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (simplify
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (delete
                                                                                                           -4
                                                                                                           -7
                                                                                                           -8
                                                                                                           -12
                                                                                                           -13
                                                                                                           2
                                                                                                           3)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "equality_nth"
                                                                                                             ("l1"
                                                                                                              "append(i!2`3,i!2`4)"
                                                                                                              "l2"
                                                                                                              "remove(hu_list,i!1`1)"))
                                                                                                            (("2"
                                                                                                              (prop)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "nth_append"
                                                                                                                 ("l1"
                                                                                                                  "i!2`3"
                                                                                                                  "l2"
                                                                                                                  "cons(hu(i!1`1),cdr(i!2`4))"
                                                                                                                  "i"
                                                                                                                  "i!4"))
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (delete
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "nth_remove"
                                                                                                                       ("l"
                                                                                                                        "hu_list"
                                                                                                                        "i"
                                                                                                                        "1+i!1`1"
                                                                                                                        "j"
                                                                                                                        "i!4"))
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (delete
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "i!4")
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "nth_append"
                                                                                                                               ("l1"
                                                                                                                                "i!2`3"
                                                                                                                                "l2"
                                                                                                                                "i!2`4"
                                                                                                                                "i"
                                                                                                                                "i!4"))
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (delete
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "nth_remove"
                                                                                                                                     ("l"
                                                                                                                                      "hu_list"
                                                                                                                                      "i"
                                                                                                                                      "i!1`1"
                                                                                                                                      "j"
                                                                                                                                      "i!4"))
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (delete
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -8
                                                                                                                                           "i!1`1")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "nth"
                                                                                                                                             1
                                                                                                                                             2)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "nth"
                                                                                                                                               -1
                                                                                                                                               2)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "i!4<i!1`1 OR i!4=i!1`1 OR i!4>i!1`1")
                                                                                                                                                (("1"
                                                                                                                                                  (ground)
                                                                                                                                                  nil
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (delete
                                                                                                                                                   -
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (ground)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (rewrite
                                                                                                                               "length_append"
                                                                                                                               1)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (delete
                                                                                                                         -1
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -8
                                                                                                                         -9
                                                                                                                         -10
                                                                                                                         -11
                                                                                                                         -12
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (ground)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (rewrite
                                                                                                                     "length_cdr"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (delete
                                                                                                                       -1
                                                                                                                       -3
                                                                                                                       -4
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -7
                                                                                                                       -8
                                                                                                                       -9
                                                                                                                       -10
                                                                                                                       -11
                                                                                                                       -12
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "length_append"
                                                                                           1)
                                                                                          (("2"
                                                                                            (delete
                                                                                             -1
                                                                                             -2
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -8
                                                                                             -9
                                                                                             -10
                                                                                             -11
                                                                                             -12
                                                                                             -13
                                                                                             -14
                                                                                             -15
                                                                                             2)
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "i!3")
                                                                                      (("2"
                                                                                        (delete
                                                                                         -4
                                                                                         -5
                                                                                         -6
                                                                                         -7
                                                                                         -8
                                                                                         -9
                                                                                         -10
                                                                                         -11
                                                                                         -12
                                                                                         -13
                                                                                         -14
                                                                                         -15
                                                                                         -16
                                                                                         -17)
                                                                                        (("2"
                                                                                          (comment
                                                                                           "this is why we needed 2")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            ";;; this is why we needed 2"))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               -3
                                                                               -6
                                                                               -7
                                                                               -11
                                                                               -13
                                                                               -14
                                                                               2
                                                                               3)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "length_nth_equality[Identity]"
                                                                                 1)
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "length_append"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (delete
                                                                                       -1
                                                                                       -2
                                                                                       -6
                                                                                       -7
                                                                                       -8
                                                                                       -9
                                                                                       2)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skolem-typepred)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "length_append"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       -1
                                                                                       1)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nth_append"
                                                                                         ("l1"
                                                                                          "i!2`3"
                                                                                          "l2"
                                                                                          "cons(hu(i!1`1),i!2`4)"
                                                                                          "i"
                                                                                          "i!4"))
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (delete
                                                                                             -1
                                                                                             2)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "equality_nth"
                                                                                               ("l1"
                                                                                                "append(i!2`3,i!2`4)"
                                                                                                "l2"
                                                                                                "remove(hu_list,i!1`1)"))
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nth_append"
                                                                                                   ("l1"
                                                                                                    "i!2`3"
                                                                                                    "l2"
                                                                                                    "i!2`4"))
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "nth_remove"
                                                                                                     ("l"
                                                                                                      "hu_list"
                                                                                                      "i"
                                                                                                      "i!1`1"))
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -10
                                                                                                       "i!1`1")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -10
                                                                                                         1
                                                                                                         rl)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           1
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "i!4<i!1`1 OR i!4=i!1`1 OR i!4>i!1`1")
                                                                                                            (("1"
                                                                                                              (replace*
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (lazy-grind
                                                                                                                   :exclude
                                                                                                                   ("nth"
                                                                                                                    "append"
                                                                                                                    "remove"))
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lazy-grind
                                                                                                                   :exclude
                                                                                                                   ("nth"
                                                                                                                    "append"
                                                                                                                    "remove"))
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (case
                                                                                                                   "0<=i!4-1 AND i!4-1<p-1")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -3
                                                                                                                     "i!4-1")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -4
                                                                                                                       "i!4-1")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -5
                                                                                                                         "i!4-1")
                                                                                                                        (("1"
                                                                                                                          (ground)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (delete
                                                                                                                           -2
                                                                                                                           -3
                                                                                                                           -4
                                                                                                                           -5
                                                                                                                           -6
                                                                                                                           -7
                                                                                                                           -8
                                                                                                                           -9
                                                                                                                           -10
                                                                                                                           -11
                                                                                                                           -12
                                                                                                                           -13
                                                                                                                           -14
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (delete
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -6
                                                                                                                         -7
                                                                                                                         -9
                                                                                                                         -10
                                                                                                                         -11
                                                                                                                         -12
                                                                                                                         -13
                                                                                                                         -14
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (ground)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (delete
                                                                                                                       -2
                                                                                                                       -3
                                                                                                                       -4
                                                                                                                       -6
                                                                                                                       -7
                                                                                                                       -8
                                                                                                                       -11
                                                                                                                       -12
                                                                                                                       -13
                                                                                                                       -14
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (delete
                                                                                                                     -2
                                                                                                                     -3
                                                                                                                     -4
                                                                                                                     -6
                                                                                                                     -7
                                                                                                                     -10
                                                                                                                     -11
                                                                                                                     -12
                                                                                                                     -13
                                                                                                                     -14
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "i!1`1")
                                                                                                                      (("2"
                                                                                                                        (ground)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (delete
                                                                                                               -
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               "select_right_nonce2"
                                                                               ("P"
                                                                                "P!1"))
                                                                              (("3"
                                                                                (prop)
                                                                                (("3"
                                                                                  (replace
                                                                                   -5
                                                                                   -1)
                                                                                  (("3"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("3"
                                                                                      (delete
                                                                                       -1
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -6
                                                                                       -7
                                                                                       -8
                                                                                       -10
                                                                                       -11
                                                                                       -12
                                                                                       -13
                                                                                       -15
                                                                                       -16
                                                                                       -17
                                                                                       -18
                                                                                       2
                                                                                       3)
                                                                                      (("3"
                                                                                        (replace
                                                                                         -2
                                                                                         1)
                                                                                        (("3"
                                                                                          (rewrite
                                                                                           "nth_append"
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (delete
                                                                                               -2
                                                                                               2)
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -10
                                                                           -2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append"
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               -2
                                                                               1)
                                                                              (("2"
                                                                                (delete
                                                                                 -1
                                                                                 -3
                                                                                 -4
                                                                                 -7
                                                                                 -8
                                                                                 -9
                                                                                 -10
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14
                                                                                 2
                                                                                 3
                                                                                 4)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           "equality_length"
                                                                           ("l1"
                                                                            "append(i!2`3,i!2`4)"
                                                                            "l2"
                                                                            "remove(hu_list,i!3)"))
                                                                          (("3"
                                                                            (delete
                                                                             -2
                                                                             -5
                                                                             -6
                                                                             -8
                                                                             -10
                                                                             -11
                                                                             -12
                                                                             -13
                                                                             14
                                                                             2
                                                                             3
                                                                             4)
                                                                            (("3"
                                                                              (prop)
                                                                              (("3"
                                                                                (rewrite
                                                                                 "length_append"
                                                                                 -1)
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "length_remove"
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "p")
                                                                                    (("2"
                                                                                      (delete
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -6
                                                                                       -7
                                                                                       2)
                                                                                      (("2"
                                                                                        (nonemptylist
                                                                                         "hu_list")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    ";;; first, distinguish between the two separate cases that would make -1 true"))
                                                  ";;; prove all the conjuncts of 1, except for the (by itself) unprovable first conjucts, which is used in the proof of 2"))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (delete 2 3 4)
                                        (("2"
                                          (prefix)
                                          (("2"
                                            (delete -2 2 3)
                                            (("2"
                                              (expand "E" -1)
                                              (("2"
                                                (expand
                                                 "rho_postmid"
                                                 -1)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (lemma
                                                     "elt_append2"
                                                     ("l1"
                                                      "(:i!1`2:)"
                                                      "l2"
                                                      "i!2`2"
                                                      "t"
                                                      "n_mid"))
                                                    (("1"
                                                      (delete
                                                       -3
                                                       -4
                                                       -5
                                                       -6
                                                       -7
                                                       2
                                                       3
                                                       4)
                                                      (("1"
                                                        (expand
                                                         "LastMessage")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (prefix2)
                                                              (("1"
                                                                (delete
                                                                 2
                                                                 3)
                                                                (("1"
                                                                  (grind
                                                                   :if-match
                                                                   nil
                                                                   :exclude
                                                                   "elt")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 -
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (stop)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (delete
                                                                 -
                                                                 2)
                                                                (("3"
                                                                  (nonemptylist
                                                                   "i!2`4")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (prefix2)
                                                              (("1"
                                                                (delete
                                                                 2
                                                                 3
                                                                 4)
                                                                (("1"
                                                                  (grind
                                                                   :if-match
                                                                   nil
                                                                   :exclude
                                                                   "elt")
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 -
                                                                 2
                                                                 3
                                                                 4)
                                                                (("2"
                                                                  (stop)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (delete
                                                                 -
                                                                 2)
                                                                (("3"
                                                                  (nonemptylist
                                                                   "i!2`4")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (delete
                                                       -1
                                                       -3
                                                       -4
                                                       -5
                                                       -6
                                                       -7
                                                       +)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete -1 -2 -3 2 3 4 5)
                              (("2" (nonemptylist "i!2`4") nil nil))
                              nil)
                             ("3" (typepred "i!2`1")
                              (("3"
                                (delete -1 -3 -4 -5 -6 -7 3 4 5)
                                (("3" (ground) nil nil))
                                nil))
                              nil)
                             ("4" (typepred "i!2`3")
                              (("4"
                                (delete -1 -3 -4 -5 -6 -7 2 3 4 5)
                                (("4" (ground) nil nil))
                                nil))
                              nil)
                             ("5" (skolem!)
                              (("5"
                                (delete -1 -2 -3 2 3 4 5)
                                (("5" (nonemptylist "il2!1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (n_orig formula-decl nil gnsl_middle nil)
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_middle nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (Message_public_extensionality formula-decl nil gnsl_middle nil)
    (Message_conc_extensionality formula-decl nil gnsl_middle nil)
    (n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (remove def-decl "list[T]" listprops nil)
    (Message_ilist_extensionality formula-decl nil gnsl_middle nil)
    (nth_append formula-decl nil listprops nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_middle nil)
    (u!1 skolem-const-decl "Identity" gnsl_middle nil)
    (i!1 skolem-const-decl "[k: nat_1_to(P!1), Nonces(P!1, u!1, k)]"
     gnsl_middle nil)
    (i!2 skolem-const-decl "[{x: list[Nonce] | length(x) = i!1`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!1`1},
 {x: list[Identity] |
          (length(x) = i!1`1) AND
           (FORALL (k: below[i!1`1]): nth(x, k) = hu(k))},
 {x: list[Identity] |
          (length(x) = P!1 - 1 - i!1`1) AND
           (FORALL (k: below[P!1 - 1 - i!1`1]):
              nth(x, k) = hu(1 + k + i!1`1))}]" gnsl_middle nil)
    (i!3 skolem-const-decl
     "below[length[Identity](append(i!2`3, cons(u!1, cdr(i!2`4))))]"
     gnsl_middle nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (> const-decl "bool" reals nil)
    (nth_remove formula-decl nil listprops nil)
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (length_remove formula-decl nil listprops nil)
    (length_nth_equality formula-decl nil listprops nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (elt const-decl "bool" listprops nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (E const-decl "Message" gnsl_middle nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_middle
     nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_middle nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_middle
     nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_middle nil)
    (append def-decl "list[T]" list_props nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (LastMessage const-decl "event" gnsl_middle nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (commit? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (commit adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (commit?)]" gnsl_middle nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (n_prop formula-decl nil gnsl_middle nil)
    (elt_singleton formula-decl nil listprops nil)
    (elt_append3 formula-decl nil listprops nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_middle
     nil)
    (equality_length formula-decl nil listprops nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]"
     gnsl_middle nil)
    (sat_if_lift_implies formula-decl nil satisfaction4
     "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (elt_append2 formula-decl nil listprops nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_middle nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (i!4 skolem-const-decl
     "below[length[Identity](append(i!2`3, cons(hu(i!1`1), i!2`4)))]"
     gnsl_middle nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (equality_nth formula-decl nil listprops nil)
    (i!2 skolem-const-decl "[{x: list[Nonce] | length(x) = i!1`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!1`1},
 {x: list[Identity] | length(x) = i!1`1},
 {x: list[Identity] | length(x) = P!1 - 1 - i!1`1}]" gnsl_middle nil)
    (append_assoc formula-decl nil list_props nil)
    (i!4 skolem-const-decl
     "below[length[Identity](append(i!2`3, cons(hu(i!1`1), cdr(i!2`4))))]"
     gnsl_middle nil)
    (nl2!1 skolem-const-decl
     "{x: list[Nonce] | length(x) = -1 - mid + i!3}" gnsl_middle nil)
    (i!3 skolem-const-decl "{x: nat | mid < x AND x <= w!1}"
     gnsl_middle nil)
    (w!1 skolem-const-decl "{x: nat | mid < x AND x < p}" gnsl_middle
     nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_middle
     nil)
    (select_right_nonce2 formula-decl nil gnsl_middle nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_postmid def-decl "bool" gnsl_middle nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (TRUE const-decl "bool" booleans nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (set type-eq-decl nil sets nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (R_postmid const-decl "set[event]" gnsl_middle nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (UROLE_MIDDLE const-decl "process[event]" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (Message type-decl nil gnsl_middle nil)
    (INIT const-decl "bool" gnsl_middle nil)
    (\|- const-decl "bool" gnsl_middle nil)
    (event type-decl nil dynetwork nil)
    (USER_TCC2 existence-tcc nil gnsl_middle nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (restrictpostmid_last 0
  (restrictpostmid_last-1 nil 3399657608
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (expand "RankUser")
        (("" (interleaving2)
          (("" (expand "UROLE_LAST")
            (("" (typepred "P!1")
              (("" (lemma "select_right_nonce3" ("P" "P!1"))
                (("" (flatten)
                  (("" (delete -1)
                    (("" (choice3)
                      (("1" (prefix)
                        (("1" (delete 2 3)
                          (("1" (prefix)
                            (("1" (delete - 2 3)
                              (("1"
                                (expand "rho_postmid")
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (delete 3)
                              (("2"
                                (prefix)
                                (("1"
                                  (delete -2 -3 2 3)
                                  (("1"
                                    (expand "R_postmid")
                                    (("1"
                                      (case
                                       "w!1=P!1-1 AND append(i!2`2,(:u!1:))=hu_list AND nth(i!2`1,floor((mid/(p-1))*(P!1-1)))=n_mid")
                                      (("1"
                                        (delete -2 -3 1)
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2"
                                        (delete 3)
                                        (("2"
                                          (comment
                                           "explore the two reasons that could make -1 true")
                                          (("2"
                                            (expand "E")
                                            (("2"
                                              (expand "rho_postmid" -1)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (delete 1)
                                                  (("1"
                                                    (typepred "i!1")
                                                    (("1"
                                                      (lemma
                                                       "n_prop"
                                                       ("P"
                                                        "P!1"
                                                        "u"
                                                        "u!1"
                                                        "r"
                                                        "P!1-1"))
                                                      (("1"
                                                        (lemma
                                                         "elt_append3"
                                                         ("l1"
                                                          "i!2`1"
                                                          "l2"
                                                          "(:i!1:)"
                                                          "t"
                                                          "n_mid"))
                                                        (("1"
                                                          (lemma
                                                           "elt_singleton"
                                                           ("t1"
                                                            "i!1"
                                                            "t2"
                                                            "n_mid"))
                                                          (("1"
                                                            (grind
                                                             :if-match
                                                             nil
                                                             :exclude
                                                             "elt")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (comment
                                                   "2 cannot be true, so we will have to prove each conjunct of 1")
                                                  (("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (decompose-equality
                                                       -1)
                                                      (("2"
                                                        (decompose-equality
                                                         -2)
                                                        (("2"
                                                          (decompose-equality
                                                           -1)
                                                          (("2"
                                                            (decompose-equality
                                                             -2)
                                                            (("2"
                                                              (typepred
                                                               "nl1!1"
                                                               "nl2!1"
                                                               "i!2`1"
                                                               "i!2`2"
                                                               "hu_list")
                                                              (("2"
                                                                (delete
                                                                 -1
                                                                 -3
                                                                 -5
                                                                 -7
                                                                 -9
                                                                 2)
                                                                (("2"
                                                                  (case
                                                                   "P!1=p"
                                                                   "i!3=p-1")
                                                                  (("1"
                                                                    (replace*
                                                                     -1
                                                                     -2
                                                                     -11)
                                                                    (("1"
                                                                      (comment
                                                                       "prove each of the conjuncts in 1, except for the first which will help to prove 2")
                                                                      (("1"
                                                                        (split)
                                                                        (("1"
                                                                          (typepred
                                                                           "w!1"
                                                                           "i!3")
                                                                          (("1"
                                                                            (delete
                                                                             -1
                                                                             -3
                                                                             -6
                                                                             -7
                                                                             -8
                                                                             -9
                                                                             -10
                                                                             -11
                                                                             -12
                                                                             -13
                                                                             -14
                                                                             -15
                                                                             -16)
                                                                            (("1"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -8
                                                                           "p-1")
                                                                          (("2"
                                                                            (replace
                                                                             -8
                                                                             1
                                                                             rl)
                                                                            (("2"
                                                                              (delete
                                                                               -3
                                                                               -4
                                                                               -5
                                                                               -10
                                                                               -11)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "length_nth_equality[Identity]")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "length_append"
                                                                                   1)
                                                                                  (("1"
                                                                                    (delete
                                                                                     -1
                                                                                     -2
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     2)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skolem-typepred)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "length_append"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "nth_append"
                                                                                       ("l1"
                                                                                        "i!2`2"
                                                                                        "l2"
                                                                                        "(:nth(hu_list,p-1):)"
                                                                                        "i"
                                                                                        "i!4"))
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1)
                                                                                        (("1"
                                                                                          (delete
                                                                                           -1
                                                                                           2)
                                                                                          (("1"
                                                                                            (case
                                                                                             "i!4<p-1 OR i!4=p-1")
                                                                                            (("1"
                                                                                              (grind
                                                                                               :exclude
                                                                                               ("nth"
                                                                                                "append"
                                                                                                "remove"))
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "nth_remove"
                                                                                                 ("l"
                                                                                                  "hu_list"
                                                                                                  "i"
                                                                                                  "p-1"
                                                                                                  "j"
                                                                                                  "i!4"))
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   -3
                                                                                                   -4
                                                                                                   -5
                                                                                                   -6
                                                                                                   -7
                                                                                                   -8
                                                                                                   -9
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               -2
                                                                                               -3
                                                                                               -5
                                                                                               -6
                                                                                               -7
                                                                                               -8
                                                                                               2)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           "select_right_nonce3"
                                                                           ("P"
                                                                            "P!1"))
                                                                          (("3"
                                                                            (ground)
                                                                            (("3"
                                                                              (replace
                                                                               -5
                                                                               -1)
                                                                              (("3"
                                                                                (replace
                                                                                 -1
                                                                                 1)
                                                                                (("3"
                                                                                  (replace
                                                                                   -13
                                                                                   1)
                                                                                  (("3"
                                                                                    (rewrite
                                                                                     "nth_append"
                                                                                     1)
                                                                                    (("1"
                                                                                      (delete
                                                                                       -1
                                                                                       -2
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -7
                                                                                       -8
                                                                                       -9
                                                                                       -10
                                                                                       -11
                                                                                       -12
                                                                                       -13
                                                                                       -14
                                                                                       -15
                                                                                       2)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       1
                                                                                       1)
                                                                                      (("2"
                                                                                        (delete
                                                                                         -1
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5
                                                                                         -8
                                                                                         -9
                                                                                         -10
                                                                                         -11
                                                                                         -12
                                                                                         -13
                                                                                         -14
                                                                                         -15
                                                                                         2
                                                                                         3)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "mid")
                                                                                          (("2"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        ";;; prove each of the conjuncts in 1, except for the first which will help to prove 2"))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -9
                                                                     -4)
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append"
                                                                       -4)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -4
                                                                         1)
                                                                        (("2"
                                                                          (delete
                                                                           -5
                                                                           -6
                                                                           -7
                                                                           -8
                                                                           -9
                                                                           -10
                                                                           -11
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (replace
                                                                     -7
                                                                     -4)
                                                                    (("3"
                                                                      (rewrite
                                                                       "length_remove"
                                                                       -4
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (delete
                                                                         -1
                                                                         -2
                                                                         -3
                                                                         -6
                                                                         -7
                                                                         -8
                                                                         -9
                                                                         -10
                                                                         2
                                                                         3)
                                                                        (("1"
                                                                          (ground)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "p")
                                                                        (("2"
                                                                          (delete
                                                                           -2
                                                                           -3
                                                                           -4
                                                                           -5
                                                                           -7
                                                                           -8
                                                                           -9
                                                                           -10
                                                                           -11
                                                                           2
                                                                           3
                                                                           4)
                                                                          (("2"
                                                                            (nonemptylist
                                                                             "hu_list")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    ";;; 2 cannot be true, so we will have to prove each conjunct of 1"))
                                                  nil))
                                                nil))
                                              nil))
                                            ";;; explore the two reasons that could make -1 true"))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete 2 3)
                                  (("2"
                                    (prefix)
                                    (("2"
                                      (delete - 2 3 4)
                                      (("2" (stop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete - 2) (("2" (grind) nil nil)) nil)
                       ("3" (delete -1 -2 2)
                        (("3" (nonemptylist "i!2`2") nil nil)) nil)
                       ("4" (typepred "i!2`1")
                        (("4" (delete -1 -3 2) (("4" (ground) nil nil))
                          nil))
                        nil)
                       ("5" (typepred "i!2`2")
                        (("5" (delete -1 -3 -4 2)
                          (("5" (ground) nil nil)) nil))
                        nil)
                       ("6" (delete - 2) (("6" (grind) nil nil)) nil)
                       ("7" (skolem!)
                        (("7" (delete -1 -2 2)
                          (("7" (nonemptylist "il!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((event type-decl nil dynetwork nil)
    (\|- const-decl "bool" gnsl_middle nil)
    (INIT const-decl "bool" gnsl_middle nil)
    (Message type-decl nil gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (UROLE_LAST const-decl "process[event]" gnsl_middle nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (R_postmid const-decl "set[event]" gnsl_middle nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (member const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rho_postmid def-decl "bool" gnsl_middle nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_middle nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_middle nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_middle
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_middle nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_middle nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_middle
     nil)
    (E const-decl "Message" gnsl_middle nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_middle nil)
    (n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_middle
     nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_middle
     nil)
    (nth_append formula-decl nil listprops nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth_remove formula-decl nil listprops nil)
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_nth_equality formula-decl nil listprops nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (length_remove formula-decl nil listprops nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]"
     gnsl_middle nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_middle nil)
    (n_prop formula-decl nil gnsl_middle nil)
    (elt_singleton formula-decl nil listprops nil)
    (remove def-decl "list[T]" listprops nil)
    (elt_append3 formula-decl nil listprops nil)
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (select_right_nonce3 formula-decl nil gnsl_middle nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (RankUser const-decl "setof[trace[event]]" dynetwork nil))
   nil))
 (authentication_postmid 0
  (authentication_postmid-1 nil 3399647966
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      ((""
        (rewrite "authentication_by_rank" + ("rho" "rho_postmid(w!1)"))
        (("1" (delete 2)
          (("1" (comment "intruder's initial knowledge is in rho")
            (("1" (skolem!)
              (("1" (prop)
                (("1" (expand "INIT")
                  (("1" (expand "rho_postmid") (("1" (smash) nil nil))
                    nil))
                  nil))
                nil))
              ";;; intruder's initial knowledge is in rho"))
            nil))
          nil)
         ("2" (delete 2)
          (("2"
            (comment "from of a set of messages in rho, no message not in rho can be generated")
            (("2" (expand "|-")
              (("2" (rule-induct "Gen")
                (("2" (skolem!)
                  (("2" (smash)
                    (("1" (inst -2 "m!2") (("1" (prop) nil nil)) nil)
                     ("2" (delete -2)
                      (("2" (skolem!)
                        (("2" (flatten)
                          (("2" (replace -3 1)
                            (("2" (expand "rho_postmid" 1)
                              (("2" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (delete -2)
                      (("3" (skolem!)
                        (("3" (expand "rho_postmid" -1)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (delete -2)
                      (("4" (skolem!)
                        (("4" (expand "rho_postmid" -1)
                          (("4" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("5" (delete -2)
                      (("5" (skolem!)
                        (("5" (flatten)
                          (("5" (expand "rho_postmid" -1)
                            (("5" (replace -2 1)
                              (("5"
                                (expand "rho_postmid")
                                (("5"
                                  (delete -2)
                                  (("5" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (delete -2)
                      (("6" (skolem!)
                        (("6" (flatten)
                          (("6" (replace -2 1)
                            (("6" (delete -2)
                              (("6"
                                (expand "rho_postmid")
                                (("6"
                                  (expand "elt")
                                  (("6"
                                    (inst 1 "0")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (delete 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("7" (delete -2)
                      (("7" (skolem!)
                        (("7" (flatten)
                          (("7" (replace -3 1)
                            (("7" (delete -3)
                              (("7"
                                (expand "rho_postmid")
                                (("7"
                                  (lemma
                                   "elt_append3"
                                   ("l1"
                                    "nl1!1"
                                    "l2"
                                    "nl2!1"
                                    "t"
                                    "n_mid"))
                                  (("7" (prop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("8" (delete -2)
                      (("8" (skolem!)
                        (("8" (flatten)
                          (("8" (replace -3 1)
                            (("8" (delete -3)
                              (("8"
                                (replace -2 -1)
                                (("8"
                                  (delete -2)
                                  (("8"
                                    (expand "rho_postmid")
                                    (("8"
                                      (lemma
                                       "elt_append1"
                                       ("l1"
                                        "nl1!1"
                                        "l2"
                                        "nl2!1"
                                        "t"
                                        "n_mid"))
                                      (("8" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("9" (delete -2)
                      (("9" (skolem!)
                        (("9" (flatten)
                          (("9" (replace -3 1)
                            (("9" (delete -3)
                              (("9"
                                (replace -2 -1)
                                (("9"
                                  (delete -2)
                                  (("9"
                                    (expand "rho_postmid")
                                    (("9"
                                      (lemma
                                       "elt_append2"
                                       ("l1"
                                        "nl1!1"
                                        "l2"
                                        "nl2!1"
                                        "t"
                                        "n_mid"))
                                      (("9" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("10" (delete -2)
                      (("10" (skolem!)
                        (("10" (flatten)
                          (("10" (replace -2 1)
                            (("10" (delete -2)
                              (("10"
                                (expand "rho_postmid" 1)
                                (("10" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("11" (delete -2)
                      (("11" (skolem!)
                        (("11" (flatten)
                          (("11" (replace -2 1)
                            (("11" (delete -)
                              (("11"
                                (expand "rho_postmid")
                                (("11" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("12" (delete -2)
                      (("12" (skolem!)
                        (("12" (flatten)
                          (("12" (replace -3 1)
                            (("12" (delete -3)
                              (("12"
                                (expand "rho_postmid" 1)
                                (("12" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("13" (delete -2)
                      (("13" (skolem!)
                        (("13" (flatten)
                          (("13" (replace -3 1)
                            (("13" (delete -)
                              (("13"
                                (expand "rho_postmid")
                                (("13" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("14" (delete -2)
                      (("14" (skolem!)
                        (("14" (flatten)
                          (("14" (replace -3 1)
                            (("14" (delete -)
                              (("14"
                                (expand "rho_postmid")
                                (("14" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("15" (delete -2)
                      (("15" (skolem!)
                        (("15" (flatten)
                          (("15" (replace -3 1)
                            (("15" (delete -3)
                              (("15"
                                (typepred "k!1")
                                (("15"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand "rho_postmid" -3)
                                    (("2"
                                      (assert)
                                      (("2" (lazy-grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              ";;; from of a set of messages in rho, no message not in rho can be generated"))
            nil))
          nil)
         ("3" (delete 2)
          (("3" (comment "users maintain the rank function")
            (("3" (skolem!)
              (("3" (expand "USER")
                (("3" (expand "RankUser")
                  (("3" (interleaving2)
                    (("1" (interleaving)
                      (("1" (interleaving)
                        (("1"
                          (lemma "restrictpostmid_init"
                           ("P" "i!2" "u" "i!1"))
                          (("1"
                            (grind :exclude
                             ("rho_postmid" "UROLE_INIT"))
                            nil nil))
                          nil)
                         ("2"
                          (lemma "restrictpostmid_last"
                           ("P" "i!2" "u" "i!1"))
                          (("2"
                            (grind :exclude
                             ("rho_postmid" "UROLE_LAST"))
                            nil nil))
                          nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (stop) nil nil)
                           ("2"
                            (lemma "restrictpostmid_middle"
                             ("P" "i!2" "u" "i!1"))
                            (("2"
                              (grind :exclude
                               ("rho_postmid" "UROLE_MIDDLE"))
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (delete 3)
                        (("3" (use "USER_TCC2") (("3" (prop) nil nil))
                          nil))
                        nil)
                       ("4" (delete 2)
                        (("4" (use "USER_TCC2") nil nil)) nil))
                      nil)
                     ("2" (delete 2) (("2" (use "USER_TCC2") nil nil))
                      nil)
                     ("3" (delete 2)
                      (("3" (skolem!) (("3" (use "USER_TCC2") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              ";;; users maintain the rank function"))
            nil))
          nil)
         ("4" (delete 2)
          (("4" (comment "T is not in rho")
            (("4" (skolem-typepred)
              (("4" (expand "T")
                (("4" (replace -1 -2)
                  (("4" (delete -1) (("4" (grind) nil nil)) nil)) nil))
                nil))
              ";;; T is not in rho"))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (restriction_free_par formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uniform_interleave2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (restrictpostmid_last formula-decl nil gnsl_middle nil)
    (restrictpostmid_init formula-decl nil gnsl_middle nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Par const-decl "process" processes "../pvs6_csp_rules/")
    (\|> const-decl "bool" satisfaction "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (restrictpostmid_middle formula-decl nil gnsl_middle nil)
    (USER_TCC2 existence-tcc nil gnsl_middle nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (TRUE const-decl "bool" booleans nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (// const-decl "process" processes "../pvs6_csp_rules/")
    (Interleave const-decl "process[T]" multipar "../pvs6_csp_rules/")
    (UROLE_INIT const-decl "process[event]" gnsl_middle nil)
    (UROLE_LAST const-decl "process[event]" gnsl_middle nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (UROLE_MIDDLE const-decl "process[event]" gnsl_middle nil)
    (complement const-decl "set" sets nil)
    (E const-decl "Message" gnsl_middle nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (remove def-decl "list[T]" listprops nil)
    (append def-decl "list[T]" list_props nil)
    (Key type-eq-decl nil gnsl_middle nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_middle
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (elt_append2 formula-decl nil listprops nil)
    (elt_append1 formula-decl nil listprops nil)
    (elt_append3 formula-decl nil listprops nil)
    (nat_from_2 type-eq-decl nil gnsl_middle nil)
    (Role type-eq-decl nil gnsl_middle nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_middle nil)
    (nat_to_p type-eq-decl nil gnsl_middle nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_middle nil)
    (Nonces nonempty-type-eq-decl nil gnsl_middle nil)
    (n_mid const-decl "Nonces(p, hu(mid), mid)" gnsl_middle nil)
    (n!1 skolem-const-decl "Nonce" gnsl_middle nil)
    (below type-eq-decl nil nat_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (Nonce nonempty-type-eq-decl nil gnsl_middle nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (elt const-decl "bool" listprops nil)
    (/= const-decl "boolean" notequal nil)
    (Gen_weak_induction formula-decl nil gnsl_middle nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (\|- const-decl "bool" gnsl_middle nil)
    (setof type-eq-decl nil defined_types nil)
    (INIT const-decl "bool" gnsl_middle nil)
    (Message type-decl nil gnsl_middle nil)
    (Identity nonempty-type-eq-decl nil gnsl_middle nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (USER const-decl "process[event]" gnsl_middle nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (rho_postmid def-decl "bool" gnsl_middle nil)
    (T const-decl "set[event]" gnsl_middle nil)
    (R_postmid const-decl "set[event]" gnsl_middle nil)
    (set type-eq-decl nil sets nil)
    (mid const-decl "nat_1_to(p)" gnsl_middle nil)
    (nat_1_to type-eq-decl nil gnsl_middle nil)
    (p const-decl "nat_from_3" gnsl_middle nil)
    (nat_from_3 type-eq-decl nil gnsl_middle nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (event type-decl nil dynetwork nil)
    (authentication_by_rank formula-decl nil dynetwork nil))
   nil)))

