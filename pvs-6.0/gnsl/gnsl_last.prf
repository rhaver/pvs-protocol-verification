(gnsl_last
 (p_TCC1 0
  (p_TCC1-1 nil 3399226846 ("" (inst 1 "2") nil nil)
   ((nat_from_2 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (hu_TCC1 0
  (hu_TCC1-1 nil 3399226846
   ("" (inst 1 "LAMBDA (k: nat_to_p): k") (("" (skosimp) nil nil)) nil)
   ((/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (Nonces_TCC1 0
  (Nonces_TCC1-1 nil 3399226846
   ("" (skolem-typepred)
    (("" (typepred "pt[[nat_from_2, Identity, Role], Nonce]")
      (("" (delete -1)
        (("" (inst -1 "(P!1, i!1, r!1)")
          (("" (skolem!)
            (("" (inst 1 "n!1") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (setof type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (n!1 skolem-const-decl "Nonce" gnsl_last nil)
    (r!1 skolem-const-decl "Role" gnsl_last nil)
    (i!1 skolem-const-decl "Identity" gnsl_last nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (n_last_TCC1 0
  (n_last_TCC1-1 nil 3399226846 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (n_last_TCC2 0
  (n_last_TCC2-1 nil 3399226846 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (n_prop 0
  (n_prop-1 nil 3399226953
   ("" (skolem-typepred)
    ((""
      (typepred "n_last" "pt[[nat_from_2, Identity, Role], Nonce]" "p")
      (("" (delete -3)
        (("" (inst -2 "(P!1, u!1, r!1)" "(p, hu(p-1), p-1)" "n_last")
          (("1" (grind) nil nil)
           ("2" (delete -1 -3 -4 -5 2) (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (n_orig 0
  (n_orig-1 nil 3399227217
   ("" (skosimp)
    ((""
      (typepred "pt[[nat_from_2, Identity, Role], Nonce]" "n_last" "p")
      (("" (delete -2)
        (("" (inst -1 "(P!1, u!1, r!1)" "(p, hu(p-1), p-1)" "n_last")
          (("1" (grind) nil nil)
           ("2" (delete -1 -3 2) (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (setof type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (E_TCC1 0
  (E_TCC1-1 nil 3399226846 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_last nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil))
   nil))
 (UROLE_INIT_TCC1 0
  (UROLE_INIT_TCC1-1 nil 3399226846
   ("" (skolem-typepred)
    (("" (delete -2 -3 -4)
      (("" (lemma "length_non_zero" ("l" "il!1"))
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (UROLE_INIT_TCC2 0
  (UROLE_INIT_TCC2-1 nil 3399226846 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (UROLE_INIT_TCC3 0
  (UROLE_INIT_TCC3-1 nil 3399226846 ("" (subtype-tcc) nil nil) nil
   nil))
 (UROLE_INIT_TCC4 0
  (UROLE_INIT_TCC4-1 nil 3662270950 ("" (ground) nil nil) nil nil))
 (UROLE_LAST_TCC1 0
  (UROLE_LAST_TCC1-1 nil 3399226846 ("" (subtype-tcc) nil nil) nil
   nil))
 (UROLE_LAST_TCC2 0
  (UROLE_LAST_TCC2-1 nil 3399226846 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil))
   nil))
 (UROLE_LAST_TCC3 0
  (UROLE_LAST_TCC3-1 nil 3399226846
   ("" (skolem!)
    (("" (prop)
      (("" (case "P!1=p")
        (("1" (ground) nil nil)
         ("2" (delete 2)
          (("2" (typepred "nnP!1")
            (("2" (lemma "n_orig" ("P" "P!1" "u" "u!1" "r" "P!1-1"))
              (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (n_orig formula-decl nil gnsl_last nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil))
   nil))
 (UROLE_LAST_TCC4 0
  (UROLE_LAST_TCC4-1 nil 3399226846 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (UROLE_LAST_TCC5 0
  (UROLE_LAST_TCC5-1 nil 3399226846 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   nil))
 (UROLE_LAST_TCC6 0
  (UROLE_LAST_TCC6-1 nil 3399226846
   ("" (skolem-typepred 1)
    (("" (lemma "n_orig" ("P" "P!1" "u" "u!1")) (("" (grind) nil nil))
      nil))
    nil)
   ((n_orig formula-decl nil gnsl_last nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (UROLE_LAST_TCC7 0
  (UROLE_LAST_TCC7-1 nil 3399226846 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (LastMessage_TCC1 0
  (LastMessage_TCC1-1 nil 3399226846
   ("" (skolem-typepred) (("" (ground) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_from_3 type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (LastMessage_TCC2 0
  (LastMessage_TCC2-1 nil 3399226846
   ("" (skosimp)
    (("" (typepred "il2!1" "P!1")
      (("" (delete -1)
        (("" (lemma "length_non_zero" ("l" "il2!1"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat_1_to type-eq-decl nil gnsl_last nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (LastMessage_TCC3 0
  (LastMessage_TCC3-1 nil 3399297313
   ("" (skosimp)
    (("" (typepred "il2!1" "P!1" "i!1")
      (("" (delete -1 -4 1)
        (("" (lemma "length_non_zero" ("l" "il2!1"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat_1_to type-eq-decl nil gnsl_last nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC1 0
  (UROLE_MIDDLE_TCC1-1 nil 3399226846 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC2 0
  (UROLE_MIDDLE_TCC2-1 nil 3399226846
   ("" (skolem!)
    (("" (typepred "il2!1" "P!1" "i!1")
      (("" (delete -1 -4)
        (("" (lemma "length_non_zero" ("l" "il2!1"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nat_1_to type-eq-decl nil gnsl_last nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (UROLE_MIDDLE_TCC3 0
  (UROLE_MIDDLE_TCC3-1 nil 3399226846 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (USER_TCC1 0
  (USER_TCC1-1 nil 3399226846 ("" (subtype-tcc) nil nil) nil nil))
 (USER_TCC2 0
  (USER_TCC2-1 nil 3399297313
   ("" (skolem-typepred)
    (("" (prop)
      (("" (case "3 <= P!1")
        (("1" (delete -2 -3 1)
          (("1" (typepred "pt[[nat_from_2, Identity, Role], Nonce]")
            (("1" (delete -1)
              (("1" (inst -1 "(P!1,i!1,1)")
                (("1" (skolem!)
                  (("1" (inst 1 "(1,n!1)")
                    (("1" (expand "IRpart") (("1" (propax) nil nil))
                      nil)
                     ("2" (delete -1) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (delete - 2) (("2" (inst 1 "0") nil nil)) nil))
            nil))
          nil)
         ("2" (delete -1 3) (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n!1 skolem-const-decl "Nonce" gnsl_last nil)
    (i!1 skolem-const-decl "Identity" gnsl_last nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_last nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (nat_1_to type-eq-decl nil gnsl_last nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (setof type-eq-decl nil defined_types nil)
    (pt const-decl "{p |
         (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
          (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (hu_list_exists_TCC1 0
  (hu_list_exists_TCC1-1 nil 3399226846 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil))
 (hu_list_exists 0
  (hu_list_exists-1 nil 3399227364
   ("" (typepred "p")
    (("" (inst 1 "gen_f_list(p, 0, hu)")
      (("1" (split)
        (("1" (rewrite "gen1") nil nil)
         ("2" (skolem!) (("2" (rewrite "gen2") nil nil)) nil))
        nil)
       ("2" (ground) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (gen_f_list def-decl "list[T]" listprops nil)
    (gen2 formula-decl nil listprops nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (gen1 formula-decl nil listprops nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil))
   shostak))
 (hu_list_TCC1 0
  (hu_list_TCC1-1 nil 3399226846
   ("" (lemma "hu_list_exists") (("" (propax) nil nil)) nil)
   ((hu_list_exists formula-decl nil gnsl_last nil)) nil))
 (cons_hu_list 0
  (cons_hu_list-1 nil 3399227397
   ("" (typepred "p" "hu_list")
    (("" (delete -2 -4)
      (("" (lemma "length_non_zero" ("l" "hu_list"))
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_last nil))
   shostak))
 (rho_init_TCC1 0
  (rho_init_TCC1-1 nil 3399284370 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Message])" gnsl_last nil))
   nil))
 (rho_init_TCC2 0
  (rho_init_TCC2-1 nil 3399284370 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Message])" gnsl_last nil))
   nil))
 (rho_init_TCC3 0
  (rho_init_TCC3-1 nil 3399284370 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_last nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_last nil))
   nil))
 (rho_init_TCC4 0
  (rho_init_TCC4-1 nil 3399284370 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_last nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (rho_init_TCC5 0
  (rho_init_TCC5-1 nil 3399284370
   ("" (skosimp*)
    (("" (typepred "hu_list" "p")
      (("" (delete -1 -3 -5 -6 1)
        (("" (lemma "length_non_zero" ("l" "hu_list"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_last nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (rho_middle_TCC1 0
  (rho_middle_TCC1-1 nil 3399303571 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_1_to type-eq-decl nil gnsl_last nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_last nil))
   nil))
 (rho_middle_TCC2 0
  (rho_middle_TCC2-1 nil 3399303571 ("" (subtype-tcc) nil nil) nil
   nil))
 (rho_middle_TCC3 0
  (rho_middle_TCC3-1 nil 3399303571
   ("" (skosimp*)
    (("" (typepred "hu_list" "p")
      (("" (delete -1 -3 -5 -6 1)
        (("" (lemma "length_non_zero" ("l" "hu_list"))
          (("" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_last nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (rho_middle_TCC4 0
  (rho_middle_TCC4-1 nil 3399305133 ("" (subtype-tcc) nil nil) nil
   nil))
 (rho_middle_TCC5 0
  (rho_middle_TCC5-1 nil 3399305133 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_1_to type-eq-decl nil gnsl_last nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_last nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (restrictinit_init 0
  (restrictinit_init-1 nil 3399286987
   ("" (auto-rewrite-theory "sets")
    (("" (auto-rewrite "n_last_TCC2")
      (("" (skolem!)
        (("" (expand "RankUser")
          (("" (interleaving2)
            (("" (expand "UROLE_INIT")
              (("" (typepred "P!1")
                (("" (choice3)
                  (("1" (prefix)
                    (("1" (delete 2 3)
                      (("1" (typepred "i!1")
                        (("1"
                          (lemma "n_prop"
                           ("P" "P!1" "u" "u!1" "r" "0"))
                          (("1"
                            (lemma "elt_singleton"
                             ("t1" "i!1" "t2" "n_last"))
                            (("1" (grind :if-match nil :exclude "elt")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete 2 3)
                      (("2" (prefix)
                        (("2" (delete 2 3)
                          (("2" (prefix)
                            (("1" (delete - 2 3)
                              (("1"
                                (expand "rho_init")
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (delete 3)
                              (("2"
                                (prefix)
                                (("1"
                                  (delete 2 3)
                                  (("1"
                                    (expand "R_init")
                                    (("1"
                                      (case
                                       "cons(u!1,i!2`2)=hu_list AND nth(i!2`1,P!1-2)=n_last")
                                      (("1"
                                        (delete -2 -3 1)
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2"
                                        (delete 3)
                                        (("2"
                                          (expand "E")
                                          (("2"
                                            (expand "rho_init" -1)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (delete 1)
                                                (("1"
                                                  (lemma
                                                   "elt_append2"
                                                   ("l1"
                                                    "(:i!1:)"
                                                    "l2"
                                                    "i!2`1"
                                                    "t"
                                                    "n_last"))
                                                  (("1"
                                                    (grind
                                                     :if-match
                                                     nil
                                                     :exclude
                                                     "elt")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skolem!)
                                                  (("2"
                                                    (decompose-equality
                                                     -1)
                                                    (("2"
                                                      (decompose-equality
                                                       -2)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("2"
                                                          (decompose-equality
                                                           -2)
                                                          (("2"
                                                            (typepred
                                                             "nl!1"
                                                             "i!2`1"
                                                             "i!2`2"
                                                             "hu_list")
                                                            (("2"
                                                              (delete
                                                               -1
                                                               -3
                                                               -5
                                                               -7
                                                               2)
                                                              (("2"
                                                                (case
                                                                 "P!1=p")
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (replace
                                                                     -7
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -9
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "0")
                                                                        (("1"
                                                                          (replace
                                                                           -6
                                                                           1
                                                                           rl)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "list_cons_eta"
                                                                               1)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "equality_nth"
                                                                     ("l1"
                                                                      "cons(i!1,i!2`1)"
                                                                      "l2"
                                                                      "append(nl!1,(:n_last:))"))
                                                                    (("2"
                                                                      (prop)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "P!1-1")
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (rewrite
                                                                               "nth_append"
                                                                               1)
                                                                              (("1"
                                                                                (replace*
                                                                                 -2
                                                                                 -3)
                                                                                (("1"
                                                                                  (delete
                                                                                   -)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (delete
                                                                                 -1
                                                                                 -4
                                                                                 -5
                                                                                 -6
                                                                                 -7
                                                                                 -8
                                                                                 -9
                                                                                 -10
                                                                                 -11
                                                                                 2)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "length"
                                                                           1)
                                                                          (("2"
                                                                            (delete
                                                                             -1
                                                                             -2
                                                                             -4
                                                                             -5
                                                                             -6
                                                                             -7
                                                                             -8
                                                                             -9
                                                                             -10
                                                                             2)
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (replace
                                                                   -6
                                                                   -3)
                                                                  (("2"
                                                                    (rewrite
                                                                     "length_cdr"
                                                                     -3)
                                                                    (("2"
                                                                      (delete
                                                                       -1
                                                                       -2
                                                                       -5
                                                                       -6
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       2)
                                                                      (("2"
                                                                        (ground)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete - 2 3 4)
                                  (("2" (stop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (delete 2)
                    (("2" (nonemptylist "i!2`1") nil nil)) nil)
                   ("3" (delete 2)
                    (("3" (nonemptylist "i!2`2") nil nil)) nil)
                   ("4" (delete - 2) (("4" (grind) nil nil)) nil)
                   ("5" (delete 2)
                    (("5" (nonemptylist "i!2`2") nil nil)) nil)
                   ("6" (delete - 2) (("6" (grind) nil nil)) nil)
                   ("7" (skolem!)
                    (("7" (delete 2)
                      (("7" (nonemptylist "il!1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_last nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_last nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_last
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_last nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_last
     nil)
    (E const-decl "Message" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_last nil)
    (elt_append2 formula-decl nil listprops nil)
    (append def-decl "list[T]" list_props nil)
    (n_last_TCC2 subtype-tcc nil gnsl_last nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_last
     nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (list_cons_eta formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_append formula-decl nil listprops nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i!2 skolem-const-decl "[{x: list[Nonce] | length(x) = P!1 - 1},
 {x: list[Identity] | length(x) = P!1 - 1}]" gnsl_last nil)
    (i!1 skolem-const-decl "Nonces(P!1, u!1, 0)" gnsl_last nil)
    (u!1 skolem-const-decl "Identity" gnsl_last nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_last nil)
    (equality_nth formula-decl nil listprops nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_last
     nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_last
     nil)
    (n_prop formula-decl nil gnsl_last nil)
    (n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (elt_singleton formula-decl nil listprops nil)
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_init def-decl "bool" gnsl_last nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (set type-eq-decl nil sets nil)
    (R_init const-decl "set[event]" gnsl_last nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (UROLE_INIT const-decl "process[event]" gnsl_last nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (Message type-decl nil gnsl_last nil)
    (INIT const-decl "bool" gnsl_last nil)
    (\|- const-decl "bool" gnsl_last nil)
    (event type-decl nil dynetwork nil))
   nil))
 (restrictinit_middle 0
  (restrictinit_middle-1 nil 3399302272
   ("" (auto-rewrite-theory "sets")
    (("" (auto-rewrite "n_last_TCC2" "USER_TCC2")
      (("" (skolem!)
        (("" (expand "RankUser")
          (("" (prop)
            (("" (interleaving2)
              (("" (typepred "P!1" "i!1`1")
                (("" (expand "UROLE_MIDDLE")
                  (("" (choice3)
                    (("1" (prefix)
                      (("1" (delete 2 3)
                        (("1" (prefix)
                          (("1" (delete 2 3)
                            (("1" (expand "E")
                              (("1"
                                (expand "rho_init" -1)
                                (("1"
                                  (split)
                                  (("1"
                                    (typepred "i!1`2")
                                    (("1"
                                      (lemma
                                       "n_prop"
                                       ("P"
                                        "P!1"
                                        "u"
                                        "u!1"
                                        "r"
                                        "i!1`1"))
                                      (("1"
                                        (lemma
                                         "elt_append3"
                                         ("l1"
                                          "i!2`1"
                                          "l2"
                                          "(:i!1`2:)"
                                          "t"
                                          "n_last"))
                                        (("1"
                                          (lemma
                                           "elt_singleton"
                                           ("t1"
                                            "i!1`2"
                                            "t2"
                                            "n_last"))
                                          (("1"
                                            (grind
                                             :if-match
                                             nil
                                             :exclude
                                             "elt")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (comment "contradiction in -1")
                                    (("2"
                                      (skosimp*)
                                      (("2"
                                        (decompose-equality -2)
                                        (("2"
                                          (decompose-equality -1)
                                          (("2"
                                            (decompose-equality -2)
                                            (("2"
                                              (typepred
                                               "i!2`1"
                                               "i!2`3"
                                               "i!2`4"
                                               "nl!1"
                                               "hu_list")
                                              (("2"
                                                (delete
                                                 -1
                                                 -3
                                                 -5
                                                 -7
                                                 -9
                                                 -14
                                                 +)
                                                (("2"
                                                  (case "P!1=p")
                                                  (("1"
                                                    (replace -9 -2)
                                                    (("1"
                                                      (rewrite
                                                       "length_append"
                                                       -2)
                                                      (("1"
                                                        (delete
                                                         -3
                                                         -4
                                                         -6
                                                         -7
                                                         -8
                                                         -9
                                                         -10
                                                         -11)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "equality_length"
                                                     ("l1"
                                                      "append(i!2`3,i!2`4)"
                                                      "l2"
                                                      "cdr(hu_list)"))
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (rewrite
                                                         "length_append"
                                                         -1)
                                                        (("2"
                                                          (rewrite
                                                           "length_cdr"
                                                           -1)
                                                          (("2"
                                                            (delete
                                                             -2
                                                             -5
                                                             -7
                                                             -8
                                                             -9
                                                             -10
                                                             -11
                                                             -12)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      ";;; contradiction in -1"))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (delete 2 3)
                            (("2" (prefix)
                              (("2"
                                (delete 2 3)
                                (("2"
                                  (prefix)
                                  (("1"
                                    (delete - 2 3 4)
                                    (("1"
                                      (expand "rho_init")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete -2 2 3)
                                    (("2"
                                      (expand "E")
                                      (("2"
                                        (expand "rho_init" -1)
                                        (("2"
                                          (split)
                                          (("1"
                                            (expand "LastMessage")
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (prefix)
                                                  (("1"
                                                    (delete 2 3)
                                                    (("1"
                                                      (lemma
                                                       "elt_append2"
                                                       ("l1"
                                                        "(:i!1`2:)"
                                                        "l2"
                                                        "i!2`2"
                                                        "t"
                                                        "n_last"))
                                                      (("1"
                                                        (grind
                                                         :if-match
                                                         nil
                                                         :exclude
                                                         "elt")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete - 2 3 4)
                                                    (("2"
                                                      (stop)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (prefix)
                                                  (("1"
                                                    (delete 2 3)
                                                    (("1"
                                                      (lemma
                                                       "elt_append2"
                                                       ("l1"
                                                        "(:i!1`2:)"
                                                        "l2"
                                                        "i!2`2"
                                                        "t"
                                                        "n_last"))
                                                      (("1"
                                                        (grind
                                                         :if-match
                                                         nil
                                                         :exclude
                                                         "elt")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (delete - 2 3 4 5)
                                                    (("2"
                                                      (stop)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (comment
                                             "contradiction in -1")
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (skolem!)
                                                (("2"
                                                  (delete
                                                   -1
                                                   -3
                                                   -4
                                                   -5
                                                   +)
                                                  (("2"
                                                    (decompose-equality
                                                     -1)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              ";;; contradiction in -1"))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "i!2`2")
                      (("2" (delete -1 -3 -4 -5 2 3)
                        (("2" (ground) nil nil)) nil))
                      nil)
                     ("3" (delete -2 2 3)
                      (("3" (nonemptylist "i!2`4") nil nil)) nil)
                     ("4" (typepred "i!2`3")
                      (("4" (delete -1 -3 -4 -5 2 3)
                        (("4" (ground) nil nil)) nil))
                      nil)
                     ("5" (skolem!)
                      (("5" (delete -2 2 3)
                        (("5" (nonemptylist "il2!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (member const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (USER_TCC2 existence-tcc nil gnsl_last nil)
    (event type-decl nil dynetwork nil)
    (\|- const-decl "bool" gnsl_last nil)
    (INIT const-decl "bool" gnsl_last nil)
    (Message type-decl nil gnsl_last nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_1_to type-eq-decl nil gnsl_last nil)
    (UROLE_MIDDLE const-decl "process[event]" gnsl_last nil)
    (nat_from_3 type-eq-decl nil gnsl_last nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (R_init const-decl "set[event]" gnsl_last nil)
    (set type-eq-decl nil sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (TRUE const-decl "bool" booleans nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rho_init def-decl "bool" gnsl_last nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (n_prop formula-decl nil gnsl_last nil)
    (elt_singleton formula-decl nil listprops nil)
    (n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (elt_append3 formula-decl nil listprops nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_last
     nil)
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (equality_length formula-decl nil listprops nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_last
     nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_last nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (n_last_TCC2 subtype-tcc nil gnsl_last nil)
    (elt_append2 formula-decl nil listprops nil)
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (E const-decl "Message" gnsl_last nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_last
     nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_last nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_last
     nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_last nil)
    (append def-decl "list[T]" list_props nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_last nil)
    (LastMessage const-decl "event" gnsl_last nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (restrictinit_last 0
  (restrictinit_last-1 nil 3399294355
   ("" (auto-rewrite-theory "sets")
    (("" (auto-rewrite "n_last_TCC2")
      (("" (skolem!)
        (("" (expand "RankUser")
          (("" (interleaving2)
            (("" (expand "UROLE_LAST")
              (("" (lift-if)
                (("" (typepred "P!1")
                  (("" (prop)
                    (("1" (choice3)
                      (("1" (case "P!1=p AND u!1=hu(p-1)")
                        (("1" (flatten)
                          (("1" (replace* -1 -2 -3)
                            (("1" (prefix)
                              (("1"
                                (delete 2 3)
                                (("1"
                                  (prefix)
                                  (("1"
                                    (delete -1 2 3)
                                    (("1"
                                      (expand "E")
                                      (("1"
                                        (expand "rho_init")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (typepred
                                             "i!2`1"
                                             "i!2`2"
                                             "hu_list")
                                            (("1"
                                              (delete
                                               -1
                                               -3
                                               -6
                                               -10
                                               -11
                                               1)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (inst -3 "0")
                                                    (("1"
                                                      (expand "nth" -3)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 1 "i!2`1")
                                                  (("2"
                                                    (mdecompose-equality
                                                     1)
                                                    (("2"
                                                      (case
                                                       "length(append(cdr(i!2`2),(:hu(p-1):)))=p-1")
                                                      (("1"
                                                        (rewrite
                                                         "length_nth_equality[Identity]")
                                                        (("1"
                                                          (rewrite
                                                           "length_cdr"
                                                           1)
                                                          (("1"
                                                            (delete
                                                             -2
                                                             -3
                                                             -4
                                                             -6
                                                             -7
                                                             -8
                                                             2)
                                                            (("1"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skolem-typepred)
                                                          (("2"
                                                            (lemma
                                                             "nth_append"
                                                             ("l1"
                                                              "cdr(i!2`2)"
                                                              "l2"
                                                              "(:hu(p-1):)"
                                                              "i"
                                                              "i!3"))
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (delete
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (rewrite
                                                                   "length_cdr"
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "nth_cdr"
                                                                     ("c"
                                                                      "hu_list"
                                                                      "i"
                                                                      "i!3"))
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (delete
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           -7
                                                                           "i!3+1")
                                                                          (("1"
                                                                            (case
                                                                             "i!3<p-2 OR i!3=p-2")
                                                                            (("1"
                                                                              (grind
                                                                               :exclude
                                                                               "nth")
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -6)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "nth"
                                                                                 1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               -3
                                                                               -4
                                                                               -5
                                                                               -6
                                                                               -7
                                                                               -8
                                                                               -9
                                                                               2)
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (delete
                                                               -2
                                                               -3
                                                               -4
                                                               -5
                                                               -6
                                                               -7
                                                               -8
                                                               -9
                                                               2
                                                               3)
                                                              (("2"
                                                                (rewrite
                                                                 "length_append"
                                                                 -1)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "length_append"
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "length_cdr"
                                                           1)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -3
                                                             -4
                                                             -5
                                                             -7
                                                             2)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete 2 3)
                                    (("2"
                                      (prefix)
                                      (("2"
                                        (delete -2 -3 -4 -5 -6 +)
                                        (("2"
                                          (grind :if-match nil)
                                          (("2"
                                            (inst 1 "0")
                                            (("2"
                                              (expand "nth")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "i!1")
                          (("2"
                            (lemma "n_orig"
                             ("P" "P!1" "u" "u!1" "r" "P!1-1"))
                            (("2" (delete -4 2)
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete - 2) (("2" (grind) nil nil)) nil)
                       ("3" (delete -1 2)
                        (("3" (nonemptylist "i!2`2") nil nil)) nil)
                       ("4" (typepred "i!2`2")
                        (("4" (delete -1 -3 -4 -5 2)
                          (("4" (ground) nil nil)) nil))
                        nil)
                       ("5" (prop)
                        (("5" (skolem-typepred)
                          (("5" (delete -2 2)
                            (("5" (typepred "i!1")
                              (("5"
                                (lemma
                                 "n_orig"
                                 ("P" "P!1" "u" "u!1" "r" "P!1-1"))
                                (("5" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("6" (prop)
                        (("6" (skolem-typepred)
                          (("6" (delete -3 -4 2)
                            (("6" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("7" (delete - 2) (("7" (grind) nil nil)) nil)
                       ("8" (skolem!)
                        (("8" (delete -1 2)
                          (("8" (nonemptylist "il!1") nil nil)) nil))
                        nil)
                       ("9" (skosimp*)
                        (("9" (typepred "i!1" "i!2")
                          (("9" (delete -3 -5 2)
                            (("9"
                              (lemma "n_orig"
                               ("P" "P!1" "u" "u!1" "r" "P!1-1"))
                              (("9" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("10" (skosimp*)
                        (("10" (typepred "i!2")
                          (("10" (delete -3 -4 2)
                            (("10" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (choice3)
                      (("1" (prefix)
                        (("1" (delete 2 3)
                          (("1" (prefix)
                            (("1" (delete 2 3)
                              (("1"
                                (expand "E")
                                (("1"
                                  (expand "rho_init" -1)
                                  (("1"
                                    (split)
                                    (("1"
                                      (lemma
                                       "elt_append3"
                                       ("l1"
                                        "i!2`1"
                                        "l2"
                                        "(:i!1:)"
                                        "t"
                                        "n_last"))
                                      (("1"
                                        (lemma
                                         "elt_singleton"
                                         ("t1" "i!1" "t2" "n_last"))
                                        (("1"
                                          (grind :exclude "elt")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (decompose-equality -1)
                                        (("2"
                                          (decompose-equality -2)
                                          (("2"
                                            (decompose-equality -1)
                                            (("2"
                                              (decompose-equality -2)
                                              (("2"
                                                (typepred
                                                 "nl!1"
                                                 "i!2`1"
                                                 "i!2`2"
                                                 "hu_list")
                                                (("2"
                                                  (delete
                                                   -1
                                                   -3
                                                   -5
                                                   -7
                                                   +)
                                                  (("2"
                                                    (case "P!1=p")
                                                    (("1"
                                                      (replace -8 -3)
                                                      (("1"
                                                        (rewrite
                                                         "length_append"
                                                         -3)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (delete
                                                             -2
                                                             -4
                                                             -5
                                                             -6
                                                             -7
                                                             -8
                                                             -9
                                                             -10)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -6 -3)
                                                      (("2"
                                                        (rewrite
                                                         "length_cdr"
                                                         -3)
                                                        (("2"
                                                          (delete
                                                           -1
                                                           -2
                                                           -5
                                                           -6
                                                           -7
                                                           -8
                                                           -9)
                                                          (("2"
                                                            (ground)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete 2 3)
                              (("2"
                                (prefix)
                                (("2"
                                  (delete 2 3)
                                  (("2"
                                    (prefix)
                                    (("1"
                                      (delete - 2 3)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (delete - 2 3 4)
                                      (("2" (stop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete - 2 3) (("2" (grind) nil nil)) nil)
                       ("3" (delete 2 3)
                        (("3" (nonemptylist "i!2`2") nil nil)) nil)
                       ("4" (typepred "i!2`2")
                        (("4" (delete -1 -3 2 3)
                          (("4" (ground) nil nil)) nil))
                        nil)
                       ("5" (delete - 2 3) (("5" (grind) nil nil)) nil)
                       ("6" (skolem!)
                        (("6" (delete 2 3)
                          (("6" (nonemptylist "il!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_last
     nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_last
     nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_last
     nil)
    (elt_append3 formula-decl nil listprops nil)
    (elt_singleton formula-decl nil listprops nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (commit adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (commit?)]" gnsl_last nil)
    (commit? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_last nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_last
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_last nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_last
     nil)
    (E const-decl "Message" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (n_orig formula-decl nil gnsl_last nil)
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (n_last_TCC2 subtype-tcc nil gnsl_last nil)
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth_cdr formula-decl nil listprops nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_append formula-decl nil listprops nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (length_nth_equality formula-decl nil listprops nil)
    (Message_ilist_extensionality formula-decl nil gnsl_last nil)
    (Message_conc_extensionality formula-decl nil gnsl_last nil)
    (Message_public_extensionality formula-decl nil gnsl_last nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_last nil)
    (elt const-decl "bool" listprops nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_init def-decl "bool" gnsl_last nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (set type-eq-decl nil sets nil)
    (R_init const-decl "set[event]" gnsl_last nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (UROLE_LAST const-decl "process[event]" gnsl_last nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (Message type-decl nil gnsl_last nil)
    (INIT const-decl "bool" gnsl_last nil)
    (\|- const-decl "bool" gnsl_last nil)
    (event type-decl nil dynetwork nil))
   nil))
 (authentication_init 0
  (authentication_init-1 nil 3399297822
   ("" (auto-rewrite-theory "sets")
    (("" (rewrite "authentication_by_rank" + ("rho" "rho_init"))
      (("1" (delete 2)
        (("1" (comment "intruder's initial knowledge is in rho")
          (("1" (skolem!)
            (("1" (prop)
              (("1" (expand "INIT")
                (("1" (expand "rho_init") (("1" (smash) nil nil)) nil))
                nil))
              nil))
            ";;; intruder's initial knowledge is in rho"))
          nil))
        nil)
       ("2" (delete 2)
        (("2"
          (comment "from of a set of messages in rho, no message not in rho can be generated")
          (("2" (expand "|-")
            (("2" (rule-induct "Gen")
              (("2" (skolem!)
                (("2" (smash)
                  (("1" (inst -2 "m!2") (("1" (prop) nil nil)) nil)
                   ("2" (delete -2)
                    (("2" (skolem!)
                      (("2" (prop)
                        (("2" (replace -3 1)
                          (("2" (expand "rho_init" 1)
                            (("2" (prop) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (delete -2)
                    (("3" (skolem!)
                      (("3" (expand "rho_init" -1)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (delete -2)
                    (("4" (skolem!)
                      (("4" (expand "rho_init" -1)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (delete -2)
                    (("5" (skolem!)
                      (("5" (flatten)
                        (("5" (expand "rho_init" -1)
                          (("5" (replace -2 1)
                            (("5" (expand "rho_init")
                              (("5"
                                (delete -2)
                                (("5" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (delete -2)
                    (("6" (skolem!)
                      (("6" (prop)
                        (("6" (replace -2 1)
                          (("6" (delete -2)
                            (("6" (expand "rho_init")
                              (("6"
                                (expand "elt")
                                (("6"
                                  (inst 1 "0")
                                  (("1" (grind :exclude 2) nil nil)
                                   ("2"
                                    (delete 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (delete -2)
                    (("7" (skolem!)
                      (("7" (prop)
                        (("7" (replace -3 1)
                          (("7" (delete -3)
                            (("7" (expand "rho_init")
                              (("7"
                                (lemma
                                 "elt_append3"
                                 ("l1"
                                  "nl1!1"
                                  "l2"
                                  "nl2!1"
                                  "t"
                                  "n_last"))
                                (("7" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (delete -2)
                    (("8" (skolem!)
                      (("8" (prop)
                        (("8" (replace -3 1)
                          (("8" (delete -3)
                            (("8" (replace -2 -1)
                              (("8"
                                (delete -2)
                                (("8"
                                  (expand "rho_init")
                                  (("8"
                                    (lemma
                                     "elt_append1"
                                     ("l1"
                                      "nl1!1"
                                      "l2"
                                      "nl2!1"
                                      "t"
                                      "n_last"))
                                    (("8" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("9" (delete -2)
                    (("9" (skolem!)
                      (("9" (prop)
                        (("9" (replace -3 1)
                          (("9" (delete -3)
                            (("9" (replace -2 -1)
                              (("9"
                                (delete -2)
                                (("9"
                                  (expand "rho_init")
                                  (("9"
                                    (lemma
                                     "elt_append2"
                                     ("l1"
                                      "nl1!1"
                                      "l2"
                                      "nl2!1"
                                      "t"
                                      "n_last"))
                                    (("9" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("10" (delete -2)
                    (("10" (skolem!)
                      (("10" (prop)
                        (("10" (replace -2 1)
                          (("10" (delete -1 -2)
                            (("10" (expand "rho_init")
                              (("10" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("11" (delete -2)
                    (("11" (skolem!)
                      (("11" (prop)
                        (("11" (replace -2 1)
                          (("11" (delete -1 -2)
                            (("11" (expand "rho_init")
                              (("11" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("12" (delete -2)
                    (("12" (skolem!)
                      (("12" (prop)
                        (("12" (replace -3 1)
                          (("12" (delete -1 -2 -3)
                            (("12" (expand "rho_init")
                              (("12" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("13" (delete -2)
                    (("13" (skolem!)
                      (("13" (prop)
                        (("13" (replace -3 1)
                          (("13" (delete -1 -2 -3)
                            (("13" (expand "rho_init")
                              (("13" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("14" (delete -2)
                    (("14" (skolem!)
                      (("14" (prop)
                        (("14" (replace -3 1)
                          (("14" (delete -1 -2 -3)
                            (("14" (expand "rho_init")
                              (("14" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("15" (delete -2)
                    (("15" (skolem!)
                      (("15" (prop)
                        (("15" (replace -3 1)
                          (("15" (delete -3)
                            (("15" (typepred "k!1")
                              (("15"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "rho_init" -3)
                                  (("2"
                                    (assert)
                                    (("2" (lazy-grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            ";;; from of a set of messages in rho, no message not in rho can be generated"))
          nil))
        nil)
       ("3" (delete 2)
        (("3" (comment "users maintain the rank function")
          (("3" (skolem!)
            (("3" (expand "USER")
              (("3" (expand "RankUser")
                (("3" (interleaving2)
                  (("1" (interleaving)
                    (("1" (interleaving)
                      (("1"
                        (lemma "restrictinit_init"
                         ("P" "i!2" "u" "i!1"))
                        (("1"
                          (grind :exclude ("rho_init" "UROLE_INIT"))
                          nil nil))
                        nil)
                       ("2"
                        (lemma "restrictinit_last"
                         ("P" "i!2" "u" "i!1"))
                        (("2"
                          (grind :exclude ("rho_init" "UROLE_LAST"))
                          nil nil))
                        nil))
                      nil)
                     ("2" (lift-if)
                      (("2" (prop)
                        (("1" (stop) nil nil)
                         ("2"
                          (lemma "restrictinit_middle"
                           ("P" "i!2" "u" "i!1"))
                          (("2"
                            (grind :exclude
                             ("rho_init" "UROLE_MIDDLE"))
                            nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (delete 3)
                      (("3" (use "USER_TCC2") (("3" (prop) nil nil))
                        nil))
                      nil)
                     ("4" (delete 2) (("4" (use "USER_TCC2") nil nil))
                      nil))
                    nil)
                   ("2" (delete 2) (("2" (use "USER_TCC2") nil nil))
                    nil)
                   ("3" (delete 2)
                    (("3" (skolem!) (("3" (use "USER_TCC2") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            ";;; users maintain the rank function"))
          nil))
        nil)
       ("4" (delete 2)
        (("4" (comment "T is not in rho")
          (("4" (skolem-typepred)
            (("4" (expand "T")
              (("4" (replace -1 -2)
                (("4" (delete -1) (("4" (grind) nil nil)) nil)) nil))
              nil))
            ";;; T is not in rho"))
          nil))
        nil))
      nil))
    nil)
   ((authentication_by_rank formula-decl nil dynetwork nil)
    (event type-decl nil dynetwork nil) (set type-eq-decl nil sets nil)
    (R_init const-decl "set[event]" gnsl_last nil)
    (T const-decl "set[event]" gnsl_last nil)
    (rho_init def-decl "bool" gnsl_last nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (USER const-decl "process[event]" gnsl_last nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Message type-decl nil gnsl_last nil)
    (INIT const-decl "bool" gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (\|- const-decl "bool" gnsl_last nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (Gen_weak_induction formula-decl nil gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (elt const-decl "bool" listprops nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (n!1 skolem-const-decl "Nonce" gnsl_last nil)
    (elt_append3 formula-decl nil listprops nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (elt_append1 formula-decl nil listprops nil)
    (elt_append2 formula-decl nil listprops nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (append def-decl "list[T]" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (E const-decl "Message" gnsl_last nil)
    (complement const-decl "set" sets nil)
    (UROLE_MIDDLE const-decl "process[event]" gnsl_last nil)
    (nat_from_3 type-eq-decl nil gnsl_last nil)
    (nat_1_to type-eq-decl nil gnsl_last nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (UROLE_LAST const-decl "process[event]" gnsl_last nil)
    (UROLE_INIT const-decl "process[event]" gnsl_last nil)
    (Interleave const-decl "process[T]" multipar "../pvs6_csp_rules/")
    (// const-decl "process" processes "../pvs6_csp_rules/")
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (TRUE const-decl "bool" booleans nil)
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (pred type-eq-decl nil defined_types nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (USER_TCC2 existence-tcc nil gnsl_last nil)
    (restrictinit_middle formula-decl nil gnsl_last nil)
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (\|> const-decl "bool" satisfaction "../pvs6_csp_rules/")
    (Par const-decl "process" processes "../pvs6_csp_rules/")
    (restrictinit_init formula-decl nil gnsl_last nil)
    (restrictinit_last formula-decl nil gnsl_last nil)
    (uniform_interleave2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restriction_free_par formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (RankUser const-decl "setof[trace[event]]" dynetwork nil))
   nil))
 (restrictmiddle_init 0
  (restrictmiddle_init-1 nil 3399306423
   ("" (auto-rewrite-theory "sets")
    (("" (auto-rewrite "n_last_TCC2")
      (("" (skolem!)
        (("" (expand "RankUser")
          (("" (interleaving2)
            (("" (expand "UROLE_INIT")
              (("" (typepred "P!1")
                (("" (choice3)
                  (("1" (prefix)
                    (("1" (delete 2 3)
                      (("1" (typepred "i!2")
                        (("1"
                          (lemma "n_prop"
                           ("P" "P!1" "u" "u!1" "r" "0"))
                          (("1"
                            (lemma "elt_singleton"
                             ("t1" "i!2" "t2" "n_last"))
                            (("1" (grind :if-match nil :exclude "elt")
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete 2 3)
                      (("2" (prefix)
                        (("2" (delete 2 3)
                          (("2" (prefix)
                            (("1" (delete - 2 3)
                              (("1"
                                (expand "rho_middle")
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (delete 2 3)
                              (("2"
                                (prefix)
                                (("1"
                                  (delete 2 3)
                                  (("1"
                                    (expand "E")
                                    (("1"
                                      (expand "rho_middle" -1)
                                      (("1"
                                        (split)
                                        (("1"
                                          (lemma
                                           "elt_append2"
                                           ("l1"
                                            "(:i!2:)"
                                            "l2"
                                            "i!3`1"
                                            "t"
                                            "n_last"))
                                          (("1"
                                            (grind
                                             :if-match
                                             nil
                                             :exclude
                                             "elt")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (skolem!)
                                            (("2"
                                              (decompose-equality -1)
                                              (("2"
                                                (decompose-equality -2)
                                                (("2"
                                                  (decompose-equality
                                                   -1)
                                                  (("2"
                                                    (decompose-equality
                                                     -2)
                                                    (("2"
                                                      (typepred
                                                       "i!3`1"
                                                       "i!3`2"
                                                       "nl!1"
                                                       "hu_list"
                                                       "i!1")
                                                      (("2"
                                                        (expand
                                                         "rho_middle"
                                                         1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -3
                                                             -5
                                                             -7
                                                             1
                                                             2)
                                                            (("2"
                                                              (case
                                                               "P!1=p")
                                                              (("1"
                                                                (comment
                                                                 "next message is sent to hu(1)")
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "1")
                                                                  (("1"
                                                                    (split)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -9
                                                                         1)
                                                                        (("1"
                                                                          (inst
                                                                           -6
                                                                           "1")
                                                                          (("1"
                                                                            (replace
                                                                             -6
                                                                             1
                                                                             rl)
                                                                            (("1"
                                                                              (delete
                                                                               -)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (replace*
                                                                       -1)
                                                                      (("2"
                                                                        (lemma
                                                                         "length_non_zero"
                                                                         ("l"
                                                                          "nl!1"))
                                                                        (("2"
                                                                          (ground)
                                                                          (("2"
                                                                            (inst
                                                                             1
                                                                             "cdr(nl!1)")
                                                                            (("1"
                                                                              (decompose-equality
                                                                               1)
                                                                              (("1"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -11
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -13
                                                                                     1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -8
                                                                                       "0")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -8
                                                                                         1
                                                                                         rl)
                                                                                        (("1"
                                                                                          (delete
                                                                                           -)
                                                                                          (("1"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "append"
                                                                                   -12)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     -12)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (rewrite
                                                                               "length_cdr"
                                                                               1)
                                                                              (("2"
                                                                                (delete
                                                                                 -1
                                                                                 -2
                                                                                 -3
                                                                                 -4
                                                                                 -5
                                                                                 -7
                                                                                 -8
                                                                                 -9
                                                                                 -10
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  ";;; next message is sent to hu(1)"))
                                                                nil)
                                                               ("2"
                                                                (replace
                                                                 -8
                                                                 -2)
                                                                (("2"
                                                                  (rewrite
                                                                   "length_cdr"
                                                                   -2)
                                                                  (("2"
                                                                    (delete
                                                                     -1
                                                                     -3
                                                                     -5
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10
                                                                     -11
                                                                     2)
                                                                    (("2"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skosimp*)
                                          (("3"
                                            (decompose-equality -2)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete - 2 3)
                                  (("2" (stop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "i!3`1")
                    (("2" (delete -1 -3 2) (("2" (ground) nil nil))
                      nil))
                    nil)
                   ("3" (typepred "i!3`2")
                    (("3" (delete -1 -3 2) (("3" (ground) nil nil))
                      nil))
                    nil)
                   ("4" (delete - 2) (("4" (grind) nil nil)) nil)
                   ("5" (delete 2)
                    (("5" (nonemptylist "i!3`2") nil nil)) nil)
                   ("6" (delete - 2) (("6" (grind) nil nil)) nil)
                   ("7" (skolem!)
                    (("7" (delete 2)
                      (("7" (nonemptylist "il!1") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_last nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_last nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_last
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_last nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_last
     nil)
    (E const-decl "Message" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_last
     nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_last
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (Message_conc_extensionality formula-decl nil gnsl_last nil)
    (Message_ilist_extensionality formula-decl nil gnsl_last nil)
    (Message_nlist_extensionality formula-decl nil gnsl_last nil)
    (nl!1 skolem-const-decl "{x: list[Nonce] | length(x) = p - 1}"
     gnsl_last nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (Message_public_extensionality formula-decl nil gnsl_last nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_last
     nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_last nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (elt_append2 formula-decl nil listprops nil)
    (append def-decl "list[T]" list_props nil)
    (n_prop formula-decl nil gnsl_last nil)
    (remove def-decl "list[T]" listprops nil)
    (n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (elt_singleton formula-decl nil listprops nil)
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_middle def-decl "bool" gnsl_last nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_1_to type-eq-decl nil gnsl_last nil)
    (R_middle const-decl "set[event]" gnsl_last nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (UROLE_INIT const-decl "process[event]" gnsl_last nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (Message type-decl nil gnsl_last nil)
    (INIT const-decl "bool" gnsl_last nil)
    (\|- const-decl "bool" gnsl_last nil)
    (event type-decl nil dynetwork nil))
   shostak))
 (restrictmiddle_middle 0
  (restrictmiddle_middle-1 nil 3399316596
   ("" (auto-rewrite-theory "sets")
    (("" (auto-rewrite "USER_TCC2" "n_last_TCC2")
      (("" (skolem!)
        (("" (prop)
          (("" (expand "RankUser")
            (("" (interleaving2)
              (("" (expand "UROLE_MIDDLE")
                (("" (typepred "P!1" "i!2`1")
                  (("" (choice3)
                    (("1" (prefix)
                      (("1" (delete 2 3)
                        (("1" (prefix)
                          (("1" (delete 2 3)
                            (("1" (expand "E")
                              (("1"
                                (expand "rho_middle" -1)
                                (("1"
                                  (split)
                                  (("1"
                                    (typepred "i!2`2")
                                    (("1"
                                      (lemma
                                       "n_prop"
                                       ("P"
                                        "P!1"
                                        "u"
                                        "u!1"
                                        "r"
                                        "i!2`1"))
                                      (("1"
                                        (lemma
                                         "elt_append3"
                                         ("l1"
                                          "i!3`1"
                                          "l2"
                                          "(:i!2`2:)"
                                          "t"
                                          "n_last"))
                                        (("1"
                                          (lemma
                                           "elt_singleton"
                                           ("t1"
                                            "i!2`2"
                                            "t2"
                                            "n_last"))
                                          (("1"
                                            (grind
                                             :if-match
                                             nil
                                             :exclude
                                             "elt")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skosimp*)
                                    (("2"
                                      (comment
                                       "a contradiction is lurking in -2")
                                      (("2"
                                        (decompose-equality -2)
                                        (("2"
                                          (decompose-equality -1)
                                          (("2"
                                            (decompose-equality -2)
                                            (("2"
                                              (typepred
                                               "nl!1"
                                               "i!3`1"
                                               "i!3`3"
                                               "i!3`4"
                                               "hu_list")
                                              (("2"
                                                (delete
                                                 -1
                                                 -3
                                                 -5
                                                 -7
                                                 -9
                                                 -14
                                                 +)
                                                (("2"
                                                  (case "P!1=p")
                                                  (("1"
                                                    (replace -9 -3)
                                                    (("1"
                                                      (rewrite
                                                       "length_append"
                                                       -3)
                                                      (("1"
                                                        (delete
                                                         -4
                                                         -5
                                                         -6
                                                         -7
                                                         -8
                                                         -9
                                                         -10
                                                         -11)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "equality_length"
                                                     ("l1"
                                                      "append(i!3`3,i!3`4)"
                                                      "l2"
                                                      "cdr(hu_list)"))
                                                    (("2"
                                                      (prop)
                                                      (("2"
                                                        (rewrite
                                                         "length_append"
                                                         -1)
                                                        (("2"
                                                          (rewrite
                                                           "length_cdr"
                                                           -1)
                                                          (("2"
                                                            (delete
                                                             -2
                                                             -3
                                                             -7
                                                             -8
                                                             -9
                                                             -10
                                                             -11
                                                             -12)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        ";;; a contradiction is lurking in -2"))
                                      nil))
                                    nil)
                                   ("3"
                                    (skosimp*)
                                    (("3"
                                      (delete -1 -3 -4 -5 +)
                                      (("3"
                                        (decompose-equality -1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (delete 2 3)
                            (("2" (prefix)
                              (("2"
                                (delete 2 3)
                                (("2"
                                  (prefix)
                                  (("1"
                                    (delete - 2 3 4)
                                    (("1"
                                      (expand "rho_middle")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete -2 3)
                                    (("2"
                                      (expand "R_middle" 2)
                                      (("2"
                                        (case
                                         "i!1=i!2`1 AND append(i!3`3,cons(u!1,i!3`4))=hu_list AND nth(i!3`2,P!1-2-i!2`1)=n_last")
                                        (("1"
                                          (delete -2 -3 -4 -5 1 3)
                                          (("1" (ground) nil nil))
                                          nil)
                                         ("2"
                                          (delete 3)
                                          (("2"
                                            (expand "E")
                                            (("2"
                                              (comment
                                               "in this situation, the user is not blocked on R, so explore all options that make -1 true")
                                              (("2"
                                                (expand
                                                 "rho_middle"
                                                 -1)
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (comment
                                                     "the received message was 'clean', so the outgoing messages will be too")
                                                    (("1"
                                                      (delete
                                                       -2
                                                       -3
                                                       -4
                                                       1
                                                       3)
                                                      (("1"
                                                        (expand
                                                         "LastMessage")
                                                        (("1"
                                                          (lift-if)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (prefix)
                                                              (("1"
                                                                (delete
                                                                 2)
                                                                (("1"
                                                                  (lemma
                                                                   "elt_append2"
                                                                   ("l1"
                                                                    "(:i!2`2:)"
                                                                    "l2"
                                                                    "i!3`2"
                                                                    "t"
                                                                    "n_last"))
                                                                  (("1"
                                                                    (grind
                                                                     :exclude
                                                                     "elt")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 -
                                                                 2)
                                                                (("2"
                                                                  (stop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (prefix)
                                                              (("1"
                                                                (delete
                                                                 3)
                                                                (("1"
                                                                  (lemma
                                                                   "elt_append2"
                                                                   ("l1"
                                                                    "(:i!2`2:)"
                                                                    "l2"
                                                                    "i!3`2"
                                                                    "t"
                                                                    "n_last"))
                                                                  (("1"
                                                                    (grind
                                                                     :if-match
                                                                     nil
                                                                     :exclude
                                                                     "elt")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (delete
                                                                 -
                                                                 2
                                                                 3)
                                                                (("2"
                                                                  (stop)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      ";;; the received message was 'clean', so the outgoing messages will be too"))
                                                    nil)
                                                   ("2"
                                                    (skosimp*)
                                                    (("2"
                                                      (delete
                                                       -1
                                                       -3
                                                       -4
                                                       -5
                                                       +)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (comment
                                                     "in this case, the received message was escaped in rho and the current user isn't blocked on R, so the outgoing message must be shown to be escaped in rho too")
                                                    (("3"
                                                      (comment
                                                       "the approach is to prove each conjunct in 1, except for the first, which will be needed to prove that the outgoing message is in rho")
                                                      (("3"
                                                        (comment
                                                         "a special case is the first case of LastMessage, which should not occur")
                                                        (("3"
                                                          (skosimp*)
                                                          (("3"
                                                            (decompose-equality
                                                             -1)
                                                            (("3"
                                                              (decompose-equality
                                                               -2)
                                                              (("3"
                                                                (decompose-equality
                                                                 -1)
                                                                (("3"
                                                                  (decompose-equality
                                                                   -2)
                                                                  (("3"
                                                                    (typepred
                                                                     "i!3`2"
                                                                     "i!3`3"
                                                                     "i!3`4"
                                                                     "nl!1"
                                                                     "hu_list"
                                                                     "i!1"
                                                                     "j!1")
                                                                    (("3"
                                                                      (delete
                                                                       -1
                                                                       -3
                                                                       -5
                                                                       -7
                                                                       -9
                                                                       -20
                                                                       -21)
                                                                      (("3"
                                                                        (comment
                                                                         "establish some helpful equalities first")
                                                                        (("3"
                                                                          (case
                                                                           "P!1=p"
                                                                           "j!1=i!2`1"
                                                                           "length(append(i!3`3,cons(hu(i!2`1),i!3`4)))=p")
                                                                          (("1"
                                                                            (replace*
                                                                             -2
                                                                             -3
                                                                             -16)
                                                                            (("1"
                                                                              (delete
                                                                               -2
                                                                               -16)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (comment
                                                                                   "get rid of first case of LastMessage first")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "LastMessage")
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (delete
                                                                                           -2
                                                                                           -3
                                                                                           -4
                                                                                           -5
                                                                                           -6
                                                                                           -7
                                                                                           -8
                                                                                           -9
                                                                                           -10
                                                                                           -12
                                                                                           -14
                                                                                           -15
                                                                                           1)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (comment
                                                                                           "first case has been gotten rid of, now prove that the outgoing message conforms to rho")
                                                                                          (("2"
                                                                                            (prefix)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "E")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "rho_middle"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (delete
                                                                                                     1
                                                                                                     2
                                                                                                     4
                                                                                                     5
                                                                                                     7)
                                                                                                    (("1"
                                                                                                      (comment
                                                                                                       "the next message is sent to i!2`1+1")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "i!2`1+1")
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "equality_nth"
                                                                                                           ("l1"
                                                                                                            "append(i!3`3,i!3`4)"
                                                                                                            "l2"
                                                                                                            "remove(hu_list,i!2`1)"))
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "nth_append"
                                                                                                             ("l1"
                                                                                                              "i!3`3"
                                                                                                              "l2"
                                                                                                              "i!3`4"))
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "nth_remove"
                                                                                                               ("l"
                                                                                                                "hu_list"
                                                                                                                "i"
                                                                                                                "i!2`1"))
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (decompose-equality
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "i!2`1")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -2
                                                                                                                       "i!2`1")
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -3
                                                                                                                         "i!2`1")
                                                                                                                        (("1"
                                                                                                                          (delete
                                                                                                                           -4
                                                                                                                           -5
                                                                                                                           -6
                                                                                                                           -8
                                                                                                                           -9
                                                                                                                           -10
                                                                                                                           -12
                                                                                                                           -13
                                                                                                                           -14
                                                                                                                           -15
                                                                                                                           -16
                                                                                                                           -17
                                                                                                                           -18
                                                                                                                           2
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -5
                                                                                                                             "1+i!2`1")
                                                                                                                            (("1"
                                                                                                                              (grind
                                                                                                                               :exclude
                                                                                                                               ("append"
                                                                                                                                "remove"))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (rewrite
                                                                                                                       "length_append"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (delete
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5
                                                                                                                         -8
                                                                                                                         -9
                                                                                                                         -10
                                                                                                                         -11
                                                                                                                         -13
                                                                                                                         -15
                                                                                                                         -16
                                                                                                                         -17
                                                                                                                         2
                                                                                                                         3
                                                                                                                         4)
                                                                                                                        (("2"
                                                                                                                          (ground)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "length_non_zero"
                                                                                                                   ("l"
                                                                                                                    "nl!1"))
                                                                                                                  (("2"
                                                                                                                    (ground)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "cdr(nl!1)")
                                                                                                                      (("1"
                                                                                                                        (decompose-equality
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (decompose-equality
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "length_nth_equality[Identity]"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (delete
                                                                                                                               -1
                                                                                                                               -2
                                                                                                                               -3
                                                                                                                               -4
                                                                                                                               -5
                                                                                                                               -6
                                                                                                                               -7
                                                                                                                               -8
                                                                                                                               -11
                                                                                                                               -13
                                                                                                                               -14
                                                                                                                               -15
                                                                                                                               -16
                                                                                                                               -17
                                                                                                                               -18
                                                                                                                               -19
                                                                                                                               2
                                                                                                                               3
                                                                                                                               4)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "length_append"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (rewrite
                                                                                                                                   "length_remove"
                                                                                                                                   1
                                                                                                                                   :dir
                                                                                                                                   rl)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "length_cdr"
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (ground)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (delete
                                                                                                                                     -1
                                                                                                                                     -2
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (nonemptylist
                                                                                                                                       "hu_list")
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skolem-typepred)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "length_append"
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "length"
                                                                                                                                   -1
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (rewrite
                                                                                                                                     "length_cdr"
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (simplify
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (delete
                                                                                                                                         -2
                                                                                                                                         -3
                                                                                                                                         -7
                                                                                                                                         -8
                                                                                                                                         -9
                                                                                                                                         -12
                                                                                                                                         -15
                                                                                                                                         -17
                                                                                                                                         -18
                                                                                                                                         -19
                                                                                                                                         -20
                                                                                                                                         2
                                                                                                                                         3
                                                                                                                                         4)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -2
                                                                                                                                           "i!4")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             -3
                                                                                                                                             "i!4")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -4
                                                                                                                                               "i!4")
                                                                                                                                              (("1"
                                                                                                                                                (replace*
                                                                                                                                                 -5
                                                                                                                                                 -6)
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "nth_append"
                                                                                                                                                   ("l1"
                                                                                                                                                    "i!3`3"
                                                                                                                                                    "l2"
                                                                                                                                                    "cons(hu(i!2`1),cdr(i!3`4))"
                                                                                                                                                    "i"
                                                                                                                                                    "i!4"))
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (delete
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "nth_remove"
                                                                                                                                                         ("l"
                                                                                                                                                          "hu_list"
                                                                                                                                                          "i"
                                                                                                                                                          "1+i!2`1"
                                                                                                                                                          "j"
                                                                                                                                                          "i!4"))
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (delete
                                                                                                                                                             -1)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "i!4<i!2`1 OR i!4=i!2`1 OR i!4>i!2`1")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "nth"
                                                                                                                                                                 1
                                                                                                                                                                 2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (grind
                                                                                                                                                                   :exclude
                                                                                                                                                                   ("nth"
                                                                                                                                                                    "append"
                                                                                                                                                                    "remove"))
                                                                                                                                                                  (("1"
                                                                                                                                                                    (rewrite
                                                                                                                                                                     "nth_cdr"
                                                                                                                                                                     1)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (delete
                                                                                                                                                                 -
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (ground)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (delete
                                                                                                                                                           -2
                                                                                                                                                           -3
                                                                                                                                                           -4
                                                                                                                                                           -5
                                                                                                                                                           -6
                                                                                                                                                           -8
                                                                                                                                                           -9
                                                                                                                                                           -10
                                                                                                                                                           2)
                                                                                                                                                          (("2"
                                                                                                                                                            (ground)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "length"
                                                                                                                                                     1
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "length_cdr"
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (delete
                                                                                                                                                         -2
                                                                                                                                                         -3
                                                                                                                                                         -4
                                                                                                                                                         -7
                                                                                                                                                         -8
                                                                                                                                                         -9
                                                                                                                                                         -10
                                                                                                                                                         2)
                                                                                                                                                        (("2"
                                                                                                                                                          (ground)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (delete
                                                                                                                                               -2
                                                                                                                                               -3
                                                                                                                                               -7
                                                                                                                                               -8
                                                                                                                                               -9
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (ground)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (rewrite
                                                                                                                                             "length_append"
                                                                                                                                             1)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (decompose-equality
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (delete
                                                                                                                             -1
                                                                                                                             -3
                                                                                                                             -4
                                                                                                                             -5
                                                                                                                             -6
                                                                                                                             -7
                                                                                                                             -8
                                                                                                                             -9
                                                                                                                             -10
                                                                                                                             -11
                                                                                                                             -12
                                                                                                                             -13
                                                                                                                             -14
                                                                                                                             -15
                                                                                                                             -16
                                                                                                                             -17
                                                                                                                             -19
                                                                                                                             -20
                                                                                                                             2
                                                                                                                             3)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "append"
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (decompose-equality
                                                                                                                                 -2)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (rewrite
                                                                                                                         "length_cdr"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (delete
                                                                                                                           -1
                                                                                                                           -2
                                                                                                                           -3
                                                                                                                           -4
                                                                                                                           -5
                                                                                                                           -6
                                                                                                                           -7
                                                                                                                           -8
                                                                                                                           -9
                                                                                                                           -10
                                                                                                                           -12
                                                                                                                           -13
                                                                                                                           -14
                                                                                                                           -15
                                                                                                                           -16
                                                                                                                           -17
                                                                                                                           -18
                                                                                                                           -19
                                                                                                                           -20
                                                                                                                           2
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (ground)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        ";;; the next message is sent to i!2`1+1"))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (delete
                                                                                               -
                                                                                               2
                                                                                               3
                                                                                               4
                                                                                               5
                                                                                               6)
                                                                                              (("2"
                                                                                                (stop)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            ";;; first case has been gotten rid of, now prove that the outgoing message conforms to rho"))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    ";;; get rid of first case of LastMessage first"))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   2)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "length_nth_equality[Identity]"
                                                                                     1)
                                                                                    (("2"
                                                                                      (skolem-typepred)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nth_append"
                                                                                         ("l1"
                                                                                          "i!3`3"
                                                                                          "l2"
                                                                                          "cons(hu(i!2`1),i!3`4)"
                                                                                          "i"
                                                                                          "i!4"))
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (delete
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "equality_nth"
                                                                                               ("l1"
                                                                                                "append(i!3`3,i!3`4)"
                                                                                                "l2"
                                                                                                "remove(hu_list,i!2`1)"))
                                                                                              (("1"
                                                                                                (prop)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nth_append"
                                                                                                   ("l1"
                                                                                                    "i!3`3"
                                                                                                    "l2"
                                                                                                    "i!3`4"))
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "nth_remove"
                                                                                                     ("l"
                                                                                                      "hu_list"
                                                                                                      "i"
                                                                                                      "i!2`1"))
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       -7
                                                                                                       -10
                                                                                                       -13
                                                                                                       -15
                                                                                                       -17
                                                                                                       -18
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -10
                                                                                                           "i!2`1")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "i!4<i!2`1 OR i!4=i!2`1 OR (i!2`1<i!4 AND i!4<p-1) OR i!4=p-1")
                                                                                                            (("1"
                                                                                                              (grind
                                                                                                               :exclude
                                                                                                               ("nth"
                                                                                                                "append"
                                                                                                                "remove"))
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "i!4-1")
                                                                                                                  (("1"
                                                                                                                    (delete
                                                                                                                     -3
                                                                                                                     -4
                                                                                                                     -5
                                                                                                                     -6
                                                                                                                     -7
                                                                                                                     -8
                                                                                                                     -9
                                                                                                                     -10
                                                                                                                     -11
                                                                                                                     -12
                                                                                                                     -13
                                                                                                                     -14
                                                                                                                     -15
                                                                                                                     -16
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (delete
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3
                                                                                                               -6
                                                                                                               -7
                                                                                                               -8
                                                                                                               -9
                                                                                                               -10
                                                                                                               -11
                                                                                                               -12
                                                                                                               -13
                                                                                                               2
                                                                                                               3)
                                                                                                              (("2"
                                                                                                                (ground)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "length_append"
                                                                                           -1)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (delete
                                                                                   -1
                                                                                   -2
                                                                                   -4
                                                                                   -5
                                                                                   -7
                                                                                   -8
                                                                                   -9
                                                                                   -11
                                                                                   -14
                                                                                   2)
                                                                                  (("3"
                                                                                    (lemma
                                                                                     "equality_nth"
                                                                                     ("l1"
                                                                                      "cons(i!2`2,i!3`2)"
                                                                                      "l2"
                                                                                      "append(nl!1,(:n_last:))"))
                                                                                    (("3"
                                                                                      (prop)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         "p-1-i!2`1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "nth_append"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (delete
                                                                                                   -1
                                                                                                   -2
                                                                                                   -4
                                                                                                   -5
                                                                                                   -6
                                                                                                   -7
                                                                                                   2
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           1)
                                                                                          (("2"
                                                                                            (delete
                                                                                             -2
                                                                                             -5
                                                                                             2)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (delete
                                                                             -1
                                                                             -3
                                                                             -6
                                                                             -7
                                                                             -8
                                                                             -9
                                                                             -10
                                                                             -11
                                                                             -12
                                                                             -13
                                                                             -14
                                                                             -15
                                                                             -16
                                                                             2
                                                                             3
                                                                             4)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_append"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 1
                                                                                 1)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (lemma
                                                                             "equality_length"
                                                                             ("l1"
                                                                              "cons(i!2`2,i!3`2)"
                                                                              "l2"
                                                                              "append(nl!1,(:n_last:))"))
                                                                            (("3"
                                                                              (delete
                                                                               -4
                                                                               -5
                                                                               -7
                                                                               -8
                                                                               -9
                                                                               -10
                                                                               -11
                                                                               -12
                                                                               -14
                                                                               -15
                                                                               -16
                                                                               2
                                                                               3
                                                                               4)
                                                                              (("3"
                                                                                (prop)
                                                                                (("3"
                                                                                  (rewrite
                                                                                   "length_append"
                                                                                   -1)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "length"
                                                                                     -1
                                                                                     1)
                                                                                    (("3"
                                                                                      (replace*
                                                                                       -2
                                                                                       -3
                                                                                       -4)
                                                                                      (("3"
                                                                                        (delete
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("3"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (lemma
                                                                             "equality_length"
                                                                             ("l1"
                                                                              "append(i!3`3,i!3`4)"
                                                                              "l2"
                                                                              "remove(hu_list,j!1)"))
                                                                            (("4"
                                                                              (delete
                                                                               -2
                                                                               -5
                                                                               -7
                                                                               -8
                                                                               -9
                                                                               -10
                                                                               -11
                                                                               -12
                                                                               -14
                                                                               -15
                                                                               2
                                                                               3
                                                                               4)
                                                                              (("4"
                                                                                (prop)
                                                                                (("4"
                                                                                  (rewrite
                                                                                   "length_append"
                                                                                   -1)
                                                                                  (("4"
                                                                                    (rewrite
                                                                                     "length_remove"
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "p")
                                                                                      (("2"
                                                                                        (delete
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -6
                                                                                         2)
                                                                                        (("2"
                                                                                          (nonemptylist
                                                                                           "hu_list")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (typepred
                                                                             "i!2`1"
                                                                             "p")
                                                                            (("5"
                                                                              (lemma
                                                                               "equality_length"
                                                                               ("l1"
                                                                                "append(i!3`3,i!3`4)"
                                                                                "l2"
                                                                                "remove(hu_list,j!1)"))
                                                                              (("5"
                                                                                (delete
                                                                                 -2
                                                                                 -5
                                                                                 -8
                                                                                 -10
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14
                                                                                 -15
                                                                                 -17
                                                                                 -18
                                                                                 2
                                                                                 3
                                                                                 4)
                                                                                (("5"
                                                                                  (prop)
                                                                                  (("5"
                                                                                    (rewrite
                                                                                     "length_append"
                                                                                     -1)
                                                                                    (("5"
                                                                                      (rewrite
                                                                                       "length_remove"
                                                                                       -1
                                                                                       :dir
                                                                                       rl)
                                                                                      (("1"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (delete
                                                                                         -1
                                                                                         -2
                                                                                         -4
                                                                                         -5
                                                                                         -7
                                                                                         2)
                                                                                        (("2"
                                                                                          (nonemptylist
                                                                                           "hu_list")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          ";;; establish some helpful equalities first"))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          ";;; a special case is the first case of LastMessage, which should not occur"))
                                                        ";;; the approach is to prove each conjunct in 1, except for the first, which will be needed to prove that the outgoing message is in rho"))
                                                      ";;; in this case, the received message was escaped in rho and the current user isn't blocked on R, so the outgoing message must be shown to be escaped in rho too"))
                                                    nil))
                                                  nil))
                                                ";;; in this situation, the user is not blocked on R, so explore all options that make -1 true"))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "i!3`2")
                      (("2" (delete -1 -3 -4 -5 2 3)
                        (("2" (ground) nil nil)) nil))
                      nil)
                     ("3" (delete -2 2 3)
                      (("3" (nonemptylist "i!3`4") nil nil)) nil)
                     ("4" (delete -1 -3 2 3)
                      (("4" (nonemptylist "i!3`3") nil nil)) nil)
                     ("5" (skolem!)
                      (("5" (delete -2 2 3)
                        (("5" (nonemptylist "il2!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (USER_TCC2 existence-tcc nil gnsl_last nil)
    (event type-decl nil dynetwork nil)
    (\|- const-decl "bool" gnsl_last nil)
    (INIT const-decl "bool" gnsl_last nil)
    (Message type-decl nil gnsl_last nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (Role type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_1_to type-eq-decl nil gnsl_last nil)
    (UROLE_MIDDLE const-decl "process[event]" gnsl_last nil)
    (nat_from_3 type-eq-decl nil gnsl_last nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (R_middle const-decl "set[event]" gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (set type-eq-decl nil sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (TRUE const-decl "bool" booleans nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rho_middle def-decl "bool" gnsl_last nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (n_prop formula-decl nil gnsl_last nil)
    (elt_singleton formula-decl nil listprops nil)
    (remove def-decl "list[T]" listprops nil)
    (n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (elt_append3 formula-decl nil listprops nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_last
     nil)
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (equality_length formula-decl nil listprops nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_last
     nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_last nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (elt_append2 formula-decl nil listprops nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (\|> const-decl "bool" satisfaction "../pvs6_csp_rules/")
    (subset? const-decl "bool" sets nil)
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (equality_nth formula-decl nil listprops nil)
    (nth_remove formula-decl nil listprops nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (i!1 skolem-const-decl "nat_1_to(p)" gnsl_last nil)
    (j!1 skolem-const-decl "{x: nat | 0 < x AND x <= i!1}" gnsl_last
     nil)
    (nl!1 skolem-const-decl
     "{x: list[Nonce] | length(x) = -1 - j!1 + p}" gnsl_last nil)
    (Message_nlist_extensionality formula-decl nil gnsl_last nil)
    (Message_ilist_extensionality formula-decl nil gnsl_last nil)
    (i!4 skolem-const-decl
     "below[length[Identity](append(i!3`3, cons(hu(i!2`1), cdr(i!3`4))))]"
     gnsl_last nil)
    (> const-decl "bool" reals nil)
    (nth_cdr formula-decl nil listprops nil)
    (length_remove formula-decl nil listprops nil)
    (length_nth_equality formula-decl nil listprops nil)
    (Message_conc_extensionality formula-decl nil gnsl_last nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Message_public_extensionality formula-decl nil gnsl_last nil)
    (i!3 skolem-const-decl "[{x: list[Nonce] | length(x) = i!2`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!2`1},
 {x: list[Identity] | length(x) = i!2`1},
 {x: list[Identity] | length(x) = P!1 - 1 - i!2`1}]" gnsl_last nil)
    (i!2 skolem-const-decl "[k: nat_1_to(P!1), Nonces(P!1, u!1, k)]"
     gnsl_last nil)
    (u!1 skolem-const-decl "Identity" gnsl_last nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_last nil)
    (nth_append formula-decl nil listprops nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_last
     nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (E const-decl "Message" gnsl_last nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_last
     nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_last nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_last
     nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_last nil)
    (append def-decl "list[T]" list_props nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_last nil)
    (LastMessage const-decl "event" gnsl_last nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (RankUser const-decl "setof[trace[event]]" dynetwork nil))
   nil))
 (restrictmiddle_last 0
  (restrictmiddle_last-1 nil 3399305618
   ("" (auto-rewrite-theory "sets")
    (("" (auto-rewrite "n_last_TCC2")
      (("" (skolem!)
        (("" (expand "RankUser")
          (("" (interleaving2)
            (("" (expand "UROLE_LAST")
              (("" (lift-if)
                (("" (typepred "P!1")
                  (("" (prop)
                    (("1" (choice3)
                      (("1" (typepred "i!2")
                        (("1"
                          (lemma "n_orig"
                           ("P" "P!1" "u" "u!1" "r" "P!1-1"))
                          (("1" (ground)
                            (("1" (delete -1)
                              (("1"
                                (replace* -1 -2 -4)
                                (("1"
                                  (delete -1 -3 -4)
                                  (("1"
                                    (prefix)
                                    (("1"
                                      (delete 2 3)
                                      (("1"
                                        (prefix)
                                        (("1"
                                          (delete 2 3)
                                          (("1"
                                            (typepred
                                             "i!3`1"
                                             "i!3`2"
                                             "hu_list"
                                             "i!1")
                                            (("1"
                                              (delete -1 -3 -6 -11)
                                              (("1"
                                                (expand "E")
                                                (("1"
                                                  (expand "rho_middle")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (delete 1 3)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (decompose-equality
                                                           1)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "0")
                                                            (("1"
                                                              (replace
                                                               -3
                                                               1
                                                               rl)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           1
                                                           "i!3`1")
                                                          (("2"
                                                            (mdecompose-equality
                                                             1)
                                                            (("2"
                                                              (case
                                                               "length(append(cdr(i!3`2),(:hu(p-1):)))=p-1")
                                                              (("1"
                                                                (rewrite
                                                                 "length_nth_equality[Identity]")
                                                                (("1"
                                                                  (rewrite
                                                                   "length_cdr"
                                                                   1)
                                                                  (("1"
                                                                    (delete
                                                                     -2
                                                                     -3
                                                                     -4
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10
                                                                     2)
                                                                    (("1"
                                                                      (ground)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skolem-typepred)
                                                                  (("2"
                                                                    (lemma
                                                                     "nth_append"
                                                                     ("l1"
                                                                      "cdr(i!3`2)"
                                                                      "l2"
                                                                      "(:hu(p-1):)"
                                                                      "i"
                                                                      "i!4"))
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (delete
                                                                         -1
                                                                         2)
                                                                        (("1"
                                                                          (rewrite
                                                                           "length_cdr"
                                                                           1)
                                                                          (("1"
                                                                            (lemma
                                                                             "nth_cdr"
                                                                             ("c"
                                                                              "hu_list"
                                                                              "i"
                                                                              "i!4"))
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("1"
                                                                                (delete
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -7
                                                                                   "i!4+1")
                                                                                  (("1"
                                                                                    (case
                                                                                     "i!4<p-2 OR i!4=p-2")
                                                                                    (("1"
                                                                                      (grind
                                                                                       :exclude
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -6)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1)
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (delete
                                                                                       -3
                                                                                       -4
                                                                                       -5
                                                                                       -6
                                                                                       -7
                                                                                       -8
                                                                                       -9
                                                                                       -10
                                                                                       -11
                                                                                       2)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (delete
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6
                                                                       -7
                                                                       -8
                                                                       -9
                                                                       -10
                                                                       -11
                                                                       2
                                                                       3)
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_append"
                                                                         -1)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (rewrite
                                                                 "length_append"
                                                                 1)
                                                                (("2"
                                                                  (rewrite
                                                                   "length_cdr"
                                                                   1)
                                                                  (("2"
                                                                    (delete
                                                                     -1
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -6
                                                                     -7
                                                                     -9
                                                                     2)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (delete 2 3)
                                          (("2"
                                            (prefix)
                                            (("2"
                                              (delete -2 +)
                                              (("2"
                                                (grind :if-match nil)
                                                (("2"
                                                  (inst 1 "0")
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete - 2) (("2" (grind) nil nil)) nil)
                       ("3" (delete -1 2)
                        (("3" (nonemptylist "i!3`2") nil nil)) nil)
                       ("4" (typepred "i!3`2")
                        (("4" (delete -1 -3 -4 -5 2)
                          (("4" (ground) nil nil)) nil))
                        nil)
                       ("5" (prop)
                        (("5" (skolem!)
                          (("5" (typepred "i!3" "i!2")
                            (("5"
                              (lemma "n_orig"
                               ("P" "P!1" "u" "u!1" "r" "P!1-1"))
                              (("5"
                                (delete -4 -5 -6 2)
                                (("5" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("6" (prop)
                        (("6" (skolem-typepred)
                          (("6" (delete -3 -4 2)
                            (("6" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("7" (delete - 2) (("7" (grind) nil nil)) nil)
                       ("8" (skolem!)
                        (("8" (delete -1 2)
                          (("8" (nonemptylist "il!1") nil nil)) nil))
                        nil)
                       ("9" (skosimp*)
                        (("9" (typepred "i!3" "i!2")
                          (("9" (delete -3 -5 2)
                            (("9"
                              (lemma "n_orig"
                               ("P" "P!1" "u" "u!1" "r" "P!1-1"))
                              (("9" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("10" (skosimp*)
                        (("10" (typepred "i!3")
                          (("10" (delete -3 -4 2)
                            (("10" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (choice3)
                      (("1" (prefix)
                        (("1" (delete 2 3)
                          (("1" (prefix)
                            (("1" (delete 2 3)
                              (("1"
                                (expand "E")
                                (("1"
                                  (expand "rho_middle" -1)
                                  (("1"
                                    (split)
                                    (("1"
                                      (lemma
                                       "elt_append3"
                                       ("l1"
                                        "i!3`1"
                                        "l2"
                                        "(:i!2:)"
                                        "t"
                                        "n_last"))
                                      (("1"
                                        (lemma
                                         "elt_singleton"
                                         ("t1" "i!2" "t2" "n_last"))
                                        (("1"
                                          (grind
                                           :if-match
                                           nil
                                           :exclude
                                           "elt")
                                          nil
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skosimp*)
                                      (("2"
                                        (comment
                                         "a contradiction is lurking in -2")
                                        (("2"
                                          (decompose-equality -1)
                                          (("2"
                                            (decompose-equality -2)
                                            (("2"
                                              (decompose-equality -1)
                                              (("2"
                                                (decompose-equality -2)
                                                (("2"
                                                  (typepred
                                                   "nl!1"
                                                   "i!3`1"
                                                   "i!3`2"
                                                   "hu_list")
                                                  (("2"
                                                    (delete
                                                     -1
                                                     -3
                                                     -5
                                                     -7
                                                     -12
                                                     +)
                                                    (("2"
                                                      (case "P!1=p")
                                                      (("1"
                                                        (replace -8 -3)
                                                        (("1"
                                                          (rewrite
                                                           "length_append"
                                                           -3)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -3)
                                                            (("1"
                                                              (delete
                                                               -2
                                                               -4
                                                               -5
                                                               -6
                                                               -7
                                                               -8
                                                               -9)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -6 -3)
                                                        (("2"
                                                          (rewrite
                                                           "length_cdr"
                                                           -3)
                                                          (("2"
                                                            (delete
                                                             -1
                                                             -2
                                                             -5
                                                             -6
                                                             -7
                                                             -8)
                                                            (("2"
                                                              (ground)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          ";;; a contradiction is lurking in -2"))
                                        nil))
                                      nil)
                                     ("3"
                                      (skosimp*)
                                      (("3"
                                        (delete -1 -3 +)
                                        (("3"
                                          (decompose-equality -1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (delete 2 3)
                              (("2"
                                (prefix)
                                (("2"
                                  (delete -2 2 3)
                                  (("2"
                                    (prefix)
                                    (("1"
                                      (delete - 2 3)
                                      (("1"
                                        (expand "rho_middle")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (delete - 2 3 4)
                                      (("2" (stop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (delete - 2 3) (("2" (grind) nil nil)) nil)
                       ("3" (delete 2 3)
                        (("3" (nonemptylist "i!3`2") nil nil)) nil)
                       ("4" (typepred "i!3`2")
                        (("4" (delete -1 -3 2 3)
                          (("4" (ground) nil nil)) nil))
                        nil)
                       ("5" (delete - 2 3) (("5" (grind) nil nil)) nil)
                       ("6" (skolem!)
                        (("6" (delete 2 3)
                          (("6" (nonemptylist "il!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_last
     nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_last
     nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_last
     nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_last nil)
    (elt_append3 formula-decl nil listprops nil)
    (elt_singleton formula-decl nil listprops nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (commit adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (commit?)]" gnsl_last nil)
    (commit? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_last nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_last
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_last nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_last
     nil)
    (E const-decl "Message" gnsl_last nil)
    (Key type-eq-decl nil gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (>> const-decl "process" processes "../pvs6_csp_rules/")
    (restriction_choice3 formula-decl nil restriction_rules2
     "../pvs6_csp_rules/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uniform3_choice2 formula-decl nil uniform_props2
     "../pvs6_csp_rules/")
    (n_orig formula-decl nil gnsl_last nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (elt const-decl "bool" listprops nil)
    (remove def-decl "list[T]" listprops nil)
    (length_append formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth_cdr formula-decl nil listprops nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_append formula-decl nil listprops nil)
    (length_cdr formula-decl nil more_list_props "../pvs6_csp_rules/")
    (length_nth_equality formula-decl nil listprops nil)
    (Message_ilist_extensionality formula-decl nil gnsl_last nil)
    (Message_conc_extensionality formula-decl nil gnsl_last nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Message_public_extensionality formula-decl nil gnsl_last nil)
    (hu_list const-decl "{x: list[Identity] |
         (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_last nil)
    (uniform_prefix2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (restriction_pref formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_middle def-decl "bool" gnsl_last nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_1_to type-eq-decl nil gnsl_last nil)
    (R_middle const-decl "set[event]" gnsl_last nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (UROLE_LAST const-decl "process[event]" gnsl_last nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (Role type-eq-decl nil gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (Message type-decl nil gnsl_last nil)
    (INIT const-decl "bool" gnsl_last nil)
    (\|- const-decl "bool" gnsl_last nil)
    (event type-decl nil dynetwork nil))
   shostak))
 (authentication_middle 0
  (authentication_middle-1 nil 3399303698
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      ((""
        (rewrite "authentication_by_rank" + ("rho" "rho_middle(i!1)"))
        (("1" (delete 2)
          (("1" (comment "intruder's initial knowledge is in rho")
            (("1" (skolem!)
              (("1" (prop)
                (("1" (expand "INIT")
                  (("1" (expand "rho_middle") (("1" (smash) nil nil))
                    nil))
                  nil))
                nil))
              ";;; intruder's initial knowledge is in rho"))
            nil))
          nil)
         ("2" (delete 2)
          (("2"
            (comment "from of a set of messages in rho, no message not in rho can be generated")
            (("2" (expand "|-")
              (("2" (rule-induct "Gen")
                (("2" (skolem!)
                  (("2" (smash)
                    (("1" (inst -2 "m!2") (("1" (prop) nil nil)) nil)
                     ("2" (delete -2)
                      (("2" (skolem!)
                        (("2" (prop)
                          (("2" (replace -3 1)
                            (("2" (expand "rho_middle" 1)
                              (("2" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (delete -2)
                      (("3" (skolem!)
                        (("3" (expand "rho_middle" -1)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (delete -2)
                      (("4" (skolem!)
                        (("4" (expand "rho_middle" -1)
                          (("4" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("5" (delete -2)
                      (("5" (skolem!)
                        (("5" (flatten)
                          (("5" (expand "rho_middle" -1)
                            (("5" (replace -2 1)
                              (("5"
                                (expand "rho_middle")
                                (("5"
                                  (delete -2)
                                  (("5" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (delete -2)
                      (("6" (skolem!)
                        (("6" (prop)
                          (("6" (replace -2 1)
                            (("6" (delete -2)
                              (("6"
                                (expand "rho_middle")
                                (("6"
                                  (expand "elt")
                                  (("6"
                                    (inst 1 "0")
                                    (("1" (grind :exclude 2) nil nil)
                                     ("2"
                                      (delete 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("7" (delete -2)
                      (("7" (skolem!)
                        (("7" (prop)
                          (("7" (replace -3 1)
                            (("7" (delete -3)
                              (("7"
                                (expand "rho_middle")
                                (("7"
                                  (lemma
                                   "elt_append3"
                                   ("l1"
                                    "nl1!1"
                                    "l2"
                                    "nl2!1"
                                    "t"
                                    "n_last"))
                                  (("7" (prop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("8" (delete -2)
                      (("8" (skolem!)
                        (("8" (prop)
                          (("8" (replace -3 1)
                            (("8" (delete -3)
                              (("8"
                                (replace -2 -1)
                                (("8"
                                  (delete -2)
                                  (("8"
                                    (expand "rho_middle")
                                    (("8"
                                      (lemma
                                       "elt_append1"
                                       ("l1"
                                        "nl1!1"
                                        "l2"
                                        "nl2!1"
                                        "t"
                                        "n_last"))
                                      (("8" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("9" (delete -2)
                      (("9" (skolem!)
                        (("9" (prop)
                          (("9" (replace -3 1)
                            (("9" (delete -3)
                              (("9"
                                (replace -2 -1)
                                (("9"
                                  (delete -2)
                                  (("9"
                                    (expand "rho_middle")
                                    (("9"
                                      (lemma
                                       "elt_append2"
                                       ("l1"
                                        "nl1!1"
                                        "l2"
                                        "nl2!1"
                                        "t"
                                        "n_last"))
                                      (("9" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("10" (delete -2)
                      (("10" (skolem!)
                        (("10" (prop)
                          (("10" (replace -2 1)
                            (("10" (delete -1 -2)
                              (("10"
                                (expand "rho_middle")
                                (("10" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("11" (delete -2)
                      (("11" (skolem!)
                        (("11" (prop)
                          (("11" (replace -2 1)
                            (("11" (delete -1 -2)
                              (("11"
                                (expand "rho_middle")
                                (("11" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("12" (delete -2)
                      (("12" (skolem!)
                        (("12" (prop)
                          (("12" (replace -3 1)
                            (("12" (delete -1 -2 -3)
                              (("12"
                                (expand "rho_middle")
                                (("12" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("13" (delete -2)
                      (("13" (skolem!)
                        (("13" (prop)
                          (("13" (replace -3 1)
                            (("13" (delete -1 -2 -3)
                              (("13"
                                (expand "rho_middle")
                                (("13" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("14" (delete -2)
                      (("14" (skolem!)
                        (("14" (prop)
                          (("14" (replace -3 1)
                            (("14" (delete -1 -2 -3)
                              (("14"
                                (expand "rho_middle")
                                (("14" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("15" (delete -2)
                      (("15" (skolem!)
                        (("15" (prop)
                          (("15" (replace -3 1)
                            (("15" (delete -3)
                              (("15"
                                (typepred "k!1")
                                (("15"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand "rho_middle" -3)
                                    (("2"
                                      (assert)
                                      (("2" (lazy-grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              ";;; from of a set of messages in rho, no message not in rho can be generated"))
            nil))
          nil)
         ("3" (delete 2)
          (("3" (comment "users maintain the rank function")
            (("3" (skolem!)
              (("3" (expand "USER")
                (("3" (expand "RankUser")
                  (("3" (interleaving2)
                    (("1" (interleaving)
                      (("1" (interleaving)
                        (("1"
                          (lemma "restrictmiddle_init"
                           ("P" "i!3" "u" "i!2" "i" "i!1"))
                          (("1"
                            (grind :exclude
                             ("rho_middle" "UROLE_INIT"))
                            nil nil))
                          nil)
                         ("2"
                          (lemma "restrictmiddle_last"
                           ("P" "i!3" "u" "i!2" "i" "i!1"))
                          (("2"
                            (grind :exclude
                             ("rho_middle" "UROLE_LAST"))
                            nil nil))
                          nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (stop) nil nil)
                           ("2"
                            (lemma "restrictmiddle_middle"
                             ("P" "i!3" "u" "i!2" "i" "i!1"))
                            (("2"
                              (grind :exclude
                               ("rho_middle" "UROLE_MIDDLE"))
                              nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (delete 3)
                        (("3" (use "USER_TCC2") (("3" (prop) nil nil))
                          nil))
                        nil)
                       ("4" (delete 2)
                        (("4" (use "USER_TCC2") nil nil)) nil))
                      nil)
                     ("2" (delete 2) (("2" (use "USER_TCC2") nil nil))
                      nil)
                     ("3" (delete 2)
                      (("3" (skolem!) (("3" (use "USER_TCC2") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              ";;; users maintain the rank function"))
            nil))
          nil)
         ("4" (delete 2)
          (("4" (comment "T is not in rho")
            (("4" (skolem-typepred)
              (("4" (expand "T")
                (("4" (replace -1 -2)
                  (("4" (delete -1) (("4" (grind) nil nil)) nil)) nil))
                nil))
              ";;; T is not in rho"))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[trace[event]]" dynetwork nil)
    (restriction_free_par formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uniform_interleave2 formula-decl nil uniform_props
     "../pvs6_csp_rules/")
    (restrictmiddle_last formula-decl nil gnsl_last nil)
    (restrictmiddle_init formula-decl nil gnsl_last nil)
    (Par const-decl "process" processes "../pvs6_csp_rules/")
    (\|> const-decl "bool" satisfaction "../pvs6_csp_rules/")
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (restriction_stop formula-decl nil restriction_rules
     "../pvs6_csp_rules/")
    (uniform_stop2 formula-decl nil uniform_props "../pvs6_csp_rules/")
    (restrictmiddle_middle formula-decl nil gnsl_last nil)
    (USER_TCC2 existence-tcc nil gnsl_last nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules
     "../pvs6_csp_rules/")
    (uniform2_interleave2 formula-decl nil uniform_props3
     "../pvs6_csp_rules/")
    (TRUE const-decl "bool" booleans nil)
    (restriction_free_par2 formula-decl nil restriction_rules3
     "../pvs6_csp_rules/")
    (// const-decl "process" processes "../pvs6_csp_rules/")
    (Interleave const-decl "process[T]" multipar "../pvs6_csp_rules/")
    (UROLE_INIT const-decl "process[event]" gnsl_last nil)
    (UROLE_LAST const-decl "process[event]" gnsl_last nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Stop const-decl "process" processes "../pvs6_csp_rules/")
    (nat_from_3 type-eq-decl nil gnsl_last nil)
    (UROLE_MIDDLE const-decl "process[event]" gnsl_last nil)
    (complement const-decl "set" sets nil)
    (remove def-decl "list[T]" listprops nil)
    (E const-decl "Message" gnsl_last nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (Key type-eq-decl nil gnsl_last nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_last nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (elt_append2 formula-decl nil listprops nil)
    (elt_append1 formula-decl nil listprops nil)
    (elt_append3 formula-decl nil listprops nil)
    (Role type-eq-decl nil gnsl_last nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_last nil)
    (nat_to_p type-eq-decl nil gnsl_last nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
         FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}"
     gnsl_last nil)
    (Nonces nonempty-type-eq-decl nil gnsl_last nil)
    (n_last const-decl "Nonces(p, hu(p - 1), p - 1)" gnsl_last nil)
    (n!1 skolem-const-decl "Nonce" gnsl_last nil)
    (below type-eq-decl nil nat_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (Nonce nonempty-type-eq-decl nil gnsl_last nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (elt const-decl "bool" listprops nil)
    (/= const-decl "boolean" notequal nil)
    (Gen_weak_induction formula-decl nil gnsl_last nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (\|- const-decl "bool" gnsl_last nil)
    (setof type-eq-decl nil defined_types nil)
    (INIT const-decl "bool" gnsl_last nil)
    (Message type-decl nil gnsl_last nil)
    (Identity nonempty-type-eq-decl nil gnsl_last nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (USER const-decl "process[event]" gnsl_last nil)
    (process type-eq-decl nil processes "../pvs6_csp_rules/")
    (prefix_closed const-decl "bool" processes "../pvs6_csp_rules/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace type-eq-decl nil traces "../pvs6_csp_rules/")
    (list type-decl nil list_adt nil)
    (rho_middle def-decl "bool" gnsl_last nil)
    (T const-decl "set[event]" gnsl_last nil)
    (R_middle const-decl "set[event]" gnsl_last nil)
    (set type-eq-decl nil sets nil)
    (nat_1_to type-eq-decl nil gnsl_last nil)
    (p const-decl "nat_from_2" gnsl_last nil)
    (nat_from_2 type-eq-decl nil gnsl_last nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (event type-decl nil dynetwork nil)
    (authentication_by_rank formula-decl nil dynetwork nil))
   nil)))

