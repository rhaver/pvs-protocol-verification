(listprops
 (insert_TCC1 0
  (insert_TCC1-1 nil 3389804493
   ("" (skolem-typepred) (("" (prop) (("" (grind) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (insert_TCC2 0
  (insert_TCC2-1 nil 3389804493
   ("" (skolem-typepred)
    (("" (prop)
      (("1" (grind) nil nil)
       ("2" (expand "length") (("2" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (insert_TCC3 0
  (insert_TCC3-1 nil 3389804493
   ("" (skolem-typepred)
    (("" (prop) (("" (expand "length") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_insert 0
  (length_insert-1 nil 3390551119
   ("" (induct "l")
    (("1" (skolem-typepred)
      (("1" (expand "length" -1)
        (("1" (expand "length" 1 2)
          (("1" (expand "insert" 1) (("1" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem-typepred)
          (("2" (expand "length" -1)
            (("2" (expand "length" 1 2)
              (("2" (expand "insert" 1) (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons1_var!1 skolem-const-decl "T" listprops nil)
    (cons2_var!1 skolem-const-decl "list[T]" listprops nil)
    (i!1 skolem-const-decl
     "below[1 + length(cons(cons1_var!1, cons2_var!1))]" listprops nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (insert def-decl "list[T]" listprops nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (remove_TCC1 0
  (remove_TCC1-1 nil 3389807672
   ("" (skolem-typepred) (("" (prop) (("" (grind) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (remove_TCC2 0
  (remove_TCC2-1 nil 3389807672
   ("" (skolem-typepred) (("" (prop) (("" (grind) nil nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (remove_TCC3 0
  (remove_TCC3-1 nil 3389807672
   ("" (skolem-typepred)
    (("" (prop)
      (("1" (grind) nil nil)
       ("2" (delete 2)
        (("2" (expand "length") (("2" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (remove_TCC4 0
  (remove_TCC4-1 nil 3389807672
   ("" (skolem-typepred)
    (("" (prop) (("" (expand "length") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_remove 0
  ("length_remove-1" nil 3390551615
   ("" (measure-induct+ "length(c)" "c" 1)
    (("" (skolem-typepred)
      (("" (expand "remove" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (replace -1 -2)
              (("1" (delete -1 -3)
                (("1" (expand "length") (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (hide -2)
              (("2" (expand "length")
                (("2" (grind)
                  (("2" (reveal -1)
                    (("2" (inst -1 "cdr(x!1)")
                      (("1" (inst -1 "i!1-1") (("1" (ground) nil nil))
                        nil)
                       ("2" (delete 3) (("2" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (x!1 skolem-const-decl "(cons?[T])" listprops nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (remove def-decl "list[T]" listprops nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (gen_f_list_TCC1 0
  (gen_f_list_TCC1-1 nil 3389883240 ("" (subtype-tcc) nil nil) nil
   nil))
 (gen_f_list_TCC2 0
  (gen_f_list_TCC2-1 nil 3389883240 ("" (subtype-tcc) nil nil) nil
   nil))
 (gen_f_list_TCC3 0
  (gen_f_list_TCC3-1 nil 3389883240 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (gen_f_list_TCC4 0
  (gen_f_list_TCC4-1 nil 3389883240 ("" (termination-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (gen1 0
  (gen1-1 nil 3390230154
   ("" (skolem 1 ("k!1" "_" "_"))
    (("" (measure-induct+ "k!1-i" "i" 1)
      (("" (hide -1)
        (("" (skolem!)
          (("" (expand "gen_f_list")
            (("" (grind :exclude "gen_f_list")
              (("" (reveal -1)
                (("" (inst -1 "1+x!1")
                  (("" (inst? -1) (("" (ground) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (T formal-type-decl nil listprops nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (gen_f_list def-decl "list[T]" listprops nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (gen2_TCC1 0
  (gen2_TCC1-1 nil 3390230186 ("" (subtype-tcc) nil nil) nil nil))
 (gen2_TCC2 0
  (gen2_TCC2-1 nil 3390230186
   ("" (skolem!)
    (("" (rewrite "gen1")
      (("" (typepred "j!1") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((gen1 formula-decl nil listprops nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (T formal-type-decl nil listprops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil))
 (gen2_TCC3 0
  (gen2_TCC3-1 nil 3390230186 ("" (subtype-tcc) nil nil) nil nil))
 (gen2 0
  (gen2-1 nil 3390230213
   ("" (skolem 1 ("k!1" "_" "_" "_"))
    (("" (measure-induct+ "k!1-(i-j)" ("i" "j") 1)
      (("1" (hide -1)
        (("1" (skolem!)
          (("1" (expand "nth")
            (("1" (expand "gen_f_list")
              (("1" (grind :exclude "gen_f_list")
                (("1" (reveal -1)
                  (("1" (inst -1 "1+x!1" "x!2-1")
                    (("1" (inst -1 "f!1") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (delete -2 2)
        (("2" (rewrite "gen1")
          (("2" (typepred "y!2") (("2" (propax) nil nil)) nil)) nil))
        nil)
       ("3" (delete 2)
        (("3" (skolem!)
          (("3" (rewrite "gen1")
            (("3" (typepred "y!2") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("4" (delete -1 2)
        (("4" (skolem!)
          (("4" (typepred "x!1`1" "x!1`2") (("4" (ground) nil nil))
            nil))
          nil))
        nil)
       ("5" (grind) nil nil) ("6" (grind) nil nil)
       ("7" (delete -1 2)
        (("7" (skolem!)
          (("7" (rewrite "gen1")
            (("7" (typepred "x!1`2") (("7" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("8" (grind) nil nil)
       ("9" (delete -2 2 3)
        (("9" (rewrite "gen1")
          (("9" (typepred "y!1`2") (("9" (propax) nil nil)) nil)) nil))
        nil)
       ("10" (grind) nil nil)
       ("11" (delete 2)
        (("11" (skolem!)
          (("11" (rewrite "gen1")
            (("11" (typepred "y!1`2") (("11" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("12" (delete 2)
        (("12" (rewrite "gen1")
          (("12" (typepred "j!1" "i!1") (("12" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (gen_f_list def-decl "list[T]" listprops nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (k!1 skolem-const-decl "nat" listprops nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (gen1 formula-decl nil listprops nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (elt_singleton 0
  (elt_singleton-1 nil 3390480853
   ("" (skolem!)
    (("" (ground)
      (("1" (expand "elt")
        (("1" (skolem-typepred)
          (("1" (expand "length")
            (("1" (expand "length" -1)
              (("1" (expand "nth" -2) (("1" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "elt" 1)
        (("2" (inst 1 "0")
          (("1" (expand "nth") (("1" (propax) nil nil)) nil)
           ("2" (expand "length" 1) (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T formal-type-decl nil listprops nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (elt const-decl "bool" listprops nil)
    (t1!1 skolem-const-decl "T" listprops nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (equality_length 0
  (equality_length-1 nil 3390051338
   ("" (skolem!) (("" (prop) (("" (ground) nil nil)) nil)) nil) nil
   shostak))
 (equality_nth_TCC1 0
  (equality_nth_TCC1-1 nil 3390208389 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (equality_nth 0
  (equality_nth-1 nil 3390208430
   ("" (skolem!)
    (("" (prop)
      (("" (induct "i")
        (("1" (prop)
          (("1" (expand "nth")
            (("1"
              (lemma "list_adt[T].list_cons_eta" ("cons?_var" "l1!1"))
              (("1"
                (lemma "list_adt[T].list_cons_eta"
                 ("cons?_var" "l2!1"))
                (("1" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (induct-and-simplify "jb") nil nil)
         ("3" (skolem-typepred) (("3" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below_induction formula-decl nil bounded_nat_inductions nil)
    (T formal-type-decl nil listprops nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (l1!1 skolem-const-decl "list[T]" listprops nil)
    (below type-eq-decl nil nat_types nil)
    (l2!1 skolem-const-decl "list[T]" listprops nil))
   shostak))
 (length_nth_equality_TCC1 0
  (length_nth_equality_TCC1-1 nil 3390108435 ("" (subtype-tcc) nil nil)
   ((below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (length_nth_equality 0
  ("length_nth_equality-1" nil 3390231124
   ("" (induct "l1")
    (("1" (skosimp)
      (("1" (simplify -1)
        (("1" (expand "length" -1) (("1" (ground) nil nil)) nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skosimp)
            (("2" (lemma "list_cons_eta" ("cons?_var" "l2!1"))
              (("1" (replace -1 1 rl)
                (("1" (decompose-equality 1)
                  (("1" (inst -3 "0")
                    (("1" (expand "nth") (("1" (propax) nil nil)) nil)
                     ("2" (delete -1 -2 2)
                      (("2" (expand "length") (("2" (ground) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (reveal -2)
                    (("2" (inst -1 "cdr(l2!1)")
                      (("2" (ground)
                        (("1" (delete -1 -3 2)
                          (("1" (expand "length" -1)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (delete -1 -2 2)
                          (("2" (skolem!)
                            (("2" (inst -1 "i!1+1")
                              (("1"
                                (expand "nth" -1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "length")
                                (("2"
                                  (typepred "i!1")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "length" -1)
                (("2" (delete -2 2) (("2" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (delete 2) (("3" (use "length_nth_equality_TCC1") nil nil))
      nil))
    nil)
   ((length_nth_equality_TCC1 subtype-tcc nil listprops nil)
    (list_cons_eta formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons2_var!1 skolem-const-decl "list[T]" listprops nil)
    (cons1_var!1 skolem-const-decl "T" listprops nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "below[length(cons2_var!1)]" listprops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (nth def-decl "T" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil))
   nil))
 (cons_append 0
  ("cons_append-1" nil 3390231656
   ("" (skolem-typepred)
    (("" (expand "append" 1 2) (("" (propax) nil nil)) nil)) nil)
   ((append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (cons_remove_TCC1 0
  (cons_remove_TCC1-1 nil 3390127496
   ("" (skolem-typepred)
    (("" (expand "length") (("" (ground) nil nil)) nil)) nil)
   ((length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (cons_remove_TCC2 0
  (cons_remove_TCC2-1 nil 3390138618
   ("" (skolem-typepred)
    (("" (expand "length" -2) (("" (propax) nil nil)) nil)) nil)
   ((below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (cons_remove_TCC3 0
  (cons_remove_TCC3-1 nil 3390138618
   ("" (skolem-typepred) (("" (ground) nil nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (cons_remove 0
  (cons_remove-1 nil 3390127496
   ("" (skosimp)
    (("" (expand "remove" 1 2) (("" (propax) nil nil)) nil)) nil)
   ((remove def-decl "list[T]" listprops nil)) shostak))
 (nth_remove_TCC1 0
  (nth_remove_TCC1-1 nil 3390161742 ("" (subtype-tcc) nil nil) nil
   nil))
 (nth_remove_TCC2 0
  ("nth_remove_TCC2-1" nil 3390551873
   ("" (skolem-typepred)
    (("" (lemma "length_remove" ("c" "l!1" "i" "i!1"))
      (("1" (replace -1 1 rl) (("1" (propax) nil nil)) nil)
       ("2" (ground)
        (("2" (expand "length" -1) (("2" (ground) nil nil)) nil)) nil))
      nil))
    nil)
   ((length_remove formula-decl nil listprops nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (nth_remove_TCC3 0
  (nth_remove_TCC3-1 nil 3390161742 ("" (subtype-tcc) nil nil) nil
   nil))
 (nth_remove_TCC4 0
  (nth_remove_TCC4-1 nil 3390161742 ("" (subtype-tcc) nil nil) nil
   nil))
 (nth_remove 0
  ("nth_remove-1" nil 3390551963
   ("" (induct "l")
    (("1" (skolem-typepred)
      (("1" (expand "length" -1) (("1" (ground) nil nil)) nil)) nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skolem-typepred)
            (("2" (case "i!1 = 0")
              (("1" (replace* -1)
                (("1" (ground)
                  (("1" (expand "remove" 1)
                    (("1" (expand "nth" 1 2) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "remove" 2)
                (("2" (ground)
                  (("2" (expand "nth" 2 1)
                    (("2" (smash)
                      (("1" (replace* -3)
                        (("1" (expand "nth" 2) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (reveal -1)
                        (("2" (inst -1 "i!1-1" "j!1-1")
                          (("1" (ground)
                            (("1" (expand "nth" 3 2)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "length" -2)
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (reveal -1)
                        (("3" (inst -1 "i!1-1" "j!1-1")
                          (("1" (ground)
                            (("1" (expand "nth" 4 2)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (expand "length" -2)
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (delete 2)
      (("3" (skolem-typepred)
        (("3" (lemma "length_remove" ("c" "l!2" "i" "i!1"))
          (("1" (replace -1 1 rl) (("1" (propax) nil nil)) nil)
           ("2" (expand "length" -1) (("2" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length_remove formula-decl nil listprops nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cons1_var!1 skolem-const-decl "T" listprops nil)
    (cons2_var!1 skolem-const-decl "list[T]" listprops nil)
    (j!1 skolem-const-decl
     "below[length(cons(cons1_var!1, cons2_var!1)) - 1]" listprops nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (remove def-decl "list[T]" listprops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (nth_append_TCC1 0
  (nth_append_TCC1-1 nil 3389980981
   ("" (skolem-typepred)
    (("" (rewrite "length_append") (("" (ground) nil nil)) nil)) nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (nth_append_TCC2 0
  (nth_append_TCC2-1 nil 3390230148 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (T formal-type-decl nil listprops nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (nth_append 0
  ("nth_append-1" nil 3390231587
   ("" (induct "l1")
    (("1" (skolem-typepred)
      (("1" (expand "append")
        (("1" (expand "length" +) (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem-typepred)
      (("2" (prop)
        (("2" (skolem-typepred)
          (("2" (expand "append" 1)
            (("2" (case "i!1=0")
              (("1" (replace* -1)
                (("1" (expand "nth" 1 1)
                  (("1" (expand "length" 1 1)
                    (("1" (expand "nth" 1 1)
                      (("1" (delete -) (("1" (smash) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2 1)
                (("2" (smash)
                  (("1" (inst -2 "l2!1" "i!1-1")
                    (("1" (ground)
                      (("1" (expand "nth" 2 2)
                        (("1" (expand "length" -3)
                          (("1" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "length" -1 1)
                      (("2" (ground) nil nil)) nil))
                    nil)
                   ("2" (inst -2 "l2!1" "i!1-1")
                    (("1" (expand "length" 2)
                      (("1" (ground)
                        (("1" (expand "length" 3)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "length" -1 1)
                      (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (delete 2)
      (("3" (skolem-typepred)
        (("3" (prop) (("3" (ground) nil nil)) nil)) nil))
      nil)
     ("4" (delete 2)
      (("4" (skolem-typepred) (("4" (rewrite "length_append") nil nil))
        nil))
      nil))
    nil)
   ((length_append formula-decl nil list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (i!1 skolem-const-decl
     "below[length(cons(cons1_var!1, cons2_var!1)) + length(l2!1)]"
     listprops nil)
    (l2!1 skolem-const-decl "list[T]" listprops nil)
    (cons2_var!1 skolem-const-decl "list[T]" listprops nil)
    (cons1_var!1 skolem-const-decl "T" listprops nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (nth_cdr 0
  (nth_cdr-1 nil 3390203800
   ("" (skolem-typepred)
    (("" (expand "nth" 1 2) (("" (propax) nil nil)) nil)) nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (elt_append1 0
  (elt_append1-1 nil 3389981809
   ("" (induct "l1")
    (("1" (skolem!)
      (("1" (prop)
        (("1" (delete 1)
          (("1" (expand "elt")
            (("1" (skolem!)
              (("1" (typepred "i!1")
                (("1" (expand "length") (("1" (ground) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem!)
          (("2" (prop)
            (("2" (hide -1)
              (("2" (expand "elt" -1)
                (("2" (skolem!)
                  (("2" (expand "append")
                    (("2" (expand "nth")
                      (("2" (smash)
                        (("1" (expand "elt" 1)
                          (("1" (inst 1 "0")
                            (("1" (expand "nth")
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "length")
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "l2!1" "t!1")
                            (("2" (prop)
                              (("1"
                                (expand "elt" -1)
                                (("1"
                                  (skolem!)
                                  (("1"
                                    (expand "elt")
                                    (("1"
                                      (inst 2 "i!2+1")
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length")
                                        (("2"
                                          (typepred "i!2")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "elt" 1)
                                (("2" (inst 1 "i!1-1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i!2 skolem-const-decl "below[length(append(cons2_var!1, l2!1))]"
     listprops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var!1 skolem-const-decl "T" listprops nil)
    (cons2_var!1 skolem-const-decl "list[T]" listprops nil)
    (l2!1 skolem-const-decl "list[T]" listprops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (append def-decl "list[T]" list_props nil)
    (elt const-decl "bool" listprops nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (elt_append2 0
  ("elt_append2-1" nil 3389982034
   ("" (induct "l1")
    (("1" (skolem!)
      (("1" (prop)
        (("1" (expand "append") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem!)
          (("2" (prop)
            (("2" (hide -1)
              (("2" (expand "elt" -1)
                (("2" (skolem!)
                  (("2" (expand "append")
                    (("2" (expand "nth")
                      (("2" (smash)
                        (("1" (expand "elt" 1)
                          (("1" (inst 1 "1+length(cons2_var!1)")
                            (("1" (grind)
                              (("1" (rewrite "nth_append") nil nil))
                              nil)
                             ("2" (expand "length" 1 2)
                              (("2"
                                (rewrite "length_append")
                                (("2" (ground) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (reveal -1)
                          (("2" (inst -1 "l2!1" "t!1")
                            (("2" (prop)
                              (("1"
                                (expand "elt" -1)
                                (("1"
                                  (skolem!)
                                  (("1"
                                    (expand "elt")
                                    (("1"
                                      (inst 2 "i!2+1")
                                      (("1"
                                        (expand "nth" 2)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length")
                                        (("2"
                                          (typepred "i!2")
                                          (("2" (ground) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "elt" 1)
                                (("2"
                                  (inst 1 "i!1")
                                  (("2"
                                    (delete 3)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i!2 skolem-const-decl "below[length(append(cons2_var!1, l2!1))]"
     listprops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil listprops nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons2_var!1 skolem-const-decl "list[T]" listprops nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var!1 skolem-const-decl "T" listprops nil)
    (l2!1 skolem-const-decl "list[T]" listprops nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (append def-decl "list[T]" list_props nil)
    (elt const-decl "bool" listprops nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (elt_append3 0
  (elt_append3-1 nil 3390019325
   ("" (induct "l1")
    (("1" (skolem!)
      (("1" (prop)
        (("1" (expand "append") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (hide -1)
          (("2" (skosimp)
            (("2" (expand "append")
              (("2" (expand "elt" -)
                (("2" (skosimp)
                  (("2" (expand "nth" -)
                    (("2" (smash)
                      (("1" (expand "elt" 1)
                        (("1" (inst 1 "0")
                          (("1" (expand "nth") (("1" (propax) nil nil))
                            nil)
                           ("2" (expand "length")
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (reveal -1)
                        (("2" (inst -1 "l2!1" "t!1")
                          (("2" (prop)
                            (("1" (expand "elt" -)
                              (("1"
                                (skolem!)
                                (("1"
                                  (expand "elt" 2)
                                  (("1"
                                    (inst 2 "i!2+1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "length")
                                      (("2" (ground) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "elt" 1)
                              (("2" (inst 1 "i!1-1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons2_var!1 skolem-const-decl "list[T]" listprops nil)
    (cons1_var!1 skolem-const-decl "T" listprops nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!2 skolem-const-decl "below[length(cons2_var!1)]" listprops nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (elt const-decl "bool" listprops nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (elt_append4_weak 0
  (elt_append4_weak-1 nil 3398153678
   ("" (induct "l")
    (("1" (skosimp*)
      (("1" (prop)
        (("1" (expand "elt")
          (("1" (delete 1)
            (("1" (skolem-typepred)
              (("1" (expand "length") (("1" (ground) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skolem!)
          (("2" (delete 1)
            (("2" (case "null?(l1!1)")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem!)
          (("2" (prop)
            (("1" (inst -2 "t!1")
              (("1" (case "cons1_var!1=t!1")
                (("1" (delete -2 -3)
                  (("1" (inst 1 "null" "cons2_var!1")
                    (("1" (expand "append")
                      (("1" (replace -1 1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2"
                  (lemma "elt_append3"
                   ("l1" "(:cons1_var!1:)" "l2" "cons2_var!1" "t"
                    "t!1"))
                  (("2"
                    (lemma "elt_singleton"
                     ("t1" "cons1_var!1" "t2" "t!1"))
                    (("2" (hide -4 2)
                      (("2" (grind :exclude "elt")
                        (("2" (delete -2 +)
                          (("2" (reveal -1 1)
                            (("2" (prop)
                              (("2"
                                (skolem!)
                                (("2"
                                  (inst
                                   1
                                   "cons(cons1_var!1,l1!1)"
                                   "l2!1")
                                  (("2"
                                    (expand "append" 1)
                                    (("2"
                                      (decompose-equality 1)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem!)
              (("2" (replace -1 1)
                (("2" (delete -)
                  (("2" (expand "elt")
                    (("2" (inst 1 "length(l1!1)")
                      (("1" (rewrite "nth_append")
                        (("1" (expand "nth") (("1" (propax) nil nil))
                          nil)
                         ("2" (delete 2)
                          (("2" (expand "length" 1 2)
                            (("2" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (rewrite "length_append")
                        (("2" (expand "length" 1 2)
                          (("2" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((l2!1 skolem-const-decl "list[T]" listprops nil)
    (t!1 skolem-const-decl "T" listprops nil)
    (l1!1 skolem-const-decl "list[T]" listprops nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil listprops nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (elt_append3 formula-decl nil listprops nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (elt_singleton formula-decl nil listprops nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (elt const-decl "bool" listprops nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (elt_append4_strong 0
  (elt_append4_strong-1 nil 3398153732
   ("" (induct "l")
    (("1" (skolem-typepred)
      (("1" (delete +)
        (("1" (expand "length") (("1" (ground) nil nil)) nil)) nil))
      nil)
     ("2" (skolem!)
      (("2" (prop)
        (("2" (skolem!)
          (("2" (prop)
            (("1" (case "i!1=0")
              (("1" (delete -3)
                (("1" (replace -1 -2)
                  (("1" (expand "nth" -2)
                    (("1" (inst 1 "null" "cons2_var!1")
                      (("1" (expand "append")
                        (("1" (replace -2 1) (("1" (propax) nil nil))
                          nil))
                        nil)
                       ("2" (expand "length" 1 2)
                        (("2" (ground) nil nil)) nil)
                       ("3" (expand "length") (("3" (ground) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -2 "t!1" "i!1-1")
                (("1" (hide -2 2)
                  (("1" (expand "nth")
                    (("1" (ground)
                      (("1" (reveal -1 1)
                        (("1" (prop)
                          (("1" (skolem-typepred)
                            (("1"
                              (inst 1 "cons(cons1_var!1, l1!1)" "l2!1")
                              (("1"
                                (expand "append" 1)
                                (("1"
                                  (replace -4 1)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1 2)
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (expand "length" 1)
                                (("3"
                                  (delete -2 -3 -4 -5 2)
                                  (("3" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete -1 3)
                  (("2" (typepred "i!1")
                    (("2" (expand "length" -1) (("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skolem-typepred)
              (("2" (replace -3 1)
                (("2" (delete -4)
                  (("2"
                    (lemma "nth_append"
                     ("l1" "l1!1" "l2" "cons(t!1,l2!1)" "i" "i!1"))
                    (("1" (replace* -1 -2)
                      (("1" (delete -1 -2)
                        (("1" (ground)
                          (("1" (expand "nth") (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "i!1")
                      (("2" (delete 2)
                        (("2" (expand "length" 1 1)
                          (("2" (replace* -2 -3)
                            (("2" (delete -2 -3 -4)
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth_append formula-decl nil listprops nil)
    (cons1_var!1 skolem-const-decl "T" listprops nil)
    (cons2_var!1 skolem-const-decl "list[T]" listprops nil)
    (i!1 skolem-const-decl
     "below[length(cons(cons1_var!1, cons2_var!1))]" listprops nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (l1!1 skolem-const-decl "{x: list[T] | length(x) = i!1 - 1}"
     listprops nil)
    (l2!1 skolem-const-decl
     "{x: list[T] | length(x) = length(cons2_var!1) - i!1}" listprops
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil listprops nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil)))

