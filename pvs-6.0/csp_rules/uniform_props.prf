(uniform_props
 (uniform_true 0
  (uniform_true-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (expand "|>")
      (("" (assert)
        (("" (skosimp*) (("" (rewrite "every_true") nil nil)) nil))
        nil))
      nil))
    nil)
   ((\|> const-decl "bool" satisfaction nil)
    (T formal-type-decl nil uniform_props nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (every_true formula-decl nil more_list_props nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil))
   nil))
 (uniform_true2 0
  (uniform_true2-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (split)
        (("1" (flatten)
          (("1" (expand "|>")
            (("1" (assert)
              (("1" (skosimp)
                (("1" (inst?)
                  (("1" (assert) (("1" (rewrite "every_true") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "|>")
            (("2" (assert)
              (("2" (skosimp*)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil uniform_props nil)
    (every_true formula-decl nil more_list_props nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (uniform_strengthen 0
  (uniform_strengthen-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp)
      (("" (lemma "sat_transitive2[T]")
        ((""
          (inst -1 "(LAMBDA t: every(p1!1)(t) => every(p2!1)(t))"
           "(LAMBDA t: every(p3!1)(t) => every(p4!1)(t))" "P!1")
          (("" (assert)
            (("" (delete -2 2)
              (("" (induct "x")
                (("1" (grind) nil nil)
                 ("2" (skosimp)
                  (("2" (expand "every" -3)
                    (("2" (flatten)
                      (("2" (split -2)
                        (("1" (expand "every" -1)
                          (("1" (flatten)
                            (("1" (split -3)
                              (("1"
                                (expand "every" 1)
                                (("1"
                                  (split)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil)
                               ("3" (flatten) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "every" 1)
                          (("2" (split 1)
                            (("1" (inst?) (("1" (assert) nil nil)) nil)
                             ("2" (lemma "every_implies3[T]")
                              (("2"
                                (inst -1 "p3!1" "p1!1")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (skosimp)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (every_implies3 formula-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (sat_transitive2 formula-decl nil satisfaction nil)
    (T formal-type-decl nil uniform_props nil))
   nil))
 (uniform_stop 0
  (uniform_stop-1 nil 3347116427 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (Stop const-decl "process" processes nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (uniform_stop2 0
  (uniform_stop2-1 nil 3347116427 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (Stop const-decl "process" processes nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (uniform_prefix 0
  (uniform_prefix-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (split)
        (("1" (ground)
          (("1" (expand "|>")
            (("1" (assert)
              (("1" (expand ">>")
                (("1" (inst -1 "cons(e!1, null)")
                  (("1" (split)
                    (("1" (expand "every") (("1" (propax) nil nil))
                      nil)
                     ("2" (flatten) (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "|>")
            (("2" (assert)
              (("2" (skosimp)
                (("2" (inst -2 "cons(e!1, x!1)")
                  (("2" (split)
                    (("1" (expand "every" -1) (("1" (flatten) nil nil))
                      nil)
                     ("2" (expand ">>") (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (ground)
          (("2" (expand "|>")
            (("2" (assert)
              (("2" (skosimp)
                (("2" (expand ">>")
                  (("2" (split)
                    (("1" (delete -2 -3) (("1" (grind) nil nil)) nil)
                     ("2" (skolem-typepred)
                      (("2" (replace -2)
                        (("2" (delete -2)
                          (("2" (expand "every" 1)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (>> const-decl "process" processes nil)
    (\|> const-decl "bool" satisfaction nil)
    (x!1 skolem-const-decl "trace[T]" uniform_props nil)
    (P!1 skolem-const-decl "process[T]" uniform_props nil))
   nil))
 (uniform_prefix2 0
  (uniform_prefix2-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp)
      (("" (expand "|>")
        (("" (assert)
          (("" (skosimp)
            (("" (expand ">>")
              (("" (split -2)
                (("1" (delete -2 -3) (("1" (grind) nil nil)) nil)
                 ("2" (skolem-typepred)
                  (("2" (replace -2)
                    (("2" (delete -2)
                      (("2" (expand "every" -3)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (expand "every" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (>> const-decl "process" processes nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (every adt-def-decl "boolean" list_adt nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (uniform_prefix3 0
  (uniform_prefix3-1 nil 3417193499
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp)
      (("" (expand "|>")
        (("" (assert)
          (("" (split)
            (("1" (inst -1 "cons(e!1, null)")
              (("1" (expand ">>")
                (("1" (prop)
                  (("1" (expand "every") (("1" (ground) nil)))
                   ("2" (expand "every")
                    (("2" (expand "every") (("2" (propax) nil)))))
                   ("3" (inst 1 "null") nil)))))))
             ("2" (skolem!)
              (("2" (expand ">>")
                (("2" (inst -1 "cons(e!1,x!1)")
                  (("2" (prop)
                    (("1" (expand "every" -1) (("1" (ground) nil)))
                     ("2" (expand "every" 1) (("2" (propax) nil)))
                     ("3" (inst 2 "x!1") nil))))))))))))))))))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x!1 skolem-const-decl "trace[T]" uniform_props nil)
    (P!1 skolem-const-decl "process[T]" uniform_props nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (>> const-decl "process" processes nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (uniform_prefix4 0
  (uniform_prefix4-1 nil 3417193526
   ("" (skosimp)
    (("" (split)
      (("1" (use "uniform_prefix2") nil)
       ("2" (use "uniform_prefix3") nil))))
    nil)
   ((uniform_prefix2 formula-decl nil uniform_props nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (pred type-eq-decl nil defined_types nil)
    (uniform_prefix3 formula-decl nil uniform_props nil))
   nil))
 (uniform_choice 0
  (uniform_choice-1 nil 3347116427
   ("" (use "sat_choice1[T]")
    (("" (skolem!) (("" (inst?) nil nil)) nil)) nil)
   ((list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (T formal-type-decl nil uniform_props nil)
    (sat_choice1 formula-decl nil satisfaction nil))
   nil))
 (uniform_choice2 0
  (uniform_choice2-1 nil 3347116427
   ("" (lemma "sat_choice1[T]")
    (("" (skolem!) (("" (inst?) nil nil)) nil)) nil)
   ((list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (sat_choice1 formula-decl nil satisfaction nil)
    (T formal-type-decl nil uniform_props nil))
   nil))
 (uniform2_choice 0
  (uniform2_choice-1 nil 3347116427
   ("" (lemma "sat_choice2[T]")
    (("" (skolem!)
      (("" (inst?)
        (("" (ground) (("" (use "uniform_stop") nil nil)) nil)) nil))
      nil))
    nil)
   ((uniform_stop formula-decl nil uniform_props nil)
    (set type-eq-decl nil sets nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (sat_choice2 formula-decl nil satisfaction nil)
    (T formal-type-decl nil uniform_props nil))
   nil))
 (uniform2_choice2 0
  (uniform2_choice2-1 nil 3347116427
   ("" (lemma "sat_choice2[T]")
    (("" (skolem!)
      (("" (inst?)
        (("" (ground) (("" (use "uniform_stop2") nil nil)) nil)) nil))
      nil))
    nil)
   ((uniform_stop2 formula-decl nil uniform_props nil)
    (set type-eq-decl nil sets nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (sat_choice2 formula-decl nil satisfaction nil)
    (T formal-type-decl nil uniform_props nil))
   nil))
 (uniform_par23 0
  (uniform_par23-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp*)
      (("" (expand "|>")
        (("" (assert)
          (("" (induct "x" :name "add_induction[T]")
            (("1" (flatten)
              (("1" (expand "every" 1) (("1" (propax) nil nil)) nil))
              nil)
             ("2" (skosimp)
              (("2" (forward-chain "process_add")
                (("2" (assert)
                  (("2" (delete -1)
                    (("2" (expand "add" 1)
                      (("2" (rewrite "every_append")
                        (("2" (expand "every" 1)
                          (("2" (expand "every" 1)
                            (("2" (expand "Par" -2)
                              (("2"
                                (skolem-typepred)
                                (("2"
                                  (rewrite "prod_add")
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (skosimp)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (delete -2 -3)
                                              (("1"
                                                (inst
                                                 -9
                                                 "add(u1!1, a!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -10
                                                     "add(u2!1, a!1)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (delete -3 -4)
                                                        (("1"
                                                          (expand
                                                           "add")
                                                          (("1"
                                                            (rewrite
                                                             "every_append")
                                                            (("1"
                                                              (forward-chain
                                                               "every_prod")
                                                              (("1"
                                                                (use
                                                                 "every_implies[T]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "B1!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "every"
                                                                         -9
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "every"
                                                                           -9
                                                                           1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "every_append")
                                                                            (("1"
                                                                              (delete
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "every_append")
                                                                                (("1"
                                                                                  (rewrite
                                                                                   "prod_commutes")
                                                                                  (("1"
                                                                                    (forward-chain
                                                                                     "every_prod")
                                                                                    (("1"
                                                                                      (use
                                                                                       "every_implies[T]")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "B2!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "every"
                                                                                               -11
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "every"
                                                                                                 -11
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "every_append")
                                                                                                  (("1"
                                                                                                    (inst?
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (split)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           -1
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (use
                                                                                                             "every_implies[T]")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "lambda (a : T) : NOT(B1!1(a))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "every"
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (delete
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (use
                                                                                                             "every_implies[T]")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "lambda (a : T) : NOT(B2!1(a))")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "every"
                                                                                                                     -10)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (skosimp)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (delete -1)
                                              (("1"
                                                (inst
                                                 -8
                                                 "add(u1!1, a!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (delete -2)
                                                    (("1"
                                                      (expand "add")
                                                      (("1"
                                                        (rewrite
                                                         "every_append")
                                                        (("1"
                                                          (forward-chain
                                                           "every_prod")
                                                          (("1"
                                                            (use
                                                             "every_implies[T]")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "B1!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "every"
                                                                     -9
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "every"
                                                                       -9
                                                                       1)
                                                                      (("1"
                                                                        (inst?
                                                                         -6)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (rewrite
                                                                             "every_append")
                                                                            (("1"
                                                                              (delete
                                                                               -1)
                                                                              (("1"
                                                                                (use
                                                                                 "every_implies[T]")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "lambda (a : T) : NOT(B1!1(a))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "every"
                                                                                         -8)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skosimp)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (delete -1)
                                              (("2"
                                                (inst
                                                 -9
                                                 "add(u2!1, a!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (delete -3)
                                                    (("2"
                                                      (expand "add")
                                                      (("2"
                                                        (rewrite
                                                         "every_append")
                                                        (("2"
                                                          (rewrite
                                                           "prod_commutes")
                                                          (("2"
                                                            (forward-chain
                                                             "every_prod")
                                                            (("2"
                                                              (use
                                                               "every_implies[T]")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "B2!1")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "every"
                                                                       -10
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "every"
                                                                         -10
                                                                         1)
                                                                        (("2"
                                                                          (inst?
                                                                           -7)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (rewrite
                                                                               "every_append")
                                                                              (("2"
                                                                                (delete
                                                                                 -1)
                                                                                (("2"
                                                                                  (use
                                                                                   "every_implies[T]")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "lambda (a : T) : NOT(B2!1(a))")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "every"
                                                                                           -9)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (complement const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(cons?[T])" more_list_props nil)
    (prod_add formula-decl nil traces nil)
    (every_prod formula-decl nil traces nil)
    (prod_commutes formula-decl nil traces nil)
    (every_implies formula-decl nil more_list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (every_append formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (process_add formula-decl nil process_rules nil)
    (T formal-type-decl nil uniform_props nil)
    (add_induction formula-decl nil more_list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (Par const-decl "process" processes nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace type-eq-decl nil traces nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (uniform_par56 0
  (uniform_par56-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp*)
      (("" (expand "|>")
        (("" (assert)
          (("" (induct "x" :name "add_induction[T]")
            (("1" (flatten)
              (("1" (expand "every" 1) (("1" (propax) nil nil)) nil))
              nil)
             ("2" (skosimp)
              (("2" (forward-chain "process_add")
                (("2" (assert)
                  (("2" (delete -1)
                    (("2" (expand "add" -3)
                      (("2" (rewrite "every_append")
                        (("2" (flatten)
                          (("2" (expand "every" -4)
                            (("2" (expand "every" -4)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "add" 1)
                                  (("2"
                                    (rewrite "every_append")
                                    (("2"
                                      (expand "every" 1)
                                      (("2"
                                        (expand "every" 1)
                                        (("2"
                                          (expand "Par" -2)
                                          (("2"
                                            (skolem-typepred)
                                            (("2"
                                              (rewrite "prod_add")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (skosimp)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (delete
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (inst
                                                             -11
                                                             "add(u1!1, a!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -12
                                                                 "add(u2!1, a!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (delete
                                                                     -3
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "add")
                                                                      (("1"
                                                                        (rewrite
                                                                         "every_append")
                                                                        (("1"
                                                                          (case
                                                                           "every(LAMBDA e: p1!1(e) AND (B1!1(e) => p2!1(e)))(u1!1) = (every(p1!1)(u1!1) AND every(LAMBDA e : (B1!1(e) => p2!1(e)))(u1!1))")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (delete
                                                                               -1)
                                                                              (("1"
                                                                                (lemma
                                                                                 "every_prod[T]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "A!1"
                                                                                   "p1!1"
                                                                                   "l!1"
                                                                                   "u1!1"
                                                                                   "u2!1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (delete
                                                                                       -1)
                                                                                      (("1"
                                                                                        (forward-chain
                                                                                         "every_prod")
                                                                                        (("1"
                                                                                          (use
                                                                                           "every_implies[T]")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "B1!1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "every"
                                                                                                     -10
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "every"
                                                                                                       -10
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "every_append")
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "every_append")
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "every(LAMBDA e: p1!1(e) AND (B2!1(e) => p2!1(e)))(u2!1) = (every(p1!1)(u2!1) AND every(LAMBDA e : (B2!1(e) => p2!1(e)))(u2!1))")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (delete
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (rewrite
                                                                                                                   "prod_commutes")
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "every_prod[T]")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "A!1"
                                                                                                                       "p1!1"
                                                                                                                       "l!1"
                                                                                                                       "u2!1"
                                                                                                                       "u1!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (delete
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "every_prod[T]")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "A!1"
                                                                                                                               "p2!1"
                                                                                                                               "l!1"
                                                                                                                               "u2!1"
                                                                                                                               "u1!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (use
                                                                                                                                   "every_implies[T]")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "B2!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (delete
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "every"
                                                                                                                                             -12
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "every"
                                                                                                                                               -12
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (inst?
                                                                                                                                                 -10)
                                                                                                                                                (("1"
                                                                                                                                                  (split)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "every_implies[T]")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "p2!1"
                                                                                                                                                         "u1!1")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "lambda (a : T) : NOT B1!1(a)")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "every"
                                                                                                                                                                 -11)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "every_append")
                                                                                                                                                      (("2"
                                                                                                                                                        (forward-chain
                                                                                                                                                         "every_implies")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "every"
                                                                                                                                                           -13)
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (delete
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (delete
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (generalize
                                                                                                                   "u2!1"
                                                                                                                   "t")
                                                                                                                  (("2"
                                                                                                                    (induct-and-simplify
                                                                                                                     "t")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (delete
                                                                             -)
                                                                            (("2"
                                                                              (delete
                                                                               2)
                                                                              (("2"
                                                                                (generalize
                                                                                 "u1!1"
                                                                                 "t")
                                                                                (("2"
                                                                                  (induct-and-simplify
                                                                                   "t")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (skosimp)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (delete -1)
                                                          (("1"
                                                            (inst
                                                             -10
                                                             "add(u1!1, a!1)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (delete
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "add")
                                                                  (("1"
                                                                    (rewrite
                                                                     "every_append")
                                                                    (("1"
                                                                      (case
                                                                       "every(LAMBDA e: p1!1(e) AND (B1!1(e) => p2!1(e)))(u1!1) = (every(p1!1)(u1!1) AND every(LAMBDA e : (B1!1(e) => p2!1(e)))(u1!1))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (delete
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "every_prod[T]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "A!1"
                                                                               "p1!1"
                                                                               "l!1"
                                                                               "u1!1"
                                                                               "t2!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (delete
                                                                                   -1)
                                                                                  (("1"
                                                                                    (forward-chain
                                                                                     "every_prod")
                                                                                    (("1"
                                                                                      (use
                                                                                       "every_implies[T]")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "B1!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (delete
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "every"
                                                                                                 -10
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "every"
                                                                                                   -10
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (inst?
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (rewrite
                                                                                                         "every_append")
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "every"
                                                                                                             -10)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         -)
                                                                        (("2"
                                                                          (delete
                                                                           2)
                                                                          (("2"
                                                                            (generalize
                                                                             "u1!1"
                                                                             "t")
                                                                            (("2"
                                                                              (induct-and-simplify
                                                                               "t")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (skosimp)
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (delete -1)
                                                          (("2"
                                                            (inst
                                                             -11
                                                             "add(u2!1, a!1)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (delete
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   "add")
                                                                  (("2"
                                                                    (rewrite
                                                                     "every_append")
                                                                    (("2"
                                                                      (case
                                                                       "every(LAMBDA e: p1!1(e) AND (B2!1(e) => p2!1(e)))(u2!1) = (every(p1!1)(u2!1) AND every(LAMBDA e : (B2!1(e) => p2!1(e)))(u2!1))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (delete
                                                                           -1)
                                                                          (("1"
                                                                            (rewrite
                                                                             "prod_commutes")
                                                                            (("1"
                                                                              (lemma
                                                                               "every_prod[T]")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "A!1"
                                                                                 "p1!1"
                                                                                 "l!1"
                                                                                 "u2!1"
                                                                                 "t1!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (delete
                                                                                     -1)
                                                                                    (("1"
                                                                                      (forward-chain
                                                                                       "every_prod")
                                                                                      (("1"
                                                                                        (use
                                                                                         "every_implies[T]")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "B2!1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (delete
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "every"
                                                                                                   -11
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "every"
                                                                                                     -11
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (inst?
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (rewrite
                                                                                                           "every_append")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "every"
                                                                                                               -11)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         -)
                                                                        (("2"
                                                                          (delete
                                                                           2)
                                                                          (("2"
                                                                            (generalize
                                                                             "u2!1"
                                                                             "t")
                                                                            (("2"
                                                                              (induct-and-simplify
                                                                               "t")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (complement const-decl "set" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(cons?[T])" more_list_props nil)
    (prod_add formula-decl nil traces nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every_implies formula-decl nil more_list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (prod_commutes formula-decl nil traces nil)
    (every_prod formula-decl nil traces nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (every_append formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (process_add formula-decl nil process_rules nil)
    (T formal-type-decl nil uniform_props nil)
    (add_induction formula-decl nil more_list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (Par const-decl "process" processes nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace type-eq-decl nil traces nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (uniform_interleave 0
  (uniform_interleave-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (split)
        (("1" (ground)
          (("1" (use "sat_free_par1[T]") (("1" (assert) nil nil)) nil)
           ("2" (use "sat_free_par2[T]") (("2" (assert) nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (expand "//")
            (("2" (rewrite "uniform_par23")
              (("2" (inst 1 "emptyset[T]" "emptyset[T]")
                (("2" (delete 2)
                  (("2" (grind)
                    (("1" (delete -2)
                      (("1" (eta "pred[T]")
                        (("1" (inst?)
                          (("1" (replace -1) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete -2)
                      (("2" (eta "pred[T]")
                        (("2" (inst?)
                          (("2" (replace -1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (delete -2)
                      (("3" (eta "pred[T]")
                        (("3" (inst?)
                          (("3" (replace -1) (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((uniform_par23 formula-decl nil uniform_props nil)
    (set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (\|> const-decl "bool" satisfaction nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (// const-decl "process" processes nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (T formal-type-decl nil uniform_props nil)
    (sat_free_par1 formula-decl nil satisfaction nil)
    (sat_free_par2 formula-decl nil satisfaction nil))
   nil))
 (uniform_interleave2 0
  (uniform_interleave2-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (split)
        (("1" (ground)
          (("1" (use "sat_free_par1[T]") (("1" (assert) nil nil)) nil)
           ("2" (use "sat_free_par2[T]") (("2" (assert) nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (expand "//")
            (("2" (rewrite "uniform_par56")
              (("2" (delete 2)
                (("2" (inst 1 "emptyset[T]" "emptyset[T]")
                  (("2" (grind)
                    (("1" (delete -2)
                      (("1" (eta "pred[T]")
                        (("1" (inst?)
                          (("1" (replace -1) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete 1)
                      (("2" (eta "pred[T]")
                        (("2" (inst?)
                          (("2" (replace -1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (delete -3)
                      (("3" (eta "pred[T]")
                        (("3" (inst?)
                          (("3" (replace -1) (("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (delete 1)
                      (("4" (eta "pred[T]")
                        (("4" (inst?)
                          (("4" (replace -1) (("4" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (eta "pred[T]")
                      (("5" (inst?)
                        (("5" (replace -1) (("5" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("6" (delete -2)
                      (("6" (eta "pred[T]")
                        (("6" (inst?)
                          (("6" (replace -1) (("6" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("7" (delete 1)
                      (("7" (eta "pred[T]")
                        (("7" (inst?)
                          (("7" (replace -1) (("7" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((uniform_par56 formula-decl nil uniform_props nil)
    (set type-eq-decl nil sets nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (empty? const-decl "bool" sets nil)
    (disjoint? const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (\|> const-decl "bool" satisfaction nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (// const-decl "process" processes nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (T formal-type-decl nil uniform_props nil)
    (sat_free_par1 formula-decl nil satisfaction nil)
    (sat_free_par2 formula-decl nil satisfaction nil))
   nil))
 (uniform_fix1 0
  (uniform_fix1-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skolem-typepred)
      (("" (flatten)
        (("" (skosimp)
          (("" (lemma "induction[T]")
            (("" (inst -1 "every(p1!1)" "F!1")
              (("" (split)
                (("1" (forward-chain "every_implies3")
                  (("1" (delete -4)
                    (("1" (lemma "sat_transitive2[T]")
                      (("1"
                        (inst -1 "every(p1!1)" "every(p2!1)" "mu(F!1)")
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "uniform_stop") nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points2 nil)
    (set type-eq-decl nil sets nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (uniform_stop formula-decl nil uniform_props nil)
    (every_implies3 formula-decl nil more_list_props nil)
    (sat_transitive2 formula-decl nil satisfaction nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (mu const-decl "process[T]" fixed_points2 nil)
    (induction formula-decl nil fixed_points2 nil))
   nil))
 (uniform_fix2 0
  (uniform_fix2-1 nil 3347116427
   ("" (auto-rewrite-theory "sets")
    (("" (skolem-typepred)
      (("" (flatten)
        (("" (skosimp)
          (("" (lemma "induction[T]")
            ((""
              (inst -1 "(LAMBDA t: every(p3!1)(t) => every(p4!1)(t))"
               "F!1")
              (("" (split)
                (("1" (lemma "every_implies4[T]")
                  (("1" (inst -1 "p1!1" "p2!1" "p3!1" "p4!1")
                    (("1" (split)
                      (("1" (lemma "sat_transitive2[T]")
                        (("1"
                          (inst -1
                           "(LAMBDA t: every(p3!1)(t) => every(p4!1)(t))"
                           "(LAMBDA t: every(p1!1)(t) => every(p2!1)(t))"
                           "mu(F!1)")
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (skolem!)
                        (("2" (inst?)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skolem!)
                        (("3" (inst?)
                          (("3" (flatten) (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (use "uniform_stop2") nil nil)
                 ("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points2 nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (uniform_stop2 formula-decl nil uniform_props nil)
    (every_implies4 formula-decl nil more_list_props nil)
    (mu const-decl "process[T]" fixed_points2 nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (sat_transitive2 formula-decl nil satisfaction nil)
    (induction formula-decl nil fixed_points2 nil))
   nil))
 (uniform_run 0
  (uniform_run-1 nil 3347116427
   ("" (skosimp)
    (("" (expand "RUN")
      (("" (fix1)
        (("1" (inst 1 "p!1")
          (("1" (delete 2)
            (("1" (split)
              (("1" (skosimp) nil nil)
               ("2" (skosimp)
                (("2" (expand "FRUN") (("2" (prefix) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "RUN_TCC1[T]") nil nil))
        nil))
      nil))
    nil)
   ((RUN const-decl "process[T]" csp_run nil)
    (uniform_prefix formula-decl nil uniform_props nil)
    (uniform_fix1 formula-decl nil uniform_props nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points2 nil)
    (FRUN const-decl "process[T]" csp_run nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (uniform_run2 0
  (uniform_run2-1 nil 3347116427
   ("" (skosimp)
    (("" (expand "RUN")
      (("" (fix1)
        (("1" (delete 2)
          (("1" (inst 1 "p1!1" "p2!1")
            (("1" (split)
              (("1" (skosimp) (("1" (ground) nil nil)) nil)
               ("2" (skosimp)
                (("2" (expand "FRUN") (("2" (prefix) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "RUN_TCC1[T]") nil nil))
        nil))
      nil))
    nil)
   ((RUN const-decl "process[T]" csp_run nil)
    (uniform_prefix2 formula-decl nil uniform_props nil)
    (uniform_fix2 formula-decl nil uniform_props nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points2 nil)
    (FRUN const-decl "process[T]" csp_run nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (uniform_run3 0
  (uniform_run3-1 nil 3347116427
   ("" (skosimp)
    (("" (expand "RUN")
      (("" (fix1)
        (("1" (inst 1 "p!1")
          (("1" (split)
            (("1" (skosimp) nil nil)
             ("2" (delete 2)
              (("2" (skosimp)
                (("2" (expand "FRUN")
                  (("2" (expand "|>")
                    (("2" (expand "subset?")
                      (("2" (expand "member")
                        (("2" (skosimp)
                          (("2" (expand "Choice")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skolem-typepred)
                                (("2"
                                  (expand ">>")
                                  (("2"
                                    (split)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (skolem-typepred)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (expand "every" 1)
                                          (("2"
                                            (split)
                                            (("1" (inst? -5) nil nil)
                                             ("2"
                                              (inst? -4)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "RUN_TCC2[T]") nil nil))
        nil))
      nil))
    nil)
   ((RUN const-decl "process[T]" csp_run nil)
    (subset? const-decl "bool" sets nil)
    (every adt-def-decl "boolean" list_adt nil)
    (>> const-decl "process" processes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Choice const-decl "process[T]" parametric_choice nil)
    (member const-decl "bool" sets nil)
    (\|> const-decl "bool" satisfaction nil)
    (uniform_fix1 formula-decl nil uniform_props nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points2 nil)
    (FRUN const-decl "process[T]" csp_run nil)
    (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (uniform_run4 0
  (uniform_run4-1 nil 3347116427
   ("" (skosimp)
    (("" (expand "RUN")
      (("" (fix1)
        (("1" (inst 1 "p1!1" "p2!1")
          (("1" (split)
            (("1" (delete 2) (("1" (grind) nil nil)) nil)
             ("2" (delete 2)
              (("2" (skosimp)
                (("2" (expand "FRUN")
                  (("2" (expand "|>")
                    (("2" (expand "subset?")
                      (("2" (expand "member")
                        (("2" (skosimp)
                          (("2" (expand "Choice")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skolem-typepred)
                                (("2"
                                  (expand ">>")
                                  (("2"
                                    (split)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (skolem-typepred)
                                      (("2"
                                        (replace -2)
                                        (("2"
                                          (expand "every" -5)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "every" 1)
                                              (("2"
                                                (split)
                                                (("1"
                                                  (inst? -7)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst? -4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (use "RUN_TCC2[T]") nil nil))
        nil))
      nil))
    nil)
   ((RUN const-decl "process[T]" csp_run nil)
    (subset? const-decl "bool" sets nil)
    (every adt-def-decl "boolean" list_adt nil)
    (>> const-decl "process" processes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Choice const-decl "process[T]" parametric_choice nil)
    (member const-decl "bool" sets nil)
    (\|> const-decl "bool" satisfaction nil)
    (uniform_fix2 formula-decl nil uniform_props nil)
    (T formal-type-decl nil uniform_props nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points2 nil)
    (FRUN const-decl "process[T]" csp_run nil)
    (set type-eq-decl nil sets nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (uni_test2 0
  (uni_test2-1 nil 3347546429
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp*)
      (("" (expand "|>")
        (("" (assert)
          (("" (induct "x" :name "add_induction[T]")
            (("1" (flatten)
              (("1" (expand "every" 1) (("1" (propax) nil nil)) nil))
              nil)
             ("2" (skosimp)
              (("2" (forward-chain "process_add")
                (("2" (assert)
                  (("2" (delete -1)
                    (("2" (flatten)
                      (("2" (split 1)
                        (("1" (expand "add" 1)
                          (("1" (rewrite "every_append")
                            (("1" (assert)
                              (("1"
                                (expand "every" 1)
                                (("1"
                                  (expand "every" 1)
                                  (("1"
                                    (expand "Par" -3)
                                    (("1"
                                      (skolem-typepred)
                                      (("1"
                                        (rewrite "prod_add")
                                        (("1"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (delete -2 -3)
                                                    (("1"
                                                      (inst
                                                       -11
                                                       "add(u1!1, a!1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -12
                                                           "add(u2!1, a!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (delete
                                                               -3
                                                               -4)
                                                              (("1"
                                                                (delete
                                                                 -9)
                                                                (("1"
                                                                  (expand
                                                                   "add")
                                                                  (("1"
                                                                    (rewrite
                                                                     "every_append")
                                                                    (("1"
                                                                      (split
                                                                       -9)
                                                                      (("1"
                                                                        (rewrite
                                                                         "every_append")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (delete
                                                                         -4)
                                                                        (("2"
                                                                          (rewrite
                                                                           "prod_commutes")
                                                                          (("2"
                                                                            (forward-chain
                                                                             "every_prod")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "every"
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           "every"
                                                                           1)
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (inst?
                                                                               -9)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (inst? -7)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "add" 1)
                          (("2" (rewrite "every_append")
                            (("2" (assert)
                              (("2"
                                (expand "every" 1)
                                (("2"
                                  (expand "every" 1)
                                  (("2"
                                    (expand "Par" -3)
                                    (("2"
                                      (skolem-typepred)
                                      (("2"
                                        (rewrite "prod_add")
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (skosimp)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (delete -2 -3)
                                                    (("1"
                                                      (inst
                                                       -11
                                                       "add(u1!1, a!1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -12
                                                           "add(u2!1, a!1)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (delete
                                                               -3
                                                               -4)
                                                              (("1"
                                                                (delete
                                                                 -10)
                                                                (("1"
                                                                  (expand
                                                                   "add")
                                                                  (("1"
                                                                    (rewrite
                                                                     "every_append")
                                                                    (("1"
                                                                      (split
                                                                       -9)
                                                                      (("1"
                                                                        (rewrite
                                                                         "every_append")
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (forward-chain
                                                                         "every_prod")
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (expand
                                                                         "every"
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           "every"
                                                                           1)
                                                                          (("3"
                                                                            (flatten)
                                                                            (("3"
                                                                              (inst?
                                                                               -9)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (inst? -8)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (disjoint? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (intersection const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(cons?[T])" more_list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (prod_commutes formula-decl nil traces nil)
    (every_prod formula-decl nil traces nil)
    (prod_add formula-decl nil traces nil)
    (every_append formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (process_add formula-decl nil process_rules nil)
    (T formal-type-decl nil uniform_props nil)
    (add_induction formula-decl nil more_list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (Par const-decl "process" processes nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace type-eq-decl nil traces nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (\|> const-decl "bool" satisfaction nil))
   shostak)))

