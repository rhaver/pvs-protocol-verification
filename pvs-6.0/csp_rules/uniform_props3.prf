(uniform_props3
 (uniform2_par23 0
  (uniform2_par23-1 nil 3662229312
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp*)
      (("" (expand "|>")
        (("" (assert)
          (("" (induct "x" :name "add_induction[T]")
            (("1" (flatten)
              (("1" (expand "every" 1) (("1" (propax) nil nil)) nil))
              nil)
             ("2"
              (case "(intersection(B!1) = emptyset[T]) = NOT (EXISTS e : FORALL i : B!1(i)(e))")
              (("1" (assert)
                (("1" (skosimp)
                  (("1" (inst? 1)
                    (("1" (skolem!)
                      (("1" (delete -4)
                        (("1" (forward-chain "process_add")
                          (("1" (assert)
                            (("1" (delete -1)
                              (("1"
                                (expand "add" 2)
                                (("1"
                                  (rewrite "every_append")
                                  (("1"
                                    (expand "every" 2)
                                    (("1"
                                      (expand "every" 2)
                                      (("1"
                                        (expand "Par" -2)
                                        (("1"
                                          (skolem!)
                                          (("1"
                                            (rewrite "multiprod_add")
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (skosimp)
                                                  (("1"
                                                    (typepred
                                                     "t!1(i!1)")
                                                    (("1"
                                                      (replace -3 -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (delete -3)
                                                          (("1"
                                                            (inst? -6)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "add"
                                                                 -6)
                                                                (("1"
                                                                  (rewrite
                                                                   "every_append")
                                                                  (("1"
                                                                    (forward-chain
                                                                     "every_multiprod")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (use
                                                                         "every_implies[T]")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "B!1(i!1)")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "every"
                                                                                 -8
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "every"
                                                                                   -8
                                                                                   1)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "every_append")
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "every"
                                                                                         -9)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (skosimp)
                                                  (("2"
                                                    (typepred
                                                     "t!1(i!2)")
                                                    (("2"
                                                      (replace -2 -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (delete -2)
                                                          (("2"
                                                            (inst? -5)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "add"
                                                                 -5)
                                                                (("2"
                                                                  (rewrite
                                                                   "every_append")
                                                                  (("2"
                                                                    (forward-chain
                                                                     "every_multiprod")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (use
                                                                         "every_implies[T]")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "B!1(i!2)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "every"
                                                                                 -7
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "every"
                                                                                   -7
                                                                                   1)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -6
                                                                                     "i!2")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "every_append")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "every"
                                                                                               -7)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (delete -)
                (("2" (delete 2)
                  (("2" (grind)
                    (("2" (decompose-equality)
                      (("2" (inst?)
                        (("2" (expand "intersection")
                          (("2" (expand "emptyset")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (complement const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (intersection const-decl "set[T]" parametric_sets nil)
    (emptyset const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (process_add formula-decl nil process_rules nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (every_append formula-decl nil list_props nil)
    (every_implies formula-decl nil more_list_props nil)
    (every_multiprod formula-decl nil multiprod nil)
    (multiprod_add formula-decl nil multiprod nil)
    (add const-decl "(cons?[T])" more_list_props nil)
    (T formal-type-decl nil uniform_props3 nil)
    (add_induction formula-decl nil more_list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Par const-decl "process[T]" multipar nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (U formal-nonempty-type-decl nil uniform_props3 nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace type-eq-decl nil traces nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (uniform2_par56 0
  (uniform2_par56-1 nil 3662229312
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp*)
      (("" (expand "|>")
        (("" (assert)
          (("" (induct "x" :name "add_induction[T]")
            (("1" (flatten)
              (("1" (expand "every" 1) (("1" (propax) nil nil)) nil))
              nil)
             ("2"
              (case "(intersection(B!1) = emptyset[T]) = NOT (EXISTS e : FORALL i : B!1(i)(e))")
              (("1" (assert)
                (("1" (delete -2)
                  (("1" (skosimp)
                    (("1" (inst? 1)
                      (("1" (skolem!)
                        (("1" (forward-chain "process_add")
                          (("1" (assert)
                            (("1" (delete -1)
                              (("1"
                                (expand "add" 2)
                                (("1"
                                  (rewrite "every_append")
                                  (("1"
                                    (expand "add" -3)
                                    (("1"
                                      (rewrite "every_append")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "every" 2)
                                            (("1"
                                              (expand "every" 2)
                                              (("1"
                                                (expand "Par" -2)
                                                (("1"
                                                  (skolem!)
                                                  (("1"
                                                    (rewrite
                                                     "multiprod_add")
                                                    (("1"
                                                      (split)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (skosimp)
                                                          (("1"
                                                            (typepred
                                                             "t!1(i!1)")
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (delete
                                                                   -3)
                                                                  (("1"
                                                                    (inst?
                                                                     -8)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "add"
                                                                         -8)
                                                                        (("1"
                                                                          (rewrite
                                                                           "every_append")
                                                                          (("1"
                                                                            (case
                                                                             "every(LAMBDA e: p1!1(e) AND (B!1(i!1)(e) => p2!1(e)))(t1!1(i!1)) = (every(p1!1)(t1!1(i!1)) AND every(LAMBDA e : B!1(i!1)(e) => p2!1(e))(t1!1(i!1)))")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (delete
                                                                                 -1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "every_multiprod[U, T]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "A!1"
                                                                                     "p1!1"
                                                                                     "t1!1"
                                                                                     "l!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (delete
                                                                                             -1)
                                                                                            (("1"
                                                                                              (forward-chain
                                                                                               "every_multiprod")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (use
                                                                                                   "every_implies[T]")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "B!1(i!1)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "every"
                                                                                                             -9
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "every"
                                                                                                               -7)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "every"
                                                                                                                 -7)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "every"
                                                                                                                     -9
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "every_append")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "every"
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (delete
                                                                               -)
                                                                              (("2"
                                                                                (delete
                                                                                 2
                                                                                 3)
                                                                                (("2"
                                                                                  (generalize
                                                                                   "t1!1(i!1)"
                                                                                   "t")
                                                                                  (("2"
                                                                                    (induct-and-simplify
                                                                                     "t")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (skosimp)
                                                          (("2"
                                                            (inst
                                                             -6
                                                             "i!2")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "t!1(i!2)")
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (delete
                                                                         -2)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "add"
                                                                               -6)
                                                                              (("2"
                                                                                (rewrite
                                                                                 "every_append")
                                                                                (("2"
                                                                                  (case
                                                                                   "every(LAMBDA e: p1!1(e) AND (B!1(i!2)(e) => p2!1(e)))(t1!1(i!2)) = (every(p1!1)(t1!1(i!2)) AND every(LAMBDA e : B!1(i!2)(e) => p2!1(e))(t1!1(i!2)))")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (delete
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "every_multiprod[U, T]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "A!1"
                                                                                           "p1!1"
                                                                                           "t1!1"
                                                                                           "l!1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (forward-chain
                                                                                                     "every_multiprod")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (use
                                                                                                         "every_implies[T]")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "B!1(i!2)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "every"
                                                                                                                 -8
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "every"
                                                                                                                   -8
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "every"
                                                                                                                     -7)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "every"
                                                                                                                       -7)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "every_append")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "every"
                                                                                                                               -9)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (delete
                                                                                     -)
                                                                                    (("2"
                                                                                      (delete
                                                                                       2
                                                                                       3
                                                                                       4
                                                                                       5)
                                                                                      (("2"
                                                                                        (generalize
                                                                                         "t1!1(i!2)"
                                                                                         "t")
                                                                                        (("2"
                                                                                          (induct-and-simplify
                                                                                           "t")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (delete -)
                (("2" (delete 2)
                  (("2" (grind)
                    (("2" (decompose-equality)
                      (("2" (inst?)
                        (("2" (expand "emptyset")
                          (("2" (expand "intersection")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (complement const-decl "set" sets nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (intersection const-decl "set[T]" parametric_sets nil)
    (emptyset const-decl "set" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (process_add formula-decl nil process_rules nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (every_append formula-decl nil list_props nil)
    (list_induction formula-decl nil list_adt nil)
    (every_multiprod formula-decl nil multiprod nil)
    (every_implies formula-decl nil more_list_props nil)
    (multiprod_add formula-decl nil multiprod nil)
    (add const-decl "(cons?[T])" more_list_props nil)
    (T formal-type-decl nil uniform_props3 nil)
    (add_induction formula-decl nil more_list_props nil)
    (pred type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Par const-decl "process[T]" multipar nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (U formal-nonempty-type-decl nil uniform_props3 nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace type-eq-decl nil traces nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (uniform2_interleave 0
  (uniform2_interleave-1 nil 3662229312
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (split)
        (("1" (ground)
          (("1" (use "sat_free_par3[U, T]")
            (("1" (skolem!)
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "Interleave")
            (("2" (rewrite "uniform2_par23")
              (("2" (delete 2)
                (("2" (inst 1 "lambda i : emptyset[T]")
                  (("2" (split)
                    (("1" (skosimp)
                      (("1" (skolem!)
                        (("1" (expand "emptyset")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "intersection")
                      (("2" (apply-extensionality :hide? t) nil nil))
                      nil)
                     ("3" (skolem!)
                      (("3" (assert)
                        (("3" (grind)
                          (("3" (delete -2)
                            (("3" (eta "pred[T]")
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((uniform2_par23 formula-decl nil uniform_props3 nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (\|> const-decl "bool" satisfaction nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (intersection const-decl "set[T]" parametric_sets nil)
    (Interleave const-decl "process[T]" multipar nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (T formal-type-decl nil uniform_props3 nil)
    (U formal-nonempty-type-decl nil uniform_props3 nil)
    (sat_free_par3 formula-decl nil satisfaction3 nil))
   nil))
 (uniform2_interleave2 0
  (uniform2_interleave2-1 nil 3662229312
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (split)
        (("1" (ground)
          (("1" (use "sat_free_par3[U, T]") (("1" (assert) nil nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "Interleave")
            (("2" (rewrite "uniform2_par56")
              (("2" (delete 2)
                (("2" (inst 1 "lambda i : emptyset[T]")
                  (("2" (split)
                    (("1" (skosimp*)
                      (("1" (expand "emptyset")
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (delete -)
                      (("2" (expand "intersection")
                        (("2" (apply-extensionality :hide? t) nil nil))
                        nil))
                      nil)
                     ("3" (skolem!)
                      (("3" (grind)
                        (("1" (delete -2)
                          (("1" (eta "pred[T]")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete 1)
                          (("2" (eta "pred[T]")
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((uniform2_par56 formula-decl nil uniform_props3 nil)
    (emptyset const-decl "set" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (complement const-decl "set" sets nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (\|> const-decl "bool" satisfaction nil)
    (intersection const-decl "set[T]" parametric_sets nil)
    (Interleave const-decl "process[T]" multipar nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (T formal-type-decl nil uniform_props3 nil)
    (U formal-nonempty-type-decl nil uniform_props3 nil)
    (sat_free_par3 formula-decl nil satisfaction3 nil))
   nil)))

