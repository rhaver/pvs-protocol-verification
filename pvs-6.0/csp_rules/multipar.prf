(multipar
 (Par_TCC1 0
  (Par_TCC1-1 nil 3662229311
   ("" (skolem!)
    (("" (ground)
      (("1" (inst + "lambda i : null")
        (("1" (expand "prod") (("1" (propax) nil nil)) nil)
         ("2" (reduce) nil nil))
        nil)
       ("2" (auto-rewrite "prefix_closed")
        (("2" (assert)
          (("2" (skosimp*)
            (("2" (forward-chain "prefix_multiprod")
              (("2" (skosimp)
                (("2" (inst?)
                  (("2" (skolem!)
                    (("2" (inst?)
                      (("2" (typepred "P!1(x1!1)")
                        (("2" (assert)
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod def-decl "bool" multiprod nil)
    (U formal-nonempty-type-decl nil multipar nil)
    (T formal-type-decl nil multipar nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (P!1 skolem-const-decl "[U -> process[T]]" multipar nil)
    (prefix_multiprod formula-decl nil multiprod nil)
    (set type-eq-decl nil sets nil)
    (t1!2 skolem-const-decl "[U -> trace[T]]" multipar nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (sigma_par2 0
  (sigma_par2-1 nil 3662229311
   ("" (expand "Par")
    (("" (expand "sigma")
      ((""
        (grind :defs nil :theories ("sets[T]" "sets[trace[T]]")
         :if-match nil)
        (("" (forward-chain "sigma_multiprod")
          (("" (replace -1)
            (("" (expand "union")
              (("" (skolem!)
                (("" (inst + "i!1") (("" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sigma const-decl "setof[T]" processes nil)
    (sigma_multiprod formula-decl nil multiprod nil)
    (union const-decl "set[T]" parametric_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (U formal-nonempty-type-decl nil multipar nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil)
    (prod def-decl "bool" multiprod nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (T formal-type-decl nil multipar nil)
    (Par const-decl "process[T]" multipar nil))
   nil))
 (sigma_free_par2 0
  (sigma_free_par2-1 nil 3662229311
   ("" (expand "Interleave")
    (("" (skolem!)
      (("" (apply-extensionality :hide? t)
        (("" (iff)
          (("" (ground)
            (("1" (use "sigma_par2")
              (("1" (expand "subset?")
                (("1" (expand "member")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (expand "union")
              (("2" (expand "Par")
                (("2" (expand "sigma")
                  (("2" (skosimp* :preds? t)
                    (("2" (inst?)
                      (("2"
                        (inst +
                         "lambda i : IF i = i!1 THEN t!1 ELSE null[T] ENDIF")
                        (("1"
                          (lemma "free_multiprod"
                           ("j" "i!1" "u" "t!1"))
                          (("1"
                            (case-replace
                             "(LAMBDA i: IF i = i!1 THEN t!1 ELSE null[T] ENDIF) = ((LAMBDA i: null[T]) WITH [(i!1) := t!1])")
                            (("1" (delete -1 -3 2)
                              (("1"
                                (apply-extensionality :hide? t)
                                (("1" (smash) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skosimp) (("2" (assert) nil nil)) nil)
                         ("3" (skosimp) (("3" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod def-decl "bool" multiprod nil)
    (P!1 skolem-const-decl "[U -> process[T]]" multipar nil)
    (i!1 skolem-const-decl "U" multipar nil)
    (t!1 skolem-const-decl "(P!1(i!1))" multipar nil)
    (free_multiprod formula-decl nil multiprod nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sigma_par2 formula-decl nil multipar nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (sigma const-decl "setof[T]" processes nil)
    (set type-eq-decl nil sets nil)
    (U formal-nonempty-type-decl nil multipar nil)
    (Par const-decl "process[T]" multipar nil)
    (emptyset const-decl "set" sets nil)
    (union const-decl "set[T]" parametric_sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil multipar nil)
    (Interleave const-decl "process[T]" multipar nil))
   nil))
 (par_full2 0
  (par_full2-1 nil 3662229311
   ("" (auto-rewrite "Par" "intersection")
    (("" (skolem!)
      (("" (apply-extensionality :hide? t)
        (("" (iff)
          (("" (ground)
            (("1" (skolem!)
              (("1" (rewrite "multiprod_fullset")
                (("1" (skolem!)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil)
             ("2" (inst + "lambda i : x!1")
              (("2" (rewrite "multiprod_fullset") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((P!1 skolem-const-decl "[U -> process[T]]" multipar nil)
    (x!1 skolem-const-decl "trace[T]" multipar nil)
    (multiprod_fullset formula-decl nil multiprod nil)
    (set type-eq-decl nil sets nil)
    (U formal-nonempty-type-decl nil multipar nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (Par const-decl "process[T]" multipar nil)
    (fullset const-decl "set" sets nil)
    (intersection const-decl "set[T]" parametric_sets nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil multipar nil))
   nil))
 (interleave_subset3 0
  (interleave_subset3-1 nil 3662229311
   ("" (grind :exclude ("prod"))
    (("" (use "free_multiprod[U, T]")
      (("" (inst + "lambda i : IF i = i!1 THEN x!1 ELSE null[T] ENDIF")
        (("1"
          (case-replace
           "(LAMBDA i: IF i = i!1 THEN x!1 ELSE null[T] ENDIF) = (LAMBDA i: null[T]) WITH [(i!1) := x!1]")
          (("1" (delete -1 2)
            (("1" (apply-extensionality :hide? t)
              (("1" (reduce) nil nil)) nil))
            nil))
          nil)
         ("2" (skosimp) (("2" (assert) nil nil)) nil)
         ("3" (skosimp) (("3" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil multipar nil)
    (U formal-nonempty-type-decl nil multipar nil)
    (free_multiprod formula-decl nil multiprod nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (i!1 skolem-const-decl "U" multipar nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (P!1 skolem-const-decl "[U -> process[T]]" multipar nil)
    (x!1 skolem-const-decl "trace[T]" multipar nil)
    (subset? const-decl "bool" sets nil)
    (Par const-decl "process[T]" multipar nil)
    (member const-decl "bool" sets nil)
    (Interleave const-decl "process[T]" multipar nil))
   nil))
 (interleave_disjoint 0
  (interleave_disjoint-1 nil 3662229311
   ("" (skosimp)
    ((""
      (grind :exclude ("proj" "sigma" "disjoint?") :rewrites
       ("disj_alphabet[U, T]" "sub_alphabet[U, T]") :if-match nil)
      (("" (use "inter_disjoint[U, T]")
        (("" (ground)
          (("1" (inst? -1)
            (("1" (replace -1 1 :dir rl)
              (("1" (delete -) (("1" (reduce) nil nil)) nil)) nil))
            nil)
           ("2" (skolem!)
            (("2" (skolem!)
              (("2" (use "sigma_subset" ("P" "P!1(i!2)"))
                (("2" (expand "subset?")
                  (("2" (expand "member")
                    (("2" (inst? -2)
                      (("2" (inst? -1)
                        (("2" (delete -3 -4 2) (("2" (reduce) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Interleave const-decl "process[T]" multipar nil)
    (Par const-decl "process[T]" multipar nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (/= const-decl "boolean" notequal nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (disj_alphabet const-decl "bool" multiprod nil)
    (sub_alphabet const-decl "bool" multiprod nil)
    (sigma_subset formula-decl nil process_rules nil)
    (set type-eq-decl nil sets nil) (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (inter_disjoint formula-decl nil multiprod nil)
    (U formal-nonempty-type-decl nil multipar nil)
    (T formal-type-decl nil multipar nil))
   nil))
 (par_disjoint 0
  (par_disjoint-1 nil 3662229311
   ("" (skosimp)
    (("" (expand "subset?")
      (("" (expand "member")
        (("" (skosimp)
          (("" (skolem!)
            (("" (expand "Par")
              (("" (skolem!)
                (("" (use "prod_disjoint[U, T]")
                  (("" (ground)
                    (("1" (inst? -1)
                      (("1" (replace -1 1 :dir rl)
                        (("1" (delete -) (("1" (grind) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "sub_alphabet")
                      (("2" (skolem!)
                        (("2" (use "sigma_subset" ("P" "P!1(i!2)"))
                          (("2" (expand "subset?")
                            (("2" (skolem!)
                              (("2"
                                (expand "member")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst? -1)
                                    (("2"
                                      (inst? -3)
                                      (("2"
                                        (delete -4 -5)
                                        (("2" (reduce) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subset? const-decl "bool" sets nil)
    (Par const-decl "process[T]" multipar nil)
    (prod_disjoint formula-decl nil multiprod nil)
    (U formal-nonempty-type-decl nil multipar nil)
    (T formal-type-decl nil multipar nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (sub_alphabet const-decl "bool" multiprod nil)
    (sigma_subset formula-decl nil process_rules nil)
    (member const-decl "bool" sets nil))
   nil)))

