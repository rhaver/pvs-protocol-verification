("traces" traces prod_proj1 0 (prod_proj1-1 nil 3417191621 3417191692 ("" (induct "t") (("1" (skosimp) (("1" (expand "prod" -2) (("1" (flatten) (("1" (case "disjoint?(sigma(t1!1), A!1) AND disjoint?(sigma(t2!1), A!1)") (("1" (flatten) (("1" (delete -4 -5) (("1" (lemma "interleave_prod") (("1" (inst?) (("1" (inst -1 "t2!1") (("1" (assert) (("1" (skolem!) (("1" (inst?) (("1" (split) (("1" (propax) nil nil) ("2" (use "null_proj_equiv") (("2" (assert) (("2" (delete 2) (("2" (forward-chain "sigma_prod") (("2" (replace -1) (("2" (delete -1 -2) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (split) (("1" (use "null_proj_equiv") (("1" (assert) (("1" (delete -3 -4) (("1" (grind :if-match nil :exclude "sigma") (("1" (inst?) (("1" (split) (("1" (propax) nil nil) ("2" (inst?) (("2" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete -2) (("2" (use "null_proj_equiv") (("2" (assert) (("2" (delete -3) (("2" (grind :if-match nil :exclude "sigma") (("2" (inst?) (("2" (split) (("1" (propax) nil nil) ("2" (inst?) (("2" (split) (("1" (propax) nil nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (skosimp*) (("2" (inst? -1) (("2" (expand "prod" -3) (("2" (ground) (("1" (postpone) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 632 360 nil nil))("traces" traces add_proj 0 (add_proj-1 nil 3417191621 3417191672 ("" (skosimp) (("" (use "prefix_add1[T]") (("" (replace -2 -1) (("" (forward-chain "prefix_of_proj[T]") (("" (skosimp) (("" (replace -2 -4) (("" (inst 1 "proj(t2!1, A!1)") (("" (rewrite "proj_twice") (("" (case "intersection(A!1, A!1) = A!1") (("1" (replace -1) (("1" (assert) (("1" (postpone) nil nil)) nil)) nil) ("2" (delete -1 -2 -3 -4 2) (("2" (apply-extensionality :hide? t) (("2" (grind) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 216 80 nil nil))("process_rules" process_rules hide_par2 0 (hide_par2-1 nil 3662229309 ("" (skosimp) (("" (lemma "hide_sigma") (("" (inst -1 "B!1" "P1!1") (("" (assert) (("" (replace -1 1 rl) (("" (lemma "hide_par") (("" (inst -1 "A!1" "B!1" "P1!1" "P2!1") (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil))("process_rules" process_rules hide_par 0 (hide_par-1 nil 3662229309 ("" (auto-rewrite-theory "sets") (("" (skosimp) (("" (apply-extensionality :hide? t) (("" (iff) (("" (ground) (("1" (expand "Par" -1) (("1" (skolem-typepred) (("1" (expand "/" -1) (("1" (skolem-typepred) (("1" (expand "/" -3) (("1" (skolem-typepred) (("1" (replace -3) (("1" (replace -4) (("1" (delete -3 -4) (("1" (use "prod_proj1[T]") (("1" (assert) (("1" (split) (("1" (skosimp) (("1" (expand "/" 1) (("1" (inst?) (("1" (expand "Par" 1) (("1" (inst?) nil nil)) nil)) nil)) nil)) nil) ("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "/" -1) (("2" (skolem-typepred) (("2" (expand "Par" -1) (("2" (skolem-typepred) (("2" (forward-chain "prod_proj2") (("2" (inst?) (("2" (replace -5 :dir rl) (("2" (expand "Par" 1) (("2" (inst?) (("1" (expand "/") (("1" (inst 1 "t2!1") nil nil)) nil) ("2" (expand "/") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil))("process_rules" process_rules hide_inter 0 (hide_inter-1 nil 3662229309 ("" (auto-rewrite-theory "sets[T]") (("" (skolem!) (("" (apply-extensionality :hide? t) (("" (iff) (("" (ground) (("1" (expand "//" -1) (("1" (expand "/" -1) (("1" (skolem-typepred) (("1" (expand "Par") (("1" (skolem-typepred) (("1" (expand "//") (("1" (expand "/") (("1" (expand "Par") (("1" (inst 1 "proj(t1!2, complement(A!1))" "proj(t2!1, complement(A!1))") (("1" (replace -4) (("1" (delete -1 -2 -4) (("1" (generalize "t1!1" "t") (("1" (case "forall (t, t1, t2 : trace[T]) : prod(emptyset)(t1, t2, t) IMPLIES
                                 prod(emptyset)
                                     (proj(t1, complement(A!1)), proj(t2, complement(A!1)),
                                      proj(t, complement(A!1)))") (("1" (skosimp) (("1" (inst?) (("1" (assert) nil nil)) nil)) nil) ("2" (delete 2) (("2" (induct "t") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "prod" -2) (("2" (assert) (("2" (split -2) (("1" (flatten) (("1" (inst?) (("1" (assert) (("1" (rewrite "proj_cons") (("1" (lift-if) (("1" (split) (("1" (flatten) (("1" (expand "prod" 2) (("1" (assert) (("1" (flatten) (("1" (delete 3) (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (lemma "list_cons_eta[T]") (("3" (inst -1 "t1!3") (("3" (replace -1 1 rl) (("3" (replace -3) (("3" (rewrite "proj_cons") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lemma "list_cons_eta[T]") (("2" (inst -1 "t1!3") (("2" (replace -1 1 rl) (("2" (replace -4 1) (("2" (rewrite "proj_cons") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst?) (("2" (assert) (("2" (rewrite "proj_cons") (("2" (lift-if) (("2" (split) (("1" (flatten) (("1" (expand "prod" 2) (("1" (assert) (("1" (flatten) (("1" (delete 2) (("1" (split) (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (lemma "list_cons_eta[T]") (("3" (inst -1 "t2!2") (("3" (replace -1 1 rl) (("3" (replace -3) (("3" (rewrite "proj_cons") (("3" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (lemma "list_cons_eta[T]") (("2" (inst -1 "t2!2") (("2" (replace -1 1 rl) (("2" (replace -4) (("2" (rewrite "proj_cons") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 1 "t2!1") nil nil) ("3" (inst 1 "t1!2") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "//" -1) (("2" (expand "/" -1) (("2" (expand "Par") (("2" (skolem-typepred) (("2" (skolem-typepred) (("2" (skolem-typepred) (("2" (replace -3) (("2" (replace -4) (("2" (delete -3 -4) (("2" (case "forall (t, t1, t2 : trace[T]) : (P2!1(t2) AND P1!1(t1) AND prod(emptyset)(proj(t1, complement(A!1)), proj(t2, complement(A!1)), t)) IMPLIES ((P1!1 // P2!1) / A!1)(t)") (("1" (inst?) (("1" (assert) nil nil)) nil) ("2" (delete -1 -2 -3 2) (("2" (induct "t" :name "add_induction[T]") (("1" (skosimp) (("1" (typepred "((P1!1 // P2!1) / A!1)") (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp*) (("2" (rewrite "prod_add") (("2" (split) (("1" (skosimp) (("1" (postpone) nil nil)) nil) ("2" (skosimp) (("2" (expand "//") (("2" (expand "Par") (("2" (expand "/") (("2" (inst -3 "t1!4" "t2!2") (("2" (assert) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil))("parametric_choice" parametric_choice rename_choice3_TCC2 0 (rename_choice3_TCC2-1 nil 3662229311 ("" (subtype-tcc) nil nil) nil nil))("parametric_choice" parametric_choice rename_choice3_TCC1 0 (rename_choice3_TCC1-1 nil 3662229311 ("" (auto-rewrite-theory "sets") (("" (skosimp) (("" (assert) (("" (skosimp) (("" (rewrite "sigma_choice3") (("" (expand "union") (("" (skolem!) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil nil))("csp_run" csp_run run_inter 0 (run_inter-1 nil 3286261312 nil ("" (auto-rewrite-theory "sets") (("" (skolem!) (("" (apply-extensionality :hide? t) (("" (iff) (("" (split) (("1" (flatten) (("1" (generalize "P!1" "P") (("1" (generalize "x!1" "x") (("1" (induct "x") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "//" -2) (("2" (expand "Par") (("2" (skolem-typepred) (("2" (expand "prod" -4) (("2" (assert) (("2" (split) (("1" (flatten) (("1" (inst -6 "{ t : trace[T] | prefix(t, cdr(t1!1)) }") (("1" (split) (("1" (expand "//" -1) (("1" (expand "Par") (("1" (skolem-typepred) (("1" (expand "/" -1) (("1" (skolem-typepred) (("1" (expand "/") (("1" (expand "//") (("1" (expand "Par") (("1" (case "A!1(cons1_var!1)") (("1" (inst 1 "t1!2" "cons(cons1_var!1, t2!2)") (("1" (expand "prod" 1) (("1" (assert) nil nil)) nil) ("2" (rewrite "run_def2") (("2" (expand "Choice" 1) (("2" (rewrite "run_def2" :dir rl) (("2" (inst?) (("2" (expand ">>") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil) ("3" (inst 1 "cons(cons1_var!1, t1!3)") (("1" (rewrite "proj_cons") (("1" (assert) nil nil)) nil) ("2" (case "prefix(cons[T](cons1_var!1, t1!3), t1!1)") (("1" (typepred "P!2") (("1" (delete -1) (("1" (expand "prefix_closed") (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (lemma "list_cons_eta[T]") (("2" (inst -1 "t1!1") (("2" (replace -1 1 rl) (("2" (replace -8) (("2" (rewrite "prefix_equiv") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst 2 "cons(cons1_var!1, t1!2)" "t2!2") (("1" (expand "prod" 2) (("1" (assert) nil nil)) nil) ("2" (inst 1 "cons(cons1_var!1, t1!3)") (("1" (rewrite "proj_cons") (("1" (assert) nil nil)) nil) ("2" (typepred "P!2") (("2" (delete -1) (("2" (expand "prefix_closed") (("2" (inst -1 "cons(cons1_var!1, t1!3)" "cons(cons1_var!1, cdr(t1!1))") (("2" (assert) (("2" (split) (("1" (rewrite "prefix_equiv") nil nil) ("2" (lemma "list_cons_eta[T]") (("2" (inst -1 "t1!1") (("2" (replace -1 -9 rl) (("2" (replace -7) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (delete 2) (("2" (expand "//") (("2" (expand "Par") (("2" (inst?) (("2" (lemma "prefix_reflexive[T]") (("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split) (("1" (expand "prefix") (("1" (inst 1 "cdr(t1!1)") (("1" (expand "append") (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (expand "prefix_closed") (("2" (skosimp) (("2" (lemma "prefix_transitive[T]") (("2" (inst -1 "t1!2" "t2!2" "cdr(t1!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst?) (("2" (split) (("1" (expand "//") (("1" (expand "Par") (("1" (skolem-typepred) (("1" (inst 1 "t1!2" "cons(cons1_var!1, t2!2)") (("1" (expand "prod" 1) (("1" (assert) nil nil)) nil) ("2" (rewrite "run_def2") (("2" (expand "Choice" 1) (("2" (rewrite "run_def2" :dir rl) (("2" (inst 1 "cons1_var!1") (("1" (expand ">>") (("1" (inst?) nil nil)) nil) ("2" (lemma "list_cons_eta[T]") (("2" (inst -1 "t2!1") (("2" (replace -1 -9 rl) (("2" (replace -6) (("2" (rewrite "run_def2") (("2" (expand "Choice" -9) (("2" (skolem-typepred) (("2" (expand ">>") (("2" (skolem!) (("2" (decompose-equality -10) (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "//" 1) (("2" (expand "Par") (("2" (inst 1 "t1!1" "cdr(t2!1)") (("2" (lemma "list_cons_eta[T]") (("2" (inst -1 "t2!1") (("2" (replace -1 -6 rl) (("2" (rewrite "run_def2") (("2" (expand "Choice" -6) (("2" (rewrite "run_def2" :dir rl) (("2" (skolem!) (("2" (expand ">>") (("2" (skolem-typepred) (("2" (decompose-equality -7) (("2" (replace -2) (("2" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (generalize "P!1" "P") (("2" (generalize "x!1" "x") (("2" (induct "x") (("1" (grind) nil nil) ("2" (skosimp*) (("2" (expand "//" -2) (("2" (expand "Par") (("2" (skolem-typepred) (("2" (expand "prod" -4) (("2" (assert) (("2" (split) (("1" (flatten) (("1" (inst -6 "{ t : trace[T] | prefix(t, cdr(t1!1)) }") (("1" (split) (("1" (expand "//" -1) (("1" (expand "Par") (("1" (skolem-typepred) (("1" (expand "//") (("1" (expand "Par") (("1" (expand "/") (("1" (skolem-typepred) (("1" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "/") (("2" (skolem-typepred) (("2" (expand "//") (("2" (expand "Par" 1) (("2" (inst 1 "cdr(t1!1)" "t2!1") (("2" (inst 1 "cdr(t1!1)") (("1" (postpone) nil nil) ("2" (lemma "prefix_reflexive[T]") (("2" (inst -1 "cdr(t1!1)") nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (split) (("1" (lemma "null_prefix[T]") (("1" (inst?) nil nil)) nil) ("2" (expand "prefix_closed") (("2" (skosimp) (("2" (lemma "prefix_transitive[T]") (("2" (inst -1 "t1!2" "t2!2" "cdr(t1!1)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (flatten) (("2" (inst?) (("2" (split) (("1" (expand "//") (("1" (expand "Par") (("1" (skolem-typepred) (("1" (inst 1 "t1!2" "cons(cons1_var!1, t2!2)") (("1" (expand "prod" 1) (("1" (assert) nil nil)) nil) ("2" (rewrite "run_def2") (("2" (expand "Choice" 1) (("2" (rewrite "run_def2" :dir rl) (("2" (inst 1 "cons1_var!1") (("1" (expand ">>") (("1" (inst?) nil nil)) nil) ("2" (lemma "list_cons_eta[T]") (("2" (inst -1 "t2!1") (("2" (replace -1 -9 rl) (("2" (replace -6) (("2" (rewrite "run_def2") (("2" (expand "Choice" -9) (("2" (skolem-typepred) (("2" (expand ">>") (("2" (skolem!) (("2" (case "cons1_var!1 = i!1") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (lemma "list_car_cons[T]") (("2" (inst -1 "i!1" "t1!3") (("2" (replace -11 -1 rl) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (expand "//" 1) (("2" (expand "/") (("2" (skolem-typepred) (("2" (expand "Par") (("2" (inst 1 "t1!1" "cdr(t2!1)") (("1" (lemma "list_cons_eta[T]") (("1" (inst -1 "t2!1") (("1" (replace -1 -7 rl) (("1" (rewrite "run_def2") (("1" (expand "Choice" -7) (("1" (rewrite "run_def2" :dir rl) (("1" (skolem!) (("1" (expand ">>") (("1" (skolem-typepred) (("1" (case "cdr(t2!1) = t1!3") (("1" (replace -1) (("1" (propax) nil nil)) nil) ("2" (lemma "list_cdr_cons[T]") (("2" (inst -1 "i!1" "t1!3") (("2" (replace -9 -1 rl) (("2" (assert) nil nil)) nil)) nil)) nil) ("3" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (inst?) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil nil nil nil nil))("uniform_props" uniform_props uni_test 0 (uni_test-1 nil 3347116443 3347209831 ("" (auto-rewrite-theory "sets") (("" (skosimp*) (("" (expand "|>") (("" (assert) (("" (induct "x" :name "add_induction[T]") (("1" (flatten) (("1" (expand "every" 1) (("1" (propax) nil nil)) nil)) nil) ("2" (skosimp) (("2" (forward-chain "process_add") (("2" (assert) (("2" (delete -1) (("2" (expand "add" 1) (("2" (rewrite "every_append") (("2" (expand "every" 1) (("2" (expand "every" 1) (("2" (expand "Par" -2) (("2" (skolem-typepred) (("2" (rewrite "prod_add") (("2" (split) (("1" (flatten) (("1" (skosimp) (("1" (replace -2) (("1" (replace -3) (("1" (delete -2 -3) (("1" (inst -9 "add(u1!1, a!1)") (("1" (assert) (("1" (inst -10 "add(u2!1, a!1)") (("1" (assert) (("1" (delete -3 -4) (("1" (split 1) (("1" (expand "add") (("1" (rewrite "every_append") (("1" (expand "every" -7 2) (("1" (expand "every" -7 2) (("1" (flatten) (("1" (inst? -7) (("1" (assert) (("1" (rewrite "every_append") (("1" (rewrite "every_append") (("1" (expand "every" -7 2) (("1" (expand "every" -7 2) (("1" (split -7) (("1" (rewrite "every_append") (("1" (flatten) (("1" (expand "every" -2) (("1" (propax) nil nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil) ("3" (expand "add") (("3" (rewrite "every_append") (("3" (expand "every" -7 2) (("3" (expand "every" -7 2) (("3" (rewrite "every_append") (("3" (expand "every" -7 3) (("3" (expand "every" -7 3) (("3" (rewrite "every_append") (("3" (expand "every" -7 4) (("3" (rewrite "every_append") (("3" (expand "every" -8 2) (("3" (expand "every" -8 2) (("3" (rewrite "every_append") (("3" (rewrite "every_append") (("3" (expand "every" -8 3) (("3" (expand "every" -8 3) (("3" (expand "every" -8 4) (("3" (expand "every" -7 4) (("3" (expand "every" -8 4) (("3" (split -7) (("1" (flatten) nil nil) ("2" (postpone) nil nil) ("3" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) unfinished nil 799748 33480 t shostak))("uniform_props3" uniform_props3 uniform2_interleave_TCC1 0 (uniform2_interleave_TCC1-1 nil 3662229312 ("" (existence-tcc) nil nil) nil nil))("uniform_props3" uniform_props3 uniform2_par56_TCC1 0 (uniform2_par56_TCC1-1 nil 3662229312 ("" (existence-tcc) nil nil) nil nil))("uniform_props3" uniform_props3 uniform2_par23_TCC1 0 (uniform2_par23_TCC1-1 nil 3662229312 ("" (existence-tcc) nil nil) nil nil))("satisfaction4" satisfaction4 sat_if_lift2 0 (sat_if_lift2-1 nil 3662392798 ("" (skolem!) (("" (lift-if) (("" (prop) nil nil)) nil)) nil) nil shostak))("satisfaction4" satisfaction4 sat_if_lift3implies 0 (sat_if_lift3implies-1 nil 3662572470 ("" (skolem!) (("" (lift-if) (("" (prop) nil nil)) nil)) nil) nil shostak))("satisfaction4" satisfaction4 sat_if_lift3_implies 0 (sat_if_lift3_implies-1 nil 3664127140 ("" (skolem!) (("" (lift-if) (("" (prop) nil nil)) nil)) nil) nil shostak))("satisfaction4" satisfaction4 sat_if_lift3 0 (sat_if_lift3-1 nil 3662394981 ("" (skolem!) (("" (lift-if) (("" (prop) nil nil)) nil)) nil) nil shostak))