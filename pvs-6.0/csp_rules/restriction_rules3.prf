(restriction_rules3
 (restriction_par2 0
  (restriction_par2-1 nil 3662229313
   ("" (skolem!)
    (("" (auto-rewrite "restriction_equiv[T]")
      (("" (assert)
        (("" (expand "Par")
          (("" (apply-extensionality :hide? t)
            (("" (iff)
              (("" (ground)
                (("1" (skolem!)
                  (("1" (inst?)
                    (("1" (use "null_proj_multiprod[U, T]")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (skolem!) (("2" (inst?) nil nil)) nil)
                 ("3" (skolem!)
                  (("3" (use "null_proj_multiprod[U, T]")
                    (("3" (assert)
                      (("3" (skolem!) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Par const-decl "process[T]" multipar nil)
    (null_proj_multiprod formula-decl nil multiprod nil)
    (P!1 skolem-const-decl "[U -> process[T]]" restriction_rules3 nil)
    (t!1 skolem-const-decl "[i: U -> (P!1(i))]" restriction_rules3 nil)
    (B!1 skolem-const-decl "set[T]" restriction_rules3 nil)
    (trace type-eq-decl nil traces nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (U formal-nonempty-type-decl nil restriction_rules3 nil)
    (setof type-eq-decl nil defined_types nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil)
    (prod def-decl "bool" multiprod nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (proj const-decl "[trace, set[T] -> trace]" traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil restriction_rules3 nil)
    (restriction_equiv formula-decl nil restriction_rules nil))
   nil))
 (restriction_free_par2 0
  (restriction_free_par2-1 nil 3662229313
   ("" (skolem!)
    (("" (expand "Interleave")
      (("" (rewrite "restriction_par2") nil nil)) nil))
    nil)
   ((Interleave const-decl "process[T]" multipar nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (U formal-nonempty-type-decl nil restriction_rules3 nil)
    (emptyset const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil restriction_rules3 nil)
    (restriction_par2 formula-decl nil restriction_rules3 nil))
   nil)))

