(parametric_choice
 (Choice_TCC1 0
  (Choice_TCC1-1 nil 3662229311
   ("" (grind :if-match nil :exclude ("prefix"))
    (("1" (expand "prefix") (("1" (assert) nil nil)) nil)
     ("2" (inst?)
      (("2" (typepred "P!1(i!1)")
        (("2" (assert) (("2" (inst?) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((U formal-type-decl nil parametric_choice nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil parametric_choice nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (process type-eq-decl nil processes nil)
    (prefix const-decl "bool" traces nil)
    (append def-decl "list[T]" list_props nil)
    (prefix_closed const-decl "bool" processes nil))
   nil))
 (choice_equiv 0
  (choice_equiv-1 nil 3662229311
   ("" (skolem!)
    (("" (expand "Choice")
      (("" (apply-extensionality :hide? t)
        (("" (iff)
          (("" (ground)
            (("1" (delete 1) (("1" (reduce) nil nil)) nil)
             ("2" (delete 1) (("2" (reduce) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Choice const-decl "process" processes nil)
    (Choice const-decl "process[T]" parametric_choice nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (P!1 skolem-const-decl "[U -> process[T]]" parametric_choice nil)
    (i!1 skolem-const-decl "U" parametric_choice nil)
    (trace type-eq-decl nil traces nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (U formal-type-decl nil parametric_choice nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil parametric_choice nil))
   nil))
 (choice_nonempty_param 0
  (choice_nonempty_param-1 nil 3662229311
   ("" (skosimp*)
    (("" (typepred "P!1(i!1)")
      (("" (delete -2)
        (("" (apply-extensionality :hide? t) (("" (grind) nil))))))))
    nil)
   ((process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil parametric_choice nil)
    (U formal-type-decl nil parametric_choice nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (union const-decl "set[T]" parametric_sets nil)
    (set type-eq-decl nil sets nil)
    (Choice const-decl "process[T]" parametric_choice nil))
   nil))
 (choice_empty_param 0
  (choice_empty_param-1 nil 3662229311
   ("" (skosimp)
    (("" (apply-extensionality :hide? t)
      (("" (grind) (("" (inst - "i!1") nil))))))
    nil)
   ((T formal-type-decl nil parametric_choice nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes nil)
    (Choice const-decl "process[T]" parametric_choice nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (U formal-type-decl nil parametric_choice nil))
   nil))
 (sigma_choice3 0
  (sigma_choice3-1 nil 3662229311
   ("" (skolem!)
    (("" (rewrite "choice_equiv")
      (("" (rewrite "sigma_choice2")
        (("" (apply-extensionality :hide? t)
          (("" (expand "union") (("" (reduce) nil))))))))))
    nil)
   ((choice_equiv formula-decl nil parametric_choice nil)
    (U formal-type-decl nil parametric_choice nil)
    (T formal-type-decl nil parametric_choice nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (sigma const-decl "setof[T]" processes nil)
    (union const-decl "set[T]" parametric_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (i!1 skolem-const-decl "U" parametric_choice nil)
    (P!1 skolem-const-decl "[U -> process[T]]" parametric_choice nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (set type-eq-decl nil sets nil)
    (sigma_choice2 formula-decl nil process_rules nil))
   nil))
 (choice_member2 0
  (choice_member2-1 nil 3662229311
   ("" (skolem!)
    (("" (rewrite "choice_nonempty_param")
      (("1" (use "union_is_bound" ("A" "lambda i : P!1(i)")) nil)
       ("2" (inst + "i!1") nil))))
    nil)
   ((choice_nonempty_param formula-decl nil parametric_choice nil)
    (U formal-type-decl nil parametric_choice nil)
    (T formal-type-decl nil parametric_choice nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (set type-eq-decl nil sets nil)
    (union_is_bound formula-decl nil parametric_sets nil))
   nil))
 (hide_choice2 0
  (hide_choice2-1 nil 3662229311
   ("" (skolem!)
    (("" (apply-extensionality :hide? t)
      (("" (iff)
        (("" (ground)
          (("1" (expand "Choice" -1)
            (("1" (expand "/" -1)
              (("1" (skolem-typepred)
                (("1" (split)
                  (("1" (expand "proj")
                    (("1" (expand "filter")
                      (("1" (lift-if)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (replace -2 1)
                              (("1"
                                (delete -)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skolem!)
                    (("2" (replace -2 1)
                      (("2" (expand "Choice")
                        (("2" (flatten)
                          (("2" (inst?)
                            (("2" (expand "/") (("2" (inst?) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "Choice" -1)
            (("2" (skolem!)
              (("2" (expand "/" -1)
                (("2" (skolem-typepred)
                  (("2" (replace -2 1)
                    (("2" (expand "/")
                      (("2" (inst?)
                        (("2" (expand "Choice")
                          (("2" (flatten) (("2" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((T formal-type-decl nil parametric_choice nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (Choice const-decl "process[T]" parametric_choice nil)
    (U formal-type-decl nil parametric_choice nil)
    (/ const-decl "process" processes nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (filter def-decl "list[T]" filters nil)
    (proj const-decl "[trace, set[T] -> trace]" traces nil)
    (t1!1 skolem-const-decl
     "({t | null?(t) OR (EXISTS (i_1: U): P!1(i_1)(t))})"
     parametric_choice nil)
    (i!1 skolem-const-decl "U" parametric_choice nil)
    (P!1 skolem-const-decl "[U -> process[T]]" parametric_choice nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (i!1 skolem-const-decl "U" parametric_choice nil)
    (t1!1 skolem-const-decl "(P!1(i!1))" parametric_choice nil))
   nil))
 (rename_choice3 0
  (rename_choice3-1 nil 3662229311
   ("" (skosimp)
    (("" (apply-extensionality :hide? t)
      (("1" (iff)
        (("1" (split)
          (("1" (flatten)
            (("1" (expand "rename" -1)
              (("1" (skolem-typepred)
                (("1" (expand "Choice")
                  (("1" (split)
                    (("1" (case "t1!1 = null")
                      (("1" (replace -1 -3)
                        (("1" (expand "trename")
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil)
                     ("2" (skolem!)
                      (("2" (inst? 1)
                        (("2" (expand "rename") (("2" (inst?) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "Choice" -1)
              (("2" (skolem!)
                (("2" (expand "rename")
                  (("2" (skolem-typepred)
                    (("2" (inst?)
                      (("2" (expand "Choice")
                        (("2" (flatten) (("2" (inst? 2) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (use "rename_choice3_TCC1") (("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((T formal-type-decl nil parametric_choice nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (set type-eq-decl nil sets nil)
    (Choice const-decl "process[T]" parametric_choice nil)
    (U formal-type-decl nil parametric_choice nil)
    (rename const-decl "process" processes nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (t1!1 skolem-const-decl "(Choice(P!1))" parametric_choice nil)
    (i!1 skolem-const-decl "U" parametric_choice nil)
    (P!1 skolem-const-decl "[U -> process[T]]" parametric_choice nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (trename def-decl "bool" traces nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (t1!1 skolem-const-decl "(P!1(i!1))" parametric_choice nil)
    (i!1 skolem-const-decl "U" parametric_choice nil))
   nil)))

