(fixed_points
 (reflexive 0
  (reflexive-1 nil 3286369867 ("" (grind) nil nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (<= const-decl "bool" fixed_points nil))
   nil))
 (antisymmetric 0
  (antisymmetric-1 nil 3286369867
   ("" (grind :if-match nil)
    (("" (apply-extensionality :hide? t)
      (("" (inst?)
        (("" (inst?)
          (("" (apply-extensionality :hide? t)
            (("" (inst?)
              (("" (inst?)
                (("" (bddsimp) (("" (propax) nil))))))))))))))))
    nil)
   ((U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (<= const-decl "bool" fixed_points nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (transitive 0
  (transitive-1 nil 3286369867 ("" (grind) nil nil)
   ((U formal-type-decl nil fixed_points nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil fixed_points nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (<= const-decl "bool" fixed_points nil))
   nil))
 (glb_TCC1 0
  (glb_TCC1-1 nil 3286369867
   ("" (grind :if-match nil :exclude "prefix")
    (("" (inst?)
      (("" (typepred "X!1(x!1)")
        (("" (assert) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil)
    (prefix_closed const-decl "bool" processes nil))
   nil))
 (glb_is_bound 0
  (glb_is_bound-1 nil 3286369867 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil)
    (glb const-decl "process[T]" fixed_points nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (<= const-decl "bool" fixed_points nil))
   nil))
 (glb_is_inf 0
  (glb_is_inf-1 nil 3286369867 ("" (grind :if-match best) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil) (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (<= const-decl "bool" fixed_points nil)
    (glb const-decl "process[T]" fixed_points nil))
   nil))
 (closure_mu 0
  (closure_mu-1 nil 3286369867
   ("" (auto-rewrite "glb_is_bound" "mu" "monotonic?")
    (("" (skolem-typepred)
      (("" (assert)
        (("" (rewrite "glb_is_inf")
          (("" (skolem-typepred)
            (("" (inst - "mu(G!1)" "X!1")
              (("" (assert)
                ((""
                  (use "transitive"
                       ("X" "G!1(mu(G!1))" "Y" "G!1(X!1)" "Z" "X!1"))
                  (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points nil)
    (glb_is_inf formula-decl nil fixed_points nil)
    (set type-eq-decl nil sets nil)
    (<= const-decl "bool" fixed_points nil)
    (glb const-decl "process[T]" fixed_points nil)
    (transitive formula-decl nil fixed_points nil)
    (glb_is_bound formula-decl nil fixed_points nil)
    (mu const-decl "[U -> process[T]]" fixed_points nil))
   nil))
 (smallest_closed 0
  (smallest_closed-1 nil 3286369867
   ("" (auto-rewrite "mu" "glb_is_bound")
    (("" (skosimp) (("" (assert) nil nil)) nil)) nil)
   ((mu const-decl "[U -> process[T]]" fixed_points nil)
    (glb_is_bound formula-decl nil fixed_points nil))
   nil))
 (fixed_point 0
  (fixed_point-1 nil 3286369867
   ("" (auto-rewrite "monotonic?")
    (("" (skolem-typepred)
      (("" (use* "closure_mu" "antisymmetric")
        (("" (assert)
          (("" (delete 2)
            (("" (expand "mu" 1 1)
              (("" (rewrite "glb_is_bound")
                (("" (inst?) (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points nil)
    (<= const-decl "bool" fixed_points nil)
    (set type-eq-decl nil sets nil)
    (glb_is_bound formula-decl nil fixed_points nil)
    (mu const-decl "[U -> process[T]]" fixed_points nil)
    (antisymmetric formula-decl nil fixed_points nil)
    (closure_mu formula-decl nil fixed_points nil))
   nil))
 (least_fixed_point 0
  (least_fixed_point-1 nil 3286369867
   ("" (skosimp)
    (("" (rewrite "smallest_closed")
      (("" (replace*) (("" (rewrite "reflexive") nil nil)) nil)) nil))
    nil)
   ((smallest_closed formula-decl nil fixed_points nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points nil)
    (reflexive formula-decl nil fixed_points nil))
   nil))
 (pseudo_transitive 0
  (pseudo_transitive-1 nil 3286369867 ("" (grind) nil nil)
   ((U formal-type-decl nil fixed_points nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil fixed_points nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (<= const-decl "bool" fixed_points nil)
    (\|> const-decl "bool" satisfaction nil)
    (< const-decl "bool" fixed_points nil))
   nil))
 (lub_TCC1 0
  (lub_TCC1-1 nil 3286369867
   ("" (grind :exclude ("prefix"))
    (("" (typepred "X!1(x!1)")
      (("" (assert) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (prefix_closed const-decl "bool" processes nil))
   nil))
 (lub_is_bound 0
  (lub_is_bound-1 nil 3286369867 ("" (grind) nil nil)
   ((U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (lub const-decl "process[T]" fixed_points nil)
    (subset? const-decl "bool" sets nil)
    (<= const-decl "bool" fixed_points nil))
   nil))
 (lub_is_sup 0
  (lub_is_sup-1 nil 3286369867 ("" (grind) nil nil)
   ((U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|> const-decl "bool" satisfaction nil)
    (< const-decl "bool" fixed_points nil)
    (lub const-decl "process[T]" fixed_points nil))
   nil))
 (induction_aux 0
  (induction_aux-1 nil 3286369867
   ("" (skosimp)
    (("" (lemma "lub_is_sup")
      (("" (inst -1 "E!1" "{X | X < E!1}")
        (("1" (assert)
          (("1" (inst?)
            (("1" (assert)
              (("1" (lemma "lub_is_bound")
                (("1"
                  (inst -1 "{X | X < E!1}" "G!1(lub({X | X < E!1}))")
                  (("1" (forward-chain "smallest_closed")
                    (("1" (forward-chain "pseudo_transitive")
                      (("1" (delete -2 -3 -4 -6 1)
                        (("1"
                          (grind :exclude ("<" "prefix_closed")
                           :if-match nil)
                          (("1" (inst?) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (delete -2 -3 -5 1)
                      (("2"
                        (grind :exclude ("<" "prefix_closed") :if-match
                         nil)
                        (("2" (inst?) nil nil)) nil))
                      nil))
                    nil)
                   ("2" (delete -2 -4 1)
                    (("2"
                      (grind :exclude ("<" "prefix_closed") :if-match
                       nil)
                      (("2" (inst?) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (delete -2 1)
              (("2"
                (grind :exclude ("<" "prefix_closed") :if-match nil)
                (("2" (inst?) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (delete -3 1)
          (("2" (grind :exclude ("<" "prefix_closed") :if-match nil)
            (("2" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((lub_is_sup formula-decl nil fixed_points nil)
    (monotonic? const-decl "bool" fixed_points nil)
    (mu const-decl "[U -> process[T]]" fixed_points nil)
    (pseudo_transitive formula-decl nil fixed_points nil)
    (member const-decl "bool" sets nil)
    (smallest_closed formula-decl nil fixed_points nil)
    (lub_is_bound formula-decl nil fixed_points nil)
    (lub const-decl "process[T]" fixed_points nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil) (empty? const-decl "bool" sets nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" fixed_points nil)
    (E!1 skolem-const-decl "[U -> pred[trace[T]]]" fixed_points nil))
   nil))
 (param_induction0 0
  (param_induction0-1 nil 3417193205
   ("" (skosimp)
    (("" (use "induction_aux")
      (("" (expand "<")
        (("" (ground)
          (("" (delete -2 2)
            (("" (inst + "lambda x : epsilon! Q : Q |> E!1(x)")
              (("1" (skolem!)
                (("1" (inst?)
                  (("1"
                    (use "epsilon_ax" ("p" "lambda Q : Q |> E!1(x!1)"))
                    (("1" (ground) nil) ("2" (inst 1 "Stop") nil)))))))
               ("2" (skolem!) (("2" (inst 1 "Stop") nil))))))))))))))
    nil)
   ((induction_aux formula-decl nil fixed_points nil)
    (monotonic? const-decl "bool" fixed_points nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil fixed_points nil)
    (U formal-type-decl nil fixed_points nil)
    (pred type-eq-decl nil defined_types nil)
    (\|> const-decl "bool" satisfaction nil)
    (epsilon const-decl "T" epsilons nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (< const-decl "bool" fixed_points nil))
   nil))
 (param_induction 0
  (param_induction-1 nil 3286369867
   ("" (skosimp)
    (("" (rewrite "param_induction0")
      (("" (delete -2 2)
        (("" (skolem!) (("" (inst? -) (("" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((param_induction0 formula-decl nil fixed_points nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points nil)
    (Stop const-decl "process" processes nil))
   nil))
 (param_induction2 0
  (param_induction2-1 nil 3286369867
   ("" (skosimp)
    (("" (rewrite "param_induction")
      (("" (delete -2 2) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((param_induction formula-decl nil fixed_points nil)
    (U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points nil)
    (Stop const-decl "process" processes nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (\|> const-decl "bool" satisfaction nil))
   nil))
 (sigma_fix 0
  (sigma_fix-1 nil 3286369867
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp*)
      (("" (lemma "smallest_closed")
        ((""
          (inst -1 "G!1"
           "lambda x : Choice({ Q | subset?(sigma(Q), A!1) })")
          (("" (split)
            (("1" (delete -2)
              (("1" (expand "<=")
                (("1" (inst?)
                  (("1" (forward-chain "sigma_monotonic")
                    (("1" (delete -2)
                      (("1" (rewrite "sigma_choice2")
                        (("1" (assert)
                          (("1" (skosimp)
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (delete -2)
                                  (("1"
                                    (expand "union")
                                    (("1"
                                      (skolem-typepred)
                                      (("1"
                                        (delete -1 -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst?)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (delete 2)
              (("2"
                (case "FORALL x : {Q | subset?(sigma(Q), A!1)}(G!1(LAMBDA x: Choice({Q | subset?(sigma(Q), A!1)}))(x))")
                (("1" (delete -2)
                  (("1" (expand "<=")
                    (("1" (skolem!)
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (skosimp)
                            (("1" (expand "Choice" 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (delete 1)
                                  (("1" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete 2)
                  (("2" (skosimp)
                    (("2" (inst?)
                      (("2" (split)
                        (("1" (inst?) nil nil)
                         ("2" (delete 2)
                          (("2" (skolem!)
                            (("2" (rewrite "sigma_choice2")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "union")
                                  (("2"
                                    (skosimp)
                                    (("2"
                                      (skolem-typepred)
                                      (("2"
                                        (delete -1 -2)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((U formal-type-decl nil fixed_points nil)
    (T formal-type-decl nil fixed_points nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (monotonic? const-decl "bool" fixed_points nil)
    (set type-eq-decl nil sets nil)
    (Choice const-decl "process" processes nil)
    (subset? const-decl "bool" sets nil)
    (sigma const-decl "setof[T]" processes nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (G!1 skolem-const-decl "(monotonic?)" fixed_points nil)
    (A!1 skolem-const-decl "set[T]" fixed_points nil)
    (x!2 skolem-const-decl "U" fixed_points nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (union const-decl "set[T]" parametric_sets nil)
    (sigma_choice2 formula-decl nil process_rules nil)
    (mu const-decl "[U -> process[T]]" fixed_points nil)
    (sigma_monotonic formula-decl nil processes nil)
    (<= const-decl "bool" fixed_points nil)
    (smallest_closed formula-decl nil fixed_points nil))
   nil)))

