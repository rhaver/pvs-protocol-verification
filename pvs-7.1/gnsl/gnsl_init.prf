(gnsl_init
 (p_TCC1 0
  (p_TCC1-1 nil 3395911133 ("" (inst 1 "2") nil nil)
   ((nat_from_2 type-eq-decl nil gnsl_init nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil (p existence "" "nat_from_2")))
 (hu_TCC1 0
  ("hu_TCC1-1" nil 3389603532
   ("" (inst 1 "LAMBDA (k: nat_to_p): k") (("" (grind) nil nil)) nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (hu existence ""
    "{h: [gnsl_init.nat_to_p -> gnsl_init.Identity] | FORALL (i, j: gnsl_init.nat_to_p): booleans.IMPLIES(i /= j, h(i) /= h(j))}")))
 (IRpart_TCC1 0
  (IRpart_TCC1-1 nil 3855731660 ("" (inst 1 "(2,1,1)") nil nil)
   ((Role type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil (IRpart existence "" "[nat_from_2, Identity, Role]")))
 (Nonces_TCC1 0
  (Nonces_TCC1-1 nil 3389604751
   ("" (skolem-typepred)
    (("" (typepred "pt[[nat_from_2, Identity, Role], Nonce]")
      (("" (delete -1)
        (("" (inst -1 "(P!1, i!1, r!1)")
          (("" (skolem!)
            (("" (inst 1 "n!1") (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pt const-decl "{p |
   (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
    (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (setof type-eq-decl nil defined_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (n!1 skolem-const-decl "Nonce" gnsl_init nil)
    (r!1 skolem-const-decl "Role" gnsl_init nil)
    (i!1 skolem-const-decl "Identity" gnsl_init nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (Nonces existence ""
    "{x: Nonce | gnsl_init.IRpart(gnsl_init.P, gnsl_init.i, gnsl_init.r)(x)}")))
 (n_init_TCC1 0
  (n_init_TCC1-1 nil 3389605231
   ("" (typepred "p") (("" (ground) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil))
   nil (n_init subtype "0" "nat_to_p")))
 (n_prop 0
  ("n_prop-1" nil 3395925722
   ("" (skolem-typepred)
    (("" (typepred "n_init")
      (("" (typepred "pt[[nat_from_2, Identity, Role], Nonce]")
        (("" (delete -2)
          (("" (inst -1 "(P!1, u!1, r!1)" "(p, hu(0), 0)" "n_init")
            (("" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pt const-decl "{p |
   (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
    (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (< const-decl "bool" reals nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil))
   nil))
 (n_orig 0
  (n_orig-1 nil 3395925808
   ("" (skosimp)
    (("" (typepred "pt[[nat_from_2, Identity, Role], Nonce]" "n_init")
      (("" (delete -2)
        (("" (inst -1 "(P!1, u!1, 0)" "(p, hu(0), 0)" "n_init")
          (("" (expand "IRpart") (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (setof type-eq-decl nil defined_types nil)
    (pt const-decl "{p |
   (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
    (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (< const-decl "bool" reals nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil))
   shostak))
 (E_TCC1 0
  (E_TCC1-1 nil 3389593331 ("" (cases-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil))
   nil
   (E cases "gnsl_init.k1" "Message: DATATYPE WITH SUBTYPES Key, Nonkey
 BEGIN
  user(x_user: Identity): user?: Nonkey
  nonce(x_nonce: Nonce): nonce?: Nonkey
  nlist(x_nlist: list[Nonce]): nlist?: Nonkey
  ilist(x_ilist: list[Identity]): ilist?: Nonkey
  conc(x_conc, y_conc: Message): conc?: Nonkey
  public(x_public: Identity): public?: Key
  secret(x_secret: Identity): secret?: Key
  code(x_code: Key, y_code: Message): code?: Nonkey
  commit(x_r: Role, y_idlist: list[Identity], z_n: Nonce): commit?: Nonkey
  running(x_r: Role, y_idlist: list[Identity], z_n: Nonce): running?: Nonkey
 END Message")))
 (Gen_TCC1 0
  (Gen_TCC1-1 nil 3855731660 ("" (tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil
   (Gen subtype "(: gnsl_init.n :)" "list[Nonce]")))
 (Gen_TCC2 0
  (Gen_TCC2-1 nil 3855731660 ("" (tcc) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil
   (Gen subtype "(: gnsl_init.n :)" "list[Nonce]")))
 (UROLE_INIT_TCC1 0
  (UROLE_INIT_TCC1-1 nil 3389793576 ("" (tcc) nil nil) nil nil
   (UROLE_INIT subtype "(number_fields.-)(gnsl_init.P, 1)" "nat")))
 (UROLE_INIT_TCC2 0
  (UROLE_INIT_TCC2-1 nil 3389864605 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (UROLE_INIT subtype "gnsl_init.i" "below[length[Identity](x)]")))
 (UROLE_INIT_TCC3 0
  (UROLE_INIT_TCC3-1 nil 3389874431
   ("" (skolem!)
    (("" (prop)
      (("" (case "P!1 = p")
        (("1" (ground) nil nil)
         ("2" (delete 2)
          (("2" (typepred "nn0!1")
            (("2" (lemma "n_orig" ("P" "P!1" "u" "u!1"))
              (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n_orig formula-decl nil gnsl_init nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil))
   nil
   (UROLE_INIT subtype "(number_fields.+)(gnsl_init.i, 1)"
    "nat_to_p")))
 (UROLE_INIT_TCC4 0
  (UROLE_INIT_TCC4-1 nil 3389874431
   ("" (skolem-typepred)
    (("" (prop)
      (("" (skolem-typepred)
        (("" (delete -1 -2 -3 -5 -6 -7 -8 -9)
          (("" (typepred "p")
            ((""
              (lemma "more_list_props[Identity].length_non_zero"
               ("l" "il!1"))
              (("" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_non_zero formula-decl nil more_list_props lib)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (UROLE_INIT subtype "gnsl_init.il" "(list_adt[Identity].cons?)")))
 (UROLE_INIT_TCC5 0
  (UROLE_INIT_TCC5-1 nil 3389874431 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil
   (UROLE_INIT subtype "(: gnsl_init.nn0 :)" "list[Nonce]")))
 (UROLE_INIT_TCC6 0
  (UROLE_INIT_TCC6-1 nil 3389874431 ("" (subtype-tcc) nil nil) nil nil
   (UROLE_INIT subtype "(number_fields.-)(gnsl_init.P, 2)"
    "below[length[Identity](il)]")))
 (UROLE_INIT_TCC7 0
  (UROLE_INIT_TCC7-1 nil 3389874431 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil))
   nil
   (UROLE_INIT subtype "gnsl_init.i" "below[length[Identity](x)]")))
 (UROLE_INIT_TCC8 0
  (UROLE_INIT_TCC8-1 nil 3389874431
   ("" (skolem!)
    (("" (prop)
      (("" (case "P!1 = p")
        (("1" (ground) nil nil)
         ("2" (delete 2)
          (("2" (typepred "nn0!1")
            (("2" (lemma "n_orig" ("P" "P!1" "u" "u!1"))
              (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n_orig formula-decl nil gnsl_init nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil))
   nil
   (UROLE_INIT subtype "(number_fields.+)(1, gnsl_init.i)"
    "nat_to_p")))
 (UROLE_INIT_TCC9 0
  (UROLE_INIT_TCC9-1 nil 3389874431
   ("" (skolem-typepred)
    (("" (prop)
      (("" (skolem-typepred)
        (("" (delete -1 -2 -3 -6 -7 1)
          ((""
            (lemma "more_list_props[Identity].length_non_zero"
             ("l" "il!1"))
            (("" (ground) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (UROLE_INIT subtype "gnsl_init.il" "(list_adt[Identity].cons?)")))
 (UROLE_INIT_TCC10 0
  (UROLE_INIT_TCC10-1 nil 3389874431 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil
   (UROLE_INIT subtype "(: gnsl_init.nn0 :)" "list[Nonce]")))
 (UROLE_INIT_TCC11 0
  (UROLE_INIT_TCC11-1 nil 3662270943 ("" (subtype-tcc) nil nil) nil nil
   (UROLE_INIT subtype "(number_fields.-)(gnsl_init.P, 2)"
    "below[length[Identity](il)]")))
 (UROLE_LAST_TCC1 0
  (UROLE_LAST_TCC1-1 nil 3389864605 ("" (subtype-tcc) nil nil) nil nil
   (UROLE_LAST subtype "(number_fields.-)(gnsl_init.P, 1)" "Role")))
 (UROLE_LAST_TCC2 0
  (UROLE_LAST_TCC2-1 nil 3389864605 ("" (subtype-tcc) nil nil) nil nil
   (UROLE_LAST subtype "(number_fields.-)(gnsl_init.P, 2)"
    "below[length[Identity](il)]")))
 (UROLE_LAST_TCC3 0
  (UROLE_LAST_TCC3-1 nil 3389874431
   ("" (skolem-typepred)
    (("" (delete -2 -4 -5)
      ((""
        (lemma "more_list_props[Identity].length_non_zero"
         ("l" "nl!1"))
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (UROLE_LAST subtype "gnsl_init.nl" "(list_adt[Nonce].cons?)")))
 (UROLE_LAST_TCC4 0
  (UROLE_LAST_TCC4-1 nil 3389874431
   ("" (skolem-typepred)
    (("" (delete -2 -3 -4)
      ((""
        (lemma "more_list_props[Identity].length_non_zero"
         ("l" "il!1"))
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (UROLE_LAST subtype "gnsl_init.il" "(list_adt[Identity].cons?)")))
 (UROLE_LAST_TCC5 0
  (UROLE_LAST_TCC5-1 nil 3662270943 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil
   (UROLE_LAST subtype "(: gnsl_init.nnP :)" "list[Nonce]")))
 (LastMessage_TCC1 0
  (LastMessage_TCC1-1 nil 3393262700
   ("" (skolem-typepred) (("" (ground) nil nil)) nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_from_3 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil (LastMessage subtype "gnsl_init.P" "nat_from_2")))
 (LastMessage_TCC2 0
  (LastMessage_TCC2-1 nil 3393262700
   ("" (skolem-typepred)
    (("" (delete -2 -4 -5 -6 -7 -8 -9 -10)
      ((""
        (lemma "more_list_props[Identity].length_non_zero"
         ("l" "il2!1"))
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (LastMessage subtype "gnsl_init.il2" "(list_adt[Identity].cons?)")))
 (LastMessage_TCC3 0
  (LastMessage_TCC3-1 nil 3399297963
   ("" (skolem-typepred)
    (("" (delete -2 -4 -5 -6 -7 -8 -9 -10)
      ((""
        (lemma "more_list_props[Identity].length_non_zero"
         ("l" "il2!1"))
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (LastMessage subtype "gnsl_init.il2" "(list_adt[Identity].cons?)")))
 (UROLE_MIDDLE_TCC1 0
  (UROLE_MIDDLE_TCC1-1 nil 3389874431 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (UROLE_MIDDLE subtype "(number_fields.-)(gnsl_init.i, 1)"
    "below[length[Identity](il1)]")))
 (UROLE_MIDDLE_TCC2 0
  (UROLE_MIDDLE_TCC2-1 nil 3389874431
   ("" (skolem-typepred)
    (("" (delete -1 -3 -4 -6 -7 -8 -9 -10 -11)
      ((""
        (lemma "more_list_props[Identity].length_non_zero"
         ("l" "nl1!1"))
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (UROLE_MIDDLE subtype "gnsl_init.nl1" "(list_adt[Nonce].cons?)")))
 (UROLE_MIDDLE_TCC3 0
  (UROLE_MIDDLE_TCC3-1 nil 3389874431
   ("" (skolem-typepred)
    (("" (delete -2 -4 -5 -6 -7 -8 -9 -10 -11)
      ((""
        (lemma "more_list_props[Identity].length_non_zero"
         ("l" "il2!1"))
        (("" (ground) nil nil)) nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat_from_3 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (UROLE_MIDDLE subtype "gnsl_init.il2"
    "(list_adt[Identity].cons?)")))
 (USER_TCC1 0
  (USER_TCC1-1 nil 3389874431
   ("" (skosimp*) (("" (typepred "P!1") (("" (ground) nil nil)) nil))
    nil)
   ((nat_from_2 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (USER subtype "gnsl_init.P" "nat_from_3")))
 (USER_TCC2 0
  (USER_TCC2-1 nil 3399297963
   ("" (skolem-typepred)
    (("" (prop)
      (("" (case "3 <= P!1")
        (("1" (delete -2 -3 1)
          (("1" (typepred "pt[[nat_from_2, Identity, Role], Nonce]")
            (("1" (delete -1)
              (("1" (inst -1 "(P!1, i!1, 1)")
                (("1" (skolem! -1)
                  (("1" (inst 1 "(1, n!1)")
                    (("1" (expand "IRpart") (("1" (propax) nil nil))
                      nil)
                     ("2" (delete -1) (("2" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (delete -1 2) (("2" (inst 1 "0") nil nil)) nil))
            nil))
          nil)
         ("2" (delete -1 -2 3) (("2" (ground) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n!1 skolem-const-decl "Nonce" gnsl_init nil)
    (i!1 skolem-const-decl "Identity" gnsl_init nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_init nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Role type-eq-decl nil gnsl_init nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (setof type-eq-decl nil defined_types nil)
    (pt const-decl "{p |
   (FORALL i, j, n: i /= j AND p(i)(n) => NOT p(j)(n)) AND
    (FORALL i: EXISTS n: p(i)(n))}" partition nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (USER existence ""
    "[j: gnsl_init.nat_1_to(gnsl_init.P), gnsl_init.Nonces(gnsl_init.P, gnsl_init.i, j)]")))
 (hu_list_exists_TCC1 0
  (hu_list_exists_TCC1-1 nil 3389881160 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil))
   nil
   (hu_list_exists subtype "gnsl_init.i"
    "below[length[Identity](x)]")))
 (hu_list_exists 0
  (hu_list_exists-1 nil 3389881161
   ("" (typepred "p")
    (("" (inst 1 "gen_f_list(p, 0, hu)")
      (("1" (split)
        (("1" (rewrite "gen1") nil nil)
         ("2" (skolem!) (("2" (rewrite "gen2") nil nil)) nil))
        nil)
       ("2" (ground) nil nil))
      nil))
    nil)
   ((p const-decl "nat_from_2" gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (gen1 formula-decl nil listprops nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (gen2 formula-decl nil listprops nil)
    (gen_f_list def-decl "list[T]" listprops nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (hu_list_TCC1 0
  (hu_list_TCC1-1 nil 3389880596
   ("" (lemma "hu_list_exists") (("" (propax) nil nil)) nil)
   ((hu_list_exists formula-decl nil gnsl_init nil)) nil
   (hu_list existence ""
    "{x: list_adt[Identity].list | booleans.AND((list_props[Identity].length(x) = gnsl_init.p), FORALL (i: gnsl_init.nat_to_p): list_props[Identity].nth(x, i) = gnsl_init.hu(i))}")))
 (cons_hu_list 0
  (cons_hu_list-1 nil 3390133695
   ("" (typepred "p")
    (("" (typepred "hu_list")
      (("" (delete -1 -3)
        (("" (prop)
          (("" (expand "length" -1) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((p const-decl "nat_from_2" gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (hu_list const-decl "{x: list[Identity] |
   (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_init nil))
   shostak))
 (R_last_TCC1 0
  (R_last_TCC1-1 nil 3395911133 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (R_last subtype "(number_fields.-)(gnsl_init.p, 1)" "Role")))
 (rho_middle_TCC1 0
  (rho_middle_TCC1-1 nil 3397656280 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_init nil))
   nil
   (rho_middle termination
    "gnsl_init.rho_middle(gnsl_init.i)(gnsl_init.z1)" "nil")))
 (rho_middle_TCC2 0
  (rho_middle_TCC2-1 nil 3397656280 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_init nil))
   nil
   (rho_middle termination
    "gnsl_init.rho_middle(gnsl_init.i)(gnsl_init.z2)" "nil")))
 (rho_middle_TCC3 0
  (rho_middle_TCC3-1 nil 3397656280 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_init nil))
   nil
   (rho_middle termination
    "gnsl_init.rho_middle(gnsl_init.i)(gnsl_init.z2)" "nil")))
 (rho_middle_TCC4 0
  (rho_middle_TCC4-1 nil 3397656280 ("" (subtype-tcc) nil nil) nil nil
   (rho_middle subtype "gnsl_init.j" "nat_to_p")))
 (rho_middle_TCC5 0
  (rho_middle_TCC5-1 nil 3397656280 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (rho_middle subtype "gnsl_init.j"
    "below[length[Identity](hu_list)]")))
 (rho_last_TCC1 0
  (rho_last_TCC1-1 nil 3390559400 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Message])" gnsl_init nil))
   nil
   (rho_last termination "gnsl_init.rho_last(gnsl_init.z1)" "nil")))
 (rho_last_TCC2 0
  (rho_last_TCC2-1 nil 3390559400 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[Message])" gnsl_init nil))
   nil
   (rho_last termination "gnsl_init.rho_last(gnsl_init.z2)" "nil")))
 (rho_last_TCC3 0
  (rho_last_TCC3-1 nil 3390559400 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (<< adt-def-decl "(strict_well_founded?[Message])" gnsl_init nil))
   nil
   (rho_last termination "gnsl_init.rho_last(gnsl_init.z2)" "nil")))
 (rho_last_TCC4 0
  (rho_last_TCC4-1 nil 3390559400 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Message type-decl nil gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (rho_last subtype "gnsl_init.i"
    "below[length[Identity](hu_list)]")))
 (restrictmiddle_init 0
  (restrictmiddle_init-1 nil 3855828762
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (expand "RankUser")
        (("" (interleaving2)
          (("" (expand "UROLE_INIT")
            (("" (lift-if)
              (("" (prop)
                (("1" (typepred "p")
                  (("1" (choice3)
                    (("1" (comment "establish obvious equalities")
                      (("1" (case "u!1=hu(0) AND p=P!1")
                        (("1" (flatten)
                          (("1" (replace -1 1)
                            (("1" (replace -2 1 rl)
                              (("1"
                                (replace -4 1)
                                (("1"
                                  (delete -1 -4)
                                  (("1"
                                    (prefix)
                                    (("1"
                                      (delete 2 3)
                                      (("1"
                                        (grind :if-match nil)
                                        (("1"
                                          (comment
                                           "hu(0) sends a message (that is `escaped' in rho) to hu(1)")
                                          (("1"
                                            (inst 1 "1")
                                            (("1"
                                              (split)
                                              (("1"
                                                (comment
                                                 "prove that the intended recipient is 1")
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (typepred "i!3`2")
                                                    (("1"
                                                      (delete
                                                       -1
                                                       -2
                                                       -4
                                                       -5
                                                       -6)
                                                      (("1"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  ";;; prove that the intended recipient is 1"))
                                                nil)
                                               ("2"
                                                (comment
                                                 "prove that the message has the right structure")
                                                (("2"
                                                  (inst 1 "null")
                                                  (("2"
                                                    (decompose-equality
                                                     1)
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "hu_list")
                                                          (("1"
                                                            (delete
                                                             -1
                                                             -2
                                                             -4
                                                             -5
                                                             -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete -1)
                                                          (("2"
                                                            (comment
                                                             "prove that the two lists are equal by showing that their lengths and elements are equal")
                                                            (("2"
                                                              (typepred
                                                               "i!3`2"
                                                               "hu_list")
                                                              (("2"
                                                                (delete
                                                                 -1
                                                                 -4)
                                                                (("2"
                                                                  (rewrite
                                                                   "length_nth_equality[Identity]")
                                                                  (("1"
                                                                    (delete
                                                                     -2
                                                                     -4
                                                                     -6
                                                                     2)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_cdr")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_cdr")
                                                                        (("1"
                                                                          (rewrite
                                                                           "length_cdr")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     -3
                                                                     -6
                                                                     2)
                                                                    (("2"
                                                                      (skolem-typepred)
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "i!5+1")
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "i!5+2")
                                                                          (("1"
                                                                            (delete
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (delete
                                                                             -3
                                                                             2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_cdr")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (delete
                                                                           -3
                                                                           2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_cdr")
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              ";;; prove that the two lists are equal by showing that their lengths and elements are equal"))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  ";;; prove that the message has the right structure"))
                                                nil))
                                              nil))
                                            ";;; hu(0) sends a message (that is `escaped' in rho) to hu(1)"))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (delete 2 3)
                                      (("2"
                                        (prefix)
                                        (("2"
                                          (delete -2 -3 +)
                                          (("2"
                                            (comment
                                             "-1 evaluates to false")
                                            (("2"
                                              (grind :if-match nil)
                                              (("1"
                                                (comment
                                                 "contradiction in terms -3 and -5")
                                                (("1"
                                                  (delete -1 -2 -4 -6)
                                                  (("1"
                                                    (decompose-equality
                                                     -2)
                                                    (("1"
                                                      (typepred "hu")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "0"
                                                         "j!1")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  ";;; contradiction in terms -3 and -5"))
                                                nil)
                                               ("2"
                                                (comment
                                                 "consequent 1 was a negated antecedent")
                                                (("2"
                                                  (inst 1 "0")
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  ";;; consequent 1 was a negated antecedent"))
                                                nil))
                                              ";;; -1 evaluates to false"))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete -1 2)
                          (("2" (typepred "i!2")
                            (("2"
                              (lemma "n_orig" ("P" "P!1" "u" "u!1"))
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil))
                        ";;; establish obvious equalities"))
                      nil)
                     ("2" (typepred "i!3`2")
                      (("2" (delete -1 -3 -4 -5 2)
                        (("2" (ground) nil nil)) nil))
                      nil)
                     ("3" (delete 2) (("3" (grind) nil nil)) nil)
                     ("4" (delete 2)
                      (("4" (nonemptylist "i!3`2") nil nil)) nil)
                     ("5" (delete -1 2)
                      (("5" (typepred "i!2")
                        (("5" (lemma "n_orig" ("P" "P!1" "u" "u!1"))
                          (("5" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("6" (delete - 2) (("6" (ground) nil nil)) nil)
                     ("7" (delete 2) (("7" (grind) nil nil)) nil)
                     ("8" (skolem-typepred 1)
                      (("8" (delete -1 -2 -3 -5 -6 -7 2)
                        (("8" (typepred "P!1")
                          (("8" (nonemptylist "il!1") nil nil)) nil))
                        nil))
                      nil)
                     ("9" (delete -1 2)
                      (("9" (skolem!)
                        (("9" (typepred "i!2")
                          (("9" (lemma "n_orig" ("P" "P!1" "u" "u!1"))
                            (("9" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("10" (delete - 2)
                      (("10" (skolem!) (("10" (ground) nil nil)) nil))
                      nil)
                     ("11" (delete -1 2)
                      (("11" (skolem!)
                        (("11" (typepred i!2)
                          (("11" (lemma "n_orig" ("P" "P!1" "u" "u!1"))
                            (("11" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("12" (delete - 2)
                      (("12" (skolem!) (("12" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "P!1")
                  (("2" (choice3)
                    (("1" (prefix)
                      (("1" (delete 2 3) (("1" (grind) nil nil)) nil)
                       ("2" (delete 2 3)
                        (("2" (prefix)
                          (("2" (delete 2 3)
                            (("2" (prefix)
                              (("1"
                                (delete 2 3)
                                (("1"
                                  (expand "rho_middle" -1)
                                  (("1"
                                    (grind :exclude "rho_middle")
                                    (("1"
                                      (comment
                                       "-1 means that nonce n_init is not in the nlist")
                                      (("1"
                                        (delete -2)
                                        (("1"
                                          (expand "rho_middle" -1)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (lemma
                                               "listprops[Nonce].elt_append2"
                                               ("l1"
                                                "(: i!2 :)"
                                                "l2"
                                                "i!3`1"
                                                "t"
                                                "n_init"))
                                              (("1"
                                                (grind :exclude "elt")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        ";;; -1 means that nonce n_init is not in the nlist"))
                                      nil)
                                     ("2"
                                      (comment
                                       "i!2 = n_init is provable from -6")
                                      (("2"
                                        (mdecompose-equality -6)
                                        nil
                                        ";;; i!2 = n_init is provable from -6"))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (delete 2 3)
                                (("2"
                                  (prefix)
                                  (("1"
                                    (delete 2 3)
                                    (("1"
                                      (comment
                                       "1 and 2 are mutually exclusive")
                                      (("1"
                                        (grind)
                                        nil
                                        ";;; 1 and 2 are mutually exclusive"))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete 2 3)
                                    (("2" (stop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete - 2 3)
                      (("2" (typepred "i!3`2") (("2" (ground) nil nil))
                        nil))
                      nil)
                     ("3" (delete 2 3) (("3" (grind) nil nil)) nil)
                     ("4" (delete 2 3)
                      (("4" (nonemptylist "i!3`2") nil nil)) nil)
                     ("5" (delete - 2 3) (("5" (grind) nil nil)) nil)
                     ("6" (skolem-typepred 1)
                      (("6" (delete -1 -2 -3 2 3)
                        (("6"
                          (lemma
                           "more_list_props[Identity].length_non_zero"
                           ("l" "il!1"))
                          (("6" (ground) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[list[event]]" dynetwork nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes lib)
    (commit adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (commit?)]" gnsl_init nil)
    (commit? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_init nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_init
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_init nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_init
     nil)
    (E const-decl "Message" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (>> const-decl "process" processes lib)
    (restriction_choice3 formula-decl nil restriction_rules2 lib)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uniform3_choice2 formula-decl nil uniform_props2 lib)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restriction_pref formula-decl nil restriction_rules lib)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uniform_stop2 formula-decl nil uniform_props lib)
    (uniform_prefix2 formula-decl nil uniform_props lib)
    (remove def-decl "list[T]" listprops nil)
    (elt const-decl "bool" listprops nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (hu_list const-decl "{x: list[Identity] |
   (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_init nil)
    (Message_conc_extensionality formula-decl nil gnsl_init nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_init nil)
    (i!3 skolem-const-decl "[{x: list[Nonce] | length(x) = P!1 - 1},
 {x: list[Identity] |
    (length(x) = P!1 - 1) AND
     FORALL (i: below[P!1 - 1]): nth(x, i) = hu(1 + i)}]" gnsl_init
     nil)
    (i!5 skolem-const-decl "below[length[Identity](cdr(i!3`2))]"
     gnsl_init nil)
    (length_cdr formula-decl nil more_list_props lib)
    (length_nth_equality formula-decl nil listprops nil)
    (Message_ilist_extensionality formula-decl nil gnsl_init nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (Message_public_extensionality formula-decl nil gnsl_init nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_init
     nil)
    (n_orig formula-decl nil gnsl_init nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restriction_stop formula-decl nil restriction_rules lib)
    (append def-decl "list[T]" list_props nil)
    (elt_append2 formula-decl nil listprops nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_init
     nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (i!1 skolem-const-decl "nat_1_to(p)" gnsl_init nil)
    (i!2 skolem-const-decl "Nonces(P!1, u!1, 0)" gnsl_init nil)
    (u!1 skolem-const-decl "Identity" gnsl_init nil)
    (uniform2_interleave2 formula-decl nil uniform_props3 lib)
    (|#| const-decl "process[T]" restriction_rules lib)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_middle def-decl "bool" gnsl_init nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3 lib)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (R_middle const-decl "set[event]" gnsl_init nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes lib)
    (process type-eq-decl nil processes lib)
    (UROLE_INIT const-decl "process[event]" gnsl_init nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (Message type-decl nil gnsl_init nil)
    (INIT const-decl "bool" gnsl_init nil)
    (\|- const-decl "bool" gnsl_init nil)
    (event type-decl nil dynetwork nil))
   shostak))
 (restrictmiddle_middle 0
  (restrictmiddle_middle-1 nil 3399299728
   ("" (auto-rewrite-theory "sets")
    (("" (auto-rewrite "USER_TCC2")
      (("" (skolem!)
        (("" (prop)
          (("" (expand "RankUser")
            (("" (interleaving2)
              (("" (expand "UROLE_MIDDLE")
                (("" (typepred "P!1" "i!2`1")
                  (("" (choice3)
                    (("1" (prefix)
                      (("1" (delete 2 3)
                        (("1" (prefix)
                          (("1" (delete - 2 3)
                            (("1" (expand "rho_middle")
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (delete 3)
                            (("2" (prefix)
                              (("1"
                                (delete 2 3)
                                (("1"
                                  (expand "R_middle")
                                  (("1"
                                    (comment
                                     "the process is either blocked on R or continues")
                                    (("1"
                                      (case
                                       "i!2`1=i!1 AND append(i!3`3,cons(u!1,i!3`4))=hu_list AND car(i!3`1)=n_init")
                                      (("1"
                                        (delete -2 -3 -4 -5 1 3)
                                        (("1" (ground) nil nil))
                                        nil)
                                       ("2"
                                        (delete 3)
                                        (("2"
                                          (comment
                                           "first and foremost, let us prove that i!2`2 /= n_init")
                                          (("2"
                                            (case "i!2`2 /= n_init")
                                            (("1"
                                              (expand "rho_middle" -2)
                                              (("1"
                                                (grind
                                                 :exclude
                                                 ("rho_middle"
                                                  "remove"))
                                                (("1"
                                                  (comment
                                                   "due to -1 (and i!2`2 /= n_init), 3 will be satisfied")
                                                  (("1"
                                                    (delete 2)
                                                    (("1"
                                                      (lemma
                                                       "listprops[Nonce].elt_append3"
                                                       ("l1"
                                                        "i!3`1"
                                                        "l2"
                                                        "(: i!2`2 :)"
                                                        "t"
                                                        "n_init"))
                                                      (("1"
                                                        (lemma
                                                         "listprops[Nonce].elt_singleton"
                                                         ("t1"
                                                          "i!2`2"
                                                          "t2"
                                                          "n_init"))
                                                        (("1"
                                                          (grind
                                                           :exclude
                                                           "elt")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    ";;; due to -1 (and i!2`2 /= n_init), 3 will be satisfied"))
                                                  nil)
                                                 ("2"
                                                  (comment
                                                   "2 follows from -6")
                                                  (("2"
                                                    (delete
                                                     -1
                                                     -2
                                                     -3
                                                     -4
                                                     -5
                                                     -7
                                                     -8
                                                     -9
                                                     1
                                                     3
                                                     4)
                                                    (("2"
                                                      (mdecompose-equality
                                                       -1)
                                                      nil
                                                      nil))
                                                    ";;; 2 follows from -6"))
                                                  nil)
                                                 ("3"
                                                  (comment
                                                   "due to -1 (and i!2`2 /= n_init), 3 will be satisfied")
                                                  (("3"
                                                    (delete 2)
                                                    (("3"
                                                      (lemma
                                                       "listprops[Nonce].elt_append3"
                                                       ("l1"
                                                        "i!3`1"
                                                        "l2"
                                                        "(: i!2`2 :)"
                                                        "t"
                                                        "n_init"))
                                                      (("3"
                                                        (lemma
                                                         "listprops[Nonce].elt_singleton"
                                                         ("t1"
                                                          "i!2`2"
                                                          "t2"
                                                          "n_init"))
                                                        (("3"
                                                          (grind
                                                           :exclude
                                                           "elt")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    ";;; due to -1 (and i!2`2 /= n_init), 3 will be satisfied"))
                                                  nil)
                                                 ("4"
                                                  (typepred
                                                   "i!3`1"
                                                   "i!3`3"
                                                   "i!3`4"
                                                   "hu_list"
                                                   "i!1")
                                                  (("4"
                                                    (delete
                                                     -1
                                                     -3
                                                     -5
                                                     -7
                                                     -10
                                                     -12
                                                     -14
                                                     -19
                                                     1
                                                     3)
                                                    (("4"
                                                      (comment
                                                       "1 follows from -10")
                                                      (("4"
                                                        (decompose-equality
                                                         -9)
                                                        (("4"
                                                          (decompose-equality
                                                           -10)
                                                          (("4"
                                                            (decompose-equality
                                                             -1)
                                                            (("4"
                                                              (decompose-equality
                                                               -2)
                                                              (("4"
                                                                (comment
                                                                 "establish some obvious equalities")
                                                                (("4"
                                                                  (case
                                                                   "P!1=p AND j!1=i!2`1 AND length(append(i!3`3, cons(u!1, i!3`4)))=p")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace*
                                                                       -1)
                                                                      (("1"
                                                                        (replace*
                                                                         -2)
                                                                        (("1"
                                                                          (replace*
                                                                           -6)
                                                                          (("1"
                                                                            (delete
                                                                             -1
                                                                             -2
                                                                             -5
                                                                             -6)
                                                                            (("1"
                                                                              (comment
                                                                               "prove equality of lists by equality of length and elements")
                                                                              (("1"
                                                                                (rewrite
                                                                                 "length_nth_equality[Identity]"
                                                                                 1)
                                                                                (("1"
                                                                                  (skolem-typepred)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "listprops[Identity].equality_nth"
                                                                                     ("l1"
                                                                                      "append(i!3`3, i!3`4)"
                                                                                      "l2"
                                                                                      "remove(hu_list, i!2`1)"))
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "listprops[Identity].nth_remove"
                                                                                         ("l"
                                                                                          "hu_list"
                                                                                          "i"
                                                                                          "i!2`1"))
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "listprops[Identity].nth_append"
                                                                                           ("l1"
                                                                                            "i!3`3"
                                                                                            "l2"
                                                                                            "i!3`4"))
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "listprops[Identity].nth_append"
                                                                                             ("l1"
                                                                                              "i!3`3"
                                                                                              "l2"
                                                                                              "cons(hu(i!2`1), i!3`4)"
                                                                                              "i"
                                                                                              "i!4"))
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (delete
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "i!4<i!2`1 OR i!4=i!2`1 OR i!4>i!2`1")
                                                                                                  (("1"
                                                                                                    (delete
                                                                                                     -7
                                                                                                     -8
                                                                                                     -13
                                                                                                     -14
                                                                                                     -15
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (grind
                                                                                                       :exclude
                                                                                                       ("append"
                                                                                                        "remove"))
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (delete
                                                                                                     -
                                                                                                     2
                                                                                                     3
                                                                                                     4)
                                                                                                    (("2"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                ";;; prove equality of lists by equality of length and elements"))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "listprops[Identity].equality_length"
                                                                     ("l1"
                                                                      "append(i!3`3, i!3`4)"
                                                                      "l2"
                                                                      "remove(hu_list, j!1)"))
                                                                    (("2"
                                                                      (rewrite
                                                                       "length_append"
                                                                       -1)
                                                                      (("2"
                                                                        (rewrite
                                                                         "length_remove"
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        (("2"
                                                                          (replace
                                                                           -3
                                                                           -5)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -5)
                                                                            (("2"
                                                                              (replace
                                                                               -11
                                                                               -5)
                                                                              (("2"
                                                                                (ground)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   "length_append")
                                                                                  (("2"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  ";;; establish some obvious equalities"))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        ";;; 1 follows from -10"))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (comment
                                                   "due to -1 (and i!2`2 /= n_init), 3 will be satisfied")
                                                  (("5"
                                                    (delete 2)
                                                    (("5"
                                                      (lemma
                                                       "listprops[Nonce].elt_append3"
                                                       ("l1"
                                                        "i!3`1"
                                                        "l2"
                                                        "(: i!2`2 :)"
                                                        "t"
                                                        "n_init"))
                                                      (("5"
                                                        (lemma
                                                         "listprops[Nonce].elt_singleton"
                                                         ("t1"
                                                          "i!2`2"
                                                          "t2"
                                                          "n_init"))
                                                        (("5"
                                                          (grind
                                                           :exclude
                                                           "elt")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    ";;; due to -1 (and i!2`2 /= n_init), 3 will be satisfied"))
                                                  nil)
                                                 ("6"
                                                  (typepred
                                                   "i!3`1"
                                                   "i!3`3"
                                                   "i!3`4"
                                                   "hu_list"
                                                   "i!1")
                                                  (("6"
                                                    (delete
                                                     -1
                                                     -3
                                                     -5
                                                     -7
                                                     -10
                                                     -12
                                                     -14
                                                     -19
                                                     1)
                                                    (("6"
                                                      (comment
                                                       "this is the case of the run under consideration, so 2 must be proven by showing the parameters satisfy the EXISTS quantor in rho")
                                                      (("6"
                                                        (decompose-equality
                                                         -9)
                                                        (("6"
                                                          (decompose-equality
                                                           -10)
                                                          (("6"
                                                            (decompose-equality
                                                             -1)
                                                            (("6"
                                                              (decompose-equality
                                                               -2)
                                                              (("6"
                                                                (comment
                                                                 "establish some obvious equalities")
                                                                (("6"
                                                                  (case
                                                                   "P!1=p AND j!1=i!2`1")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace*
                                                                       -1
                                                                       -2
                                                                       -5)
                                                                      (("1"
                                                                        (delete
                                                                         -1
                                                                         -2
                                                                         -5)
                                                                        (("1"
                                                                          (grind
                                                                           :if-match
                                                                           nil
                                                                           :exclude
                                                                           "remove")
                                                                          (("1"
                                                                            (comment
                                                                             "car(i!3`4)=hu(i!2`1+1), according to -2")
                                                                            (("1"
                                                                              (inst
                                                                               2
                                                                               "i!2`1+1")
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "listprops[Identity].equality_nth"
                                                                                     ("l1"
                                                                                      "append(i!3`3, i!3`4)"
                                                                                      "l2"
                                                                                      "remove(hu_list, i!2`1)"))
                                                                                    (("1"
                                                                                      (prop)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "i!2`1")
                                                                                        (("1"
                                                                                          (rewrite
                                                                                           "nth_append"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (stop-rewrite
                                                                                             "nth")
                                                                                            (("1"
                                                                                              (rewrite
                                                                                               "nth_remove"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -8
                                                                                                 "1+i!2`1")
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   -2
                                                                                                   -3
                                                                                                   -4
                                                                                                   -5
                                                                                                   -6
                                                                                                   -7
                                                                                                   -9
                                                                                                   -10
                                                                                                   -11
                                                                                                   -12
                                                                                                   -13
                                                                                                   -14
                                                                                                   2
                                                                                                   3)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (rewrite
                                                                                           "length_append"
                                                                                           1)
                                                                                          (("2"
                                                                                            (delete
                                                                                             -1
                                                                                             -2
                                                                                             -3
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9
                                                                                             -10
                                                                                             -11
                                                                                             -12
                                                                                             2
                                                                                             3
                                                                                             4)
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   1
                                                                                   "append(l!1, (: i!2`2 :))")
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("1"
                                                                                        (comment
                                                                                         "establish a convenient truth")
                                                                                        (("1"
                                                                                          (case
                                                                                           "length(append(i!3`3, cons(hu(i!2`1), cdr(i!3`4))))=p-1")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "length_nth_equality[Identity]"
                                                                                             1)
                                                                                            (("1"
                                                                                              (delete
                                                                                               -2
                                                                                               -3
                                                                                               -4
                                                                                               -5
                                                                                               -6
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11
                                                                                               -12
                                                                                               -13
                                                                                               -14
                                                                                               2
                                                                                               3
                                                                                               4)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "length_remove"
                                                                                                   1
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (ground)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skolem-typepred)
                                                                                              (("2"
                                                                                                (delete
                                                                                                 -3
                                                                                                 -5
                                                                                                 -10
                                                                                                 -11
                                                                                                 -12
                                                                                                 -13
                                                                                                 2
                                                                                                 3
                                                                                                 4)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "listprops[Identity].equality_nth"
                                                                                                   ("l1"
                                                                                                    "append(i!3`3, i!3`4)"
                                                                                                    "l2"
                                                                                                    "remove(hu_list, i!2`1)"))
                                                                                                  (("2"
                                                                                                    (prop)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "listprops[Identity].nth_append"
                                                                                                       ("l1"
                                                                                                        "i!3`3"
                                                                                                        "l2"
                                                                                                        "cons(hu(i!2`1), cdr(i!3`4))"
                                                                                                        "i"
                                                                                                        "i!5"))
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (delete
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "listprops[Identity].nth_remove"
                                                                                                             ("l"
                                                                                                              "hu_list"
                                                                                                              "i"
                                                                                                              "1+i!2`1"
                                                                                                              "j"
                                                                                                              "i!5"))
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (delete
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "listprops[Identity].nth_append"
                                                                                                                   ("l1"
                                                                                                                    "i!3`3"
                                                                                                                    "l2"
                                                                                                                    "i!3`4"))
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "listprops[Identity].nth_remove"
                                                                                                                     ("l"
                                                                                                                      "hu_list"
                                                                                                                      "i"
                                                                                                                      "i!2`1"))
                                                                                                                    (("1"
                                                                                                                      (grind
                                                                                                                       :exclude
                                                                                                                       ("append"
                                                                                                                        "remove"))
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (delete
                                                                                                         -1
                                                                                                         -4
                                                                                                         -7
                                                                                                         -8
                                                                                                         -9
                                                                                                         -10
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "length_cdr")
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (rewrite
                                                                                             "length_append")
                                                                                            (("2"
                                                                                              (delete
                                                                                               -1
                                                                                               -2
                                                                                               -3
                                                                                               -6
                                                                                               -7
                                                                                               -8
                                                                                               -9
                                                                                               -10
                                                                                               -11
                                                                                               -12
                                                                                               -13
                                                                                               2
                                                                                               3
                                                                                               4)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "length_cdr")
                                                                                                (("2"
                                                                                                  (ground)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          ";;; establish a convenient truth"))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (delete
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     -4
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     -13
                                                                                     2
                                                                                     3)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "length_append"
                                                                                       1)
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              ";;; car(i!3`4)=hu(i!2`1+1), according to -2"))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -2
                                                                     -4)
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -4)
                                                                      (("2"
                                                                        (replace
                                                                         -10
                                                                         -4)
                                                                        (("2"
                                                                          (lemma
                                                                           "listprops[Identity].equality_length"
                                                                           ("l1"
                                                                            "append(i!3`3, i!3`4)"
                                                                            "l2"
                                                                            "remove(hu_list, j!1)"))
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_append"
                                                                             -1)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_remove"
                                                                               -1
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (delete
                                                                                 -3
                                                                                 -4
                                                                                 -9
                                                                                 -10
                                                                                 -11
                                                                                 -12
                                                                                 -13
                                                                                 -14
                                                                                 2
                                                                                 3
                                                                                 4)
                                                                                (("2"
                                                                                  (ground)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  ";;; establish some obvious equalities"))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        ";;; this is the case of the run under consideration, so 2 must be proven by showing the parameters satisfy the EXISTS quantor in rho"))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete -1 -2 -4 2 3 4)
                                              (("2"
                                                (typepred "i!2`2")
                                                (("2"
                                                  (lemma
                                                   "n_prop"
                                                   ("P"
                                                    "P!1"
                                                    "u"
                                                    "u!1"
                                                    "r"
                                                    "i!2`1"))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            ";;; first and foremost, let us prove that i!2`2 /= n_init"))
                                          nil))
                                        nil))
                                      ";;; the process is either blocked on R or continues"))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (delete 2 3 4)
                                (("2"
                                  (prefix)
                                  (("2"
                                    (delete 2 3)
                                    (("2"
                                      (expand "LastMessage")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (prefix)
                                            (("1"
                                              (delete -3 2 3)
                                              (("1"
                                                (lemma
                                                 "listprops[Nonce].elt_append2"
                                                 ("l1"
                                                  "(: i!2`2:)"
                                                  "l2"
                                                  "i!3`2"
                                                  "t"
                                                  "n_init"))
                                                (("1"
                                                  (grind
                                                   :if-match
                                                   nil
                                                   :exclude
                                                   "elt")
                                                  (("1"
                                                    (decompose-equality
                                                     -9)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete - 2 3)
                                              (("2" (stop) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (prefix)
                                            (("1"
                                              (delete -2 2 3)
                                              (("1"
                                                (lemma
                                                 "listprops[Nonce].elt_append2"
                                                 ("l1"
                                                  "(: i!2`2:)"
                                                  "l2"
                                                  "i!3`2"
                                                  "t"
                                                  "n_init"))
                                                (("1"
                                                  (grind
                                                   :if-match
                                                   nil
                                                   :exclude
                                                   "elt")
                                                  (("1"
                                                    (decompose-equality
                                                     -8)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete - 2 3)
                                              (("2" (stop) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete 3)
                      (("2" (nonemptylist "i!3`4") nil nil)) nil)
                     ("3" (delete 3)
                      (("3" (nonemptylist "i!3`1") nil nil)) nil)
                     ("4" (delete 2 3)
                      (("4" (nonemptylist "i!3`3") nil nil)) nil)
                     ("5" (delete 2 3)
                      (("5" (skolem-typepred)
                        (("5" (delete -1 -2 -3 -4 -5 -6 -7)
                          (("5" (nonemptylist "il2!1") nil nil)) nil))
                        nil))
                      nil)
                     ("6" (delete 2 3)
                      (("6" (skolem-typepred)
                        (("6" (delete -1 -3 -4 -5 -6 -7 -8)
                          (("6" (nonemptylist "nl1!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[list[event]]" dynetwork nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes lib)
    (LastMessage const-decl "event" gnsl_init nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_init nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (append def-decl "list[T]" list_props nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_init nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_init
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_init nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_init
     nil)
    (E const-decl "Message" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (>> const-decl "process" processes lib)
    (restriction_choice3 formula-decl nil restriction_rules2 lib)
    (uniform3_choice2 formula-decl nil uniform_props2 lib)
    (elt_append2 formula-decl nil listprops nil)
    (restriction_stop formula-decl nil restriction_rules lib)
    (elt_singleton formula-decl nil listprops nil)
    (remove def-decl "list[T]" listprops nil)
    (elt_append3 formula-decl nil listprops nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_init
     nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_init
     nil)
    (equality_length formula-decl nil listprops nil)
    (length_remove formula-decl nil listprops nil)
    (length_append formula-decl nil more_list_props lib)
    (length_nth_equality formula-decl nil listprops nil)
    (equality_nth formula-decl nil listprops nil)
    (nth_remove formula-decl nil listprops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_init nil)
    (u!1 skolem-const-decl "Identity" gnsl_init nil)
    (i!2 skolem-const-decl "[k: nat_1_to(P!1), Nonces(P!1, u!1, k)]"
     gnsl_init nil)
    (i!3 skolem-const-decl "[{x: list[Nonce] | length(x) = i!2`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!2`1},
 {x: list[Identity] | length(x) = i!2`1},
 {x: list[Identity] | length(x) = P!1 - 1 - i!2`1}]" gnsl_init nil)
    (i!4 skolem-const-decl
     "below[length[Identity](append(i!3`3, cons(hu(i!2`1), i!3`4)))]"
     gnsl_init nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (nth_append formula-decl nil listprops nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_init
     nil)
    (Message_public_extensionality formula-decl nil gnsl_init nil)
    (Message_conc_extensionality formula-decl nil gnsl_init nil)
    (length_cdr formula-decl nil more_list_props lib)
    (i!5 skolem-const-decl
     "below[length[Identity](append(i!3`3, cons(hu(i!2`1), cdr(i!3`4))))]"
     gnsl_init nil)
    (Message_ilist_extensionality formula-decl nil gnsl_init nil)
    (l!1 skolem-const-decl "{x: list[Nonce] | length(x) = j!1 - 1}"
     gnsl_init nil)
    (j!1 skolem-const-decl "{x: nat | 0 < x AND x <= i!1}" gnsl_init
     nil)
    (i!1 skolem-const-decl "nat_1_to(p)" gnsl_init nil)
    (elt const-decl "bool" listprops nil)
    (n_prop formula-decl nil gnsl_init nil)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil)
    (hu_list const-decl "{x: list[Identity] |
   (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_init nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (uniform_prefix2 formula-decl nil uniform_props lib)
    (uniform_stop2 formula-decl nil uniform_props lib)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restriction_pref formula-decl nil restriction_rules lib)
    (length_non_zero formula-decl nil more_list_props lib)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (uniform2_interleave2 formula-decl nil uniform_props3 lib)
    (|#| const-decl "process[T]" restriction_rules lib)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_middle def-decl "bool" gnsl_init nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (restriction_free_par2 formula-decl nil restriction_rules3 lib)
    (set type-eq-decl nil sets nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (R_middle const-decl "set[event]" gnsl_init nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes lib)
    (process type-eq-decl nil processes lib)
    (nat_from_3 type-eq-decl nil gnsl_init nil)
    (UROLE_MIDDLE const-decl "process[event]" gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (Message type-decl nil gnsl_init nil)
    (INIT const-decl "bool" gnsl_init nil)
    (\|- const-decl "bool" gnsl_init nil)
    (event type-decl nil dynetwork nil)
    (USER_TCC2 existence-tcc nil gnsl_init nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (restrictmiddle_last 0
  (restrictmiddle_last-1 nil 3399224676
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (expand "RankUser")
        (("" (interleaving2)
          (("" (expand "UROLE_LAST")
            (("" (typepred "P!1")
              (("" (choice3)
                (("1" (prefix)
                  (("1" (delete 2 3)
                    (("1" (prefix)
                      (("1" (delete - 2 3)
                        (("1" (expand "rho_middle")
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (delete 2 3)
                        (("2" (prefix)
                          (("1" (delete 2 3)
                            (("1"
                              (comment "first, let's establish that i!2 /= n_init")
                              (("1"
                                (case "i!2 /= n_init")
                                (("1"
                                  (expand "rho_middle" -2)
                                  (("1"
                                    (grind
                                     :exclude
                                     ("rho_middle" "remove"))
                                    (("1"
                                      (comment
                                       "due to -1 (and i!2 /= n_init), 2 will be satisfied")
                                      (("1"
                                        (lemma
                                         "listprops[Nonce].elt_append3"
                                         ("l1"
                                          "i!3`1"
                                          "l2"
                                          "(: i!2 :)"
                                          "t"
                                          "n_init"))
                                        (("1"
                                          (lemma
                                           "listprops[Nonce].elt_singleton"
                                           ("t1" "i!2" "t2" "n_init"))
                                          (("1"
                                            (grind :exclude "elt")
                                            nil
                                            nil))
                                          nil))
                                        ";;; due to -1 (and i!2 /= n_init), 2 will be satisfied"))
                                      nil)
                                     ("2"
                                      (comment
                                       "in this case, the received message is in rho because it contains n_init and is 'escaped' in rho ")
                                      (("2"
                                        (comment
                                         "this cannot be the case for the last user (p-1), so there must be a contradiction in the assumptions")
                                        (("2"
                                          (typepred
                                           "i!3`1"
                                           "i!3`2"
                                           "hu_list"
                                           "i!1")
                                          (("2"
                                            (delete
                                             -1
                                             -3
                                             -5
                                             -7
                                             -8
                                             -10
                                             -12
                                             -14
                                             -16
                                             +)
                                            (("2"
                                              (comment
                                               "the contradiction lies in -6")
                                              (("2"
                                                (case
                                                 "P!1=p AND j!1=P!1-1")
                                                (("1"
                                                  (delete
                                                   -2
                                                   -3
                                                   -4
                                                   -6
                                                   -8)
                                                  (("1"
                                                    (ground)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (decompose-equality
                                                   -7)
                                                  (("2"
                                                    (decompose-equality
                                                     -1)
                                                    (("2"
                                                      (decompose-equality
                                                       -2)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (delete
                                                           -2
                                                           -3
                                                           -6
                                                           -7
                                                           -8)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -2)
                                                            (("1"
                                                              (rewrite
                                                               "length_remove"
                                                               -2
                                                               ("c"
                                                                "hu_list"
                                                                "i"
                                                                "j!1")
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (ground)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete
                                                           -1
                                                           -4
                                                           -5
                                                           -6
                                                           -8)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             -2)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -2)
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 -2)
                                                                (("2"
                                                                  (simplify
                                                                   -2)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                ";;; the contradiction lies in -6"))
                                              nil))
                                            nil))
                                          ";;; this cannot be the case for the last user (p-1), so there must be a contradiction in the assumptions"))
                                        ";;; in this case, the received message is in rho because it contains n_init and is 'escaped' in rho "))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (delete - 2)
                                  (("2"
                                    (typepred "i!2")
                                    (("2"
                                      (lemma
                                       "n_prop"
                                       ("P"
                                        "P!1"
                                        "u"
                                        "u!1"
                                        "r"
                                        "P!1-1"))
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                ";;; first, let's establish that i!2 /= n_init"))
                              nil))
                            nil)
                           ("2" (delete 2 3)
                            (("2" (prefix)
                              (("2"
                                (delete 2 3)
                                (("2" (stop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete - 2) (("2" (grind) nil nil)) nil)
                 ("3" (delete - 2)
                  (("3" (nonemptylist "i!3`2") nil nil)) nil)
                 ("4" (delete - 2)
                  (("4" (nonemptylist "i!3`1") nil nil)) nil)
                 ("5" (typepred "i!3`2")
                  (("5" (delete -1 -3 2) (("5" (ground) nil nil)) nil))
                  nil)
                 ("6" (delete -1 2) (("6" (grind) nil nil)) nil)
                 ("7" (delete 2)
                  (("7" (skolem!) (("7" (nonemptylist "il!1") nil nil))
                    nil))
                  nil)
                 ("8" (delete - 2)
                  (("8" (skolem!) (("8" (nonemptylist "nl!1") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[list[event]]" dynetwork nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes lib)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_init nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_init nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_init
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_init nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_init
     nil)
    (E const-decl "Message" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (>> const-decl "process" processes lib)
    (restriction_choice3 formula-decl nil restriction_rules2 lib)
    (uniform3_choice2 formula-decl nil uniform_props2 lib)
    (restriction_stop formula-decl nil restriction_rules lib)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (elt_append3 formula-decl nil listprops nil)
    (remove def-decl "list[T]" listprops nil)
    (elt_singleton formula-decl nil listprops nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_init
     nil)
    (length_remove formula-decl nil listprops nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_init
     nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (hu_list const-decl "{x: list[Identity] |
   (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_init nil)
    (n_prop formula-decl nil gnsl_init nil)
    (uniform_prefix2 formula-decl nil uniform_props lib)
    (uniform_stop2 formula-decl nil uniform_props lib)
    (restriction_pref formula-decl nil restriction_rules lib)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (uniform2_interleave2 formula-decl nil uniform_props3 lib)
    (|#| const-decl "process[T]" restriction_rules lib)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_middle def-decl "bool" gnsl_init nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (restriction_free_par2 formula-decl nil restriction_rules3 lib)
    (set type-eq-decl nil sets nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (R_middle const-decl "set[event]" gnsl_init nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes lib)
    (process type-eq-decl nil processes lib)
    (UROLE_LAST const-decl "process[event]" gnsl_init nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (Message type-decl nil gnsl_init nil)
    (INIT const-decl "bool" gnsl_init nil)
    (\|- const-decl "bool" gnsl_init nil)
    (event type-decl nil dynetwork nil))
   nil))
 (authentication_middle 0
  (authentication_middle-1 nil 3399299197
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      ((""
        (rewrite "authentication_by_rank" + ("rho" "rho_middle(i!1)"))
        (("1" (delete 2)
          (("1" (comment "intruder's initial knowledge is in rho")
            (("1" (skolem!)
              (("1" (prop)
                (("1" (expand "INIT")
                  (("1" (expand "rho_middle") (("1" (smash) nil nil))
                    nil))
                  nil))
                nil))
              ";;; intruder's initial knowledge is in rho"))
            nil))
          nil)
         ("2" (delete 2)
          (("2"
            (comment "from of a set of messages in rho, no message not in rho can be generated")
            (("2" (expand "|-")
              (("2" (rule-induct "Gen")
                (("2" (skolem!)
                  (("2" (smash)
                    (("1" (inst -2 "m!2") (("1" (prop) nil nil)) nil)
                     ("2" (delete -2)
                      (("2" (skolem!)
                        (("2" (prop)
                          (("2" (replace -3 1)
                            (("2" (expand "rho_middle" 1)
                              (("2" (prop) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (delete -2)
                      (("3" (skolem!)
                        (("3" (expand "rho_middle" -1)
                          (("3" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("4" (delete -2)
                      (("4" (skolem!)
                        (("4" (expand "rho_middle" -1)
                          (("4" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("5" (delete -2)
                      (("5" (skolem!)
                        (("5" (flatten)
                          (("5" (expand "rho_middle" -1)
                            (("5" (replace -2 1)
                              (("5"
                                (expand "rho_middle")
                                (("5"
                                  (delete -2)
                                  (("5" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (delete -2)
                      (("6" (skolem!)
                        (("6" (prop)
                          (("6" (replace -2 1)
                            (("6" (delete -2)
                              (("6"
                                (expand "rho_middle")
                                (("6"
                                  (expand "elt")
                                  (("6"
                                    (inst 1 "0")
                                    (("1" (grind :exclude 2) nil nil)
                                     ("2"
                                      (delete 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("7" (delete -2)
                      (("7" (skolem!)
                        (("7" (prop)
                          (("7" (replace -3 1)
                            (("7" (delete -3)
                              (("7"
                                (expand "rho_middle")
                                (("7"
                                  (lemma
                                   "listprops[Nonce].elt_append3"
                                   ("l1"
                                    "nl1!1"
                                    "l2"
                                    "nl2!1"
                                    "t"
                                    "n_init"))
                                  (("7" (prop) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("8" (delete -2)
                      (("8" (skolem!)
                        (("8" (prop)
                          (("8" (replace -3 1)
                            (("8" (delete -3)
                              (("8"
                                (replace -2 -1)
                                (("8"
                                  (delete -2)
                                  (("8"
                                    (expand "rho_middle")
                                    (("8"
                                      (lemma
                                       "listprops[Nonce].elt_append1"
                                       ("l1"
                                        "nl1!1"
                                        "l2"
                                        "nl2!1"
                                        "t"
                                        "n_init"))
                                      (("8" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("9" (delete -2)
                      (("9" (skolem!)
                        (("9" (prop)
                          (("9" (replace -3 1)
                            (("9" (delete -3)
                              (("9"
                                (replace -2 -1)
                                (("9"
                                  (delete -2)
                                  (("9"
                                    (expand "rho_middle")
                                    (("9"
                                      (lemma
                                       "listprops[Nonce].elt_append2"
                                       ("l1"
                                        "nl1!1"
                                        "l2"
                                        "nl2!1"
                                        "t"
                                        "n_init"))
                                      (("9" (prop) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("10" (delete -2)
                      (("10" (skolem!)
                        (("10" (prop)
                          (("10" (replace -2 1)
                            (("10" (delete -1 -2)
                              (("10"
                                (expand "rho_middle")
                                (("10" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("11" (delete -2)
                      (("11" (skolem!)
                        (("11" (prop)
                          (("11" (replace -2 1)
                            (("11" (delete -1 -2)
                              (("11"
                                (expand "rho_middle")
                                (("11" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("12" (delete -2)
                      (("12" (skolem!)
                        (("12" (prop)
                          (("12" (replace -3 1)
                            (("12" (delete -1 -2 -3)
                              (("12"
                                (expand "rho_middle")
                                (("12" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("13" (delete -2)
                      (("13" (skolem!)
                        (("13" (prop)
                          (("13" (replace -3 1)
                            (("13" (delete -1 -2 -3)
                              (("13"
                                (expand "rho_middle")
                                (("13" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("14" (delete -2)
                      (("14" (skolem!)
                        (("14" (prop)
                          (("14" (replace -3 1)
                            (("14" (delete -1 -2 -3)
                              (("14"
                                (expand "rho_middle")
                                (("14" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("15" (delete -2)
                      (("15" (skolem!)
                        (("15" (prop)
                          (("15" (replace -3 1)
                            (("15" (delete -3)
                              (("15"
                                (typepred "k!1")
                                (("15"
                                  (split)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (expand "rho_middle" -3)
                                    (("2"
                                      (assert)
                                      (("2" (lazy-grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              ";;; from of a set of messages in rho, no message not in rho can be generated"))
            nil))
          nil)
         ("3" (delete 2)
          (("3" (comment "users maintain the rank function")
            (("3" (skolem!)
              (("3" (expand "USER")
                (("3" (expand "RankUser")
                  (("3" (interleaving2)
                    (("3" (interleaving)
                      (("1" (interleaving)
                        (("1"
                          (lemma "restrictmiddle_init"
                           ("P" "i!3" "u" "i!2" "i" "i!1"))
                          (("1"
                            (grind :exclude
                             ("rho_middle" "UROLE_INIT"))
                            nil nil))
                          nil)
                         ("2"
                          (lemma "restrictmiddle_last"
                           ("P" "i!3" "u" "i!2" "i" "i!1"))
                          (("2"
                            (grind :exclude
                             ("rho_middle" "UROLE_LAST"))
                            nil nil))
                          nil))
                        nil)
                       ("2" (lift-if)
                        (("2" (prop)
                          (("1" (stop) nil nil)
                           ("2"
                            (lemma "restrictmiddle_middle"
                             ("P" "i!3" "u" "i!2" "i" "i!1"))
                            (("2"
                              (grind :exclude
                               ("rho_middle" "UROLE_MIDDLE"))
                              nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              ";;; users maintain the rank function"))
            nil))
          nil)
         ("4" (delete 2)
          (("4" (comment "T is not in rho")
            (("4" (skolem-typepred)
              (("4" (expand "T")
                (("4" (replace -1 -2)
                  (("4" (delete -1) (("4" (grind) nil nil)) nil)) nil))
                nil))
              ";;; T is not in rho"))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((authentication_by_rank formula-decl nil dynetwork nil)
    (event type-decl nil dynetwork nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (set type-eq-decl nil sets nil)
    (R_middle const-decl "set[event]" gnsl_init nil)
    (T const-decl "set[event]" gnsl_init nil)
    (rho_middle def-decl "bool" gnsl_init nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes lib)
    (process type-eq-decl nil processes lib)
    (USER const-decl "process[event]" gnsl_init nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Message type-decl nil gnsl_init nil)
    (INIT const-decl "bool" gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (\|- const-decl "bool" gnsl_init nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (Gen_weak_induction formula-decl nil gnsl_init nil)
    (/= const-decl "boolean" notequal nil)
    (elt const-decl "bool" listprops nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (n!1 skolem-const-decl "Nonce" gnsl_init nil)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (elt_append3 formula-decl nil listprops nil)
    (elt_append1 formula-decl nil listprops nil)
    (elt_append2 formula-decl nil listprops nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (E const-decl "Message" gnsl_init nil)
    (remove def-decl "list[T]" listprops nil)
    (UROLE_MIDDLE const-decl "process[event]" gnsl_init nil)
    (nat_from_3 type-eq-decl nil gnsl_init nil)
    (Stop const-decl "process" processes lib)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (UROLE_LAST const-decl "process[event]" gnsl_init nil)
    (UROLE_INIT const-decl "process[event]" gnsl_init nil)
    (Interleave const-decl "process[T]" multipar lib)
    (// const-decl "process" processes lib)
    (restriction_free_par2 formula-decl nil restriction_rules3 lib)
    (uniform2_interleave2 formula-decl nil uniform_props3 lib)
    (|#| const-decl "process[T]" restriction_rules lib)
    (pred type-eq-decl nil defined_types nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (complement const-decl "set" sets nil)
    (restrictmiddle_middle formula-decl nil gnsl_init nil)
    (uniform_stop2 formula-decl nil uniform_props lib)
    (restriction_stop formula-decl nil restriction_rules lib)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (\|> const-decl "bool" satisfaction lib)
    (Par const-decl "process" processes lib)
    (restrictmiddle_init formula-decl nil gnsl_init nil)
    (restrictmiddle_last formula-decl nil gnsl_init nil)
    (uniform_interleave2 formula-decl nil uniform_props lib)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restriction_free_par formula-decl nil restriction_rules lib)
    (RankUser const-decl "setof[list[event]]" dynetwork nil))
   nil))
 (restrictlast_init 0
  ("restrictlast_init-1" "" 3399222475
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (expand "RankUser")
        (("" (interleaving2)
          (("" (expand "UROLE_INIT")
            (("" (lift-if)
              (("" (prop)
                (("1" (typepred "p")
                  (("1" (choice3)
                    (("1" (comment "establish obvious equalities")
                      (("1" (case "u!1 = hu(0) AND p = P!1")
                        (("1" (flatten)
                          (("1" (replace -1 1)
                            (("1" (replace -2 1 rl)
                              (("1"
                                (replace -4 1)
                                (("1"
                                  (delete -1 -4)
                                  (("1"
                                    (prefix)
                                    (("1"
                                      (delete 2 3)
                                      (("1"
                                        (grind :if-match nil)
                                        (("1"
                                          (comment
                                           "hu(0) sends a message (that is `escaped' in rho) to hu(1)")
                                          (("1"
                                            (inst 1 "1")
                                            (("1"
                                              (split)
                                              (("1"
                                                (comment
                                                 "prove that the intended recipient is 1")
                                                (("1"
                                                  (decompose-equality
                                                   1)
                                                  (("1"
                                                    (typepred "i!2`2")
                                                    (("1"
                                                      (delete
                                                       -1
                                                       -2
                                                       -4
                                                       -5
                                                       -6)
                                                      (("1"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  ";;; prove that the intended recipient is 1"))
                                                nil)
                                               ("2"
                                                (comment
                                                 "prove that the message has the right structure")
                                                (("2"
                                                  (inst 1 "null")
                                                  (("2"
                                                    (decompose-equality
                                                     1)
                                                    (("2"
                                                      (decompose-equality
                                                       1)
                                                      (("2"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "hu_list")
                                                          (("1"
                                                            (delete
                                                             -1
                                                             -2
                                                             -4
                                                             -5
                                                             -6)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "0")
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (delete -1)
                                                          (("2"
                                                            (comment
                                                             "prove that the two lists are equal by showing that their lengths and elements are equal")
                                                            (("2"
                                                              (typepred
                                                               "i!2`2"
                                                               "hu_list")
                                                              (("2"
                                                                (delete
                                                                 -1
                                                                 -4)
                                                                (("2"
                                                                  (rewrite
                                                                   "length_nth_equality[Identity]")
                                                                  (("1"
                                                                    (delete
                                                                     -2
                                                                     -4
                                                                     -6
                                                                     2)
                                                                    (("1"
                                                                      (rewrite
                                                                       "length_cdr")
                                                                      (("1"
                                                                        (rewrite
                                                                         "length_cdr")
                                                                        (("1"
                                                                          (rewrite
                                                                           "length_cdr")
                                                                          (("1"
                                                                            (ground)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (delete
                                                                     -3
                                                                     -6
                                                                     2)
                                                                    (("2"
                                                                      (skolem-typepred)
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "i!4+1")
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "i!4+2")
                                                                          (("1"
                                                                            (delete
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (delete
                                                                             -3
                                                                             2)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_cdr")
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (delete
                                                                           -3
                                                                           2)
                                                                          (("2"
                                                                            (rewrite
                                                                             "length_cdr")
                                                                            (("2"
                                                                              (ground)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              ";;; prove that the two lists are equal by showing that their lengths and elements are equal"))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  ";;; prove that the message has the right structure"))
                                                nil))
                                              nil))
                                            ";;; hu(0) sends a message (that is `escaped' in rho) to hu(1)"))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (delete 2 3)
                                      (("2"
                                        (prefix)
                                        (("2"
                                          (delete -2 -3 +)
                                          (("2"
                                            (comment
                                             "-1 evaluates to false")
                                            (("2"
                                              (grind :if-match nil)
                                              (("1"
                                                (comment
                                                 "contradiction in terms -3 and -5")
                                                (("1"
                                                  (delete -1 -2 -4 -6)
                                                  (("1"
                                                    (decompose-equality
                                                     -2)
                                                    (("1"
                                                      (typepred "hu")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "0"
                                                         "i!3")
                                                        (("1"
                                                          (ground)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  ";;; contradiction in terms -3 and -5"))
                                                nil)
                                               ("2"
                                                (comment
                                                 "consequent 1 was a negated antecedent")
                                                (("2"
                                                  (inst 1 "0")
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  ";;; consequent 1 was a negated antecedent"))
                                                nil))
                                              ";;; -1 evaluates to false"))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (delete -1 2)
                          (("2" (typepred "i!1")
                            (("2"
                              (lemma "n_orig" ("P" "P!1" "u" "u!1"))
                              (("2" (ground) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (delete -2 2) (("3" (ground) nil nil))
                          nil))
                        ";;; establish obvious equalities"))
                      nil)
                     ("2" (typepred "i!2`2")
                      (("2" (delete -1 -3 -4 -5 2)
                        (("2" (ground) nil nil)) nil))
                      nil)
                     ("3" (delete - 2) (("3" (grind) nil nil)) nil)
                     ("4" (delete 2)
                      (("4" (nonemptylist "i!2`2") nil nil)) nil)
                     ("5" (delete -1 2)
                      (("5" (typepred "i!1")
                        (("5" (lemma "n_orig" ("P" "P!1" "u" "u!1"))
                          (("5" (ground) nil nil)) nil))
                        nil))
                      nil)
                     ("6" (delete - 2) (("6" (ground) nil nil)) nil)
                     ("7" (delete - 2) (("7" (grind) nil nil)) nil)
                     ("8" (skolem-typepred 1)
                      (("8" (delete -1 -2 -3 -5 -6 -7 2)
                        (("8" (nonemptylist "il!1") nil nil)) nil))
                      nil)
                     ("9" (delete -1 2)
                      (("9" (skolem!)
                        (("9" (typepred "i!1")
                          (("9" (lemma "n_orig" ("P" "P!1" "u" "u!1"))
                            (("9" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("10" (delete - 2)
                      (("10" (skolem!) (("10" (ground) nil nil)) nil))
                      nil)
                     ("11" (delete -1 2)
                      (("11" (skolem!)
                        (("11" (typepred i!1)
                          (("11" (lemma "n_orig" ("P" "P!1" "u" "u!1"))
                            (("11" (ground) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("12" (delete - 2)
                      (("12" (skolem!) (("12" (ground) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "P!1")
                  (("2" (choice3)
                    (("1" (prefix)
                      (("1" (delete 2 3) (("1" (grind) nil nil)) nil)
                       ("2" (delete 2 3)
                        (("2" (prefix)
                          (("2" (delete 2 3)
                            (("2" (prefix)
                              (("1"
                                (delete 2 3)
                                (("1"
                                  (expand "rho_last" -1)
                                  (("1"
                                    (grind :exclude "rho_last")
                                    (("1"
                                      (comment
                                       "-1 means that nonce n_init is not in the nlist")
                                      (("1"
                                        (delete -2)
                                        (("1"
                                          (expand "rho_last" -1)
                                          (("1"
                                            (lemma
                                             "listprops[Nonce].elt_append2"
                                             ("l1"
                                              "(: i!1 :)"
                                              "l2"
                                              "i!2`1"
                                              "t"
                                              "n_init"))
                                            (("1"
                                              (grind :exclude "elt")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        ";;; -1 means that nonce n_init is not in the nlist"))
                                      nil)
                                     ("2"
                                      (comment
                                       "i!1 = n_init is provable from -6")
                                      (("2"
                                        (mdecompose-equality -6)
                                        nil
                                        ";;; i!1 = n_init is provable from -6"))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (delete 2 3)
                                (("2"
                                  (prefix)
                                  (("1"
                                    (delete 2 3)
                                    (("1"
                                      (comment
                                       "1 and 2 are mutually exclusive")
                                      (("1"
                                        (grind)
                                        nil
                                        ";;; 1 and 2 are mutually exclusive"))
                                      nil))
                                    nil)
                                   ("2"
                                    (delete 2 3)
                                    (("2" (stop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete - 2 3)
                      (("2" (typepred "i!2`2") (("2" (ground) nil nil))
                        nil))
                      nil)
                     ("3" (delete - 2 3) (("3" (grind) nil nil)) nil)
                     ("4" (delete - 2 3)
                      (("4" (nonemptylist "i!2`2") nil nil)) nil)
                     ("5" (delete - 2 3) (("5" (grind) nil nil)) nil)
                     ("6" (delete - 2 3)
                      (("6" (skolem!)
                        (("6" (nonemptylist "il!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[list[event]]" dynetwork nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes lib)
    (commit adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (commit?)]" gnsl_init nil)
    (commit? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_init nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_init
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_init nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_init
     nil)
    (E const-decl "Message" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (>> const-decl "process" processes lib)
    (restriction_choice3 formula-decl nil restriction_rules2 lib)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (uniform3_choice2 formula-decl nil uniform_props2 lib)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restriction_pref formula-decl nil restriction_rules lib)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uniform_stop2 formula-decl nil uniform_props lib)
    (uniform_prefix2 formula-decl nil uniform_props lib)
    (remove def-decl "list[T]" listprops nil)
    (elt const-decl "bool" listprops nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (hu_list const-decl "{x: list[Identity] |
   (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_init nil)
    (Message_conc_extensionality formula-decl nil gnsl_init nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_init nil)
    (i!2 skolem-const-decl "[{x: list[Nonce] | length(x) = P!1 - 1},
 {x: list[Identity] |
    (length(x) = P!1 - 1) AND
     FORALL (i: below[P!1 - 1]): nth(x, i) = hu(1 + i)}]" gnsl_init
     nil)
    (i!4 skolem-const-decl "below[length[Identity](cdr(i!2`2))]"
     gnsl_init nil)
    (length_cdr formula-decl nil more_list_props lib)
    (length_nth_equality formula-decl nil listprops nil)
    (Message_ilist_extensionality formula-decl nil gnsl_init nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (Message_public_extensionality formula-decl nil gnsl_init nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_init
     nil)
    (n_orig formula-decl nil gnsl_init nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (p const-decl "nat_from_2" gnsl_init nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (restriction_stop formula-decl nil restriction_rules lib)
    (elt_append2 formula-decl nil listprops nil)
    (append def-decl "list[T]" list_props nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_init
     nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (i!1 skolem-const-decl "Nonces(P!1, u!1, 0)" gnsl_init nil)
    (u!1 skolem-const-decl "Identity" gnsl_init nil)
    (uniform2_interleave2 formula-decl nil uniform_props3 lib)
    (|#| const-decl "process[T]" restriction_rules lib)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_last def-decl "bool" gnsl_init nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (restriction_free_par2 formula-decl nil restriction_rules3 lib)
    (set type-eq-decl nil sets nil)
    (R_last const-decl "set[event]" gnsl_init nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes lib)
    (process type-eq-decl nil processes lib)
    (UROLE_INIT const-decl "process[event]" gnsl_init nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (Message type-decl nil gnsl_init nil)
    (INIT const-decl "bool" gnsl_init nil)
    (\|- const-decl "bool" gnsl_init nil)
    (event type-decl nil dynetwork nil))
   nil))
 (restrictlast_middle 0
  (restrictlast_middle-1 nil 3399299388
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (expand "RankUser")
        (("" (prop)
          (("" (auto-rewrite "USER_TCC2")
            (("" (interleaving2)
              (("" (typepred "P!1" "i!1`1")
                (("" (expand "UROLE_MIDDLE")
                  (("" (choice3)
                    (("1" (prefix)
                      (("1" (delete 2 3)
                        (("1" (prefix)
                          (("1" (delete - 2 3 4)
                            (("1" (expand "rho_last")
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (delete 2 3)
                            (("2" (prefix)
                              (("1"
                                (delete 2 3)
                                (("1"
                                  (comment
                                   "let us make explicit that i!1`2 /= n_init")
                                  (("1"
                                    (case "i!1`2 /= n_init")
                                    (("1"
                                      (expand "rho_last" -2)
                                      (("1"
                                        (stop-rewrite "remove")
                                        (("1"
                                          (grind
                                           :exclude
                                           ("rho_last" "remove"))
                                          (("1"
                                            (delete -2 -3 -4 3)
                                            (("1"
                                              (comment
                                               "due to -1 (and i!1`2 /= n_init), 2 will be satisfied")
                                              (("1"
                                                (lemma
                                                 "listprops[Nonce].elt_append3"
                                                 ("l1"
                                                  "i!2`1"
                                                  "l2"
                                                  "(: i!1`2 :)"
                                                  "t"
                                                  "n_init"))
                                                (("1"
                                                  (lemma
                                                   "listprops[Nonce].elt_singleton"
                                                   ("t1"
                                                    "i!1`2"
                                                    "t2"
                                                    "n_init"))
                                                  (("1"
                                                    (grind
                                                     :exclude
                                                     "elt")
                                                    nil
                                                    nil))
                                                  nil))
                                                ";;; due to -1 (and i!1`2 /= n_init), 2 will be satisfied"))
                                              nil))
                                            nil)
                                           ("2"
                                            (comment
                                             "this is the case of the run under consideration, so 2 must be proven by showing the parameters satisfy the EXISTS quantor in rho_last")
                                            (("2"
                                              (decompose-equality -5)
                                              (("2"
                                                (decompose-equality -6)
                                                (("2"
                                                  (decompose-equality
                                                   -1)
                                                  (("2"
                                                    (decompose-equality
                                                     -2)
                                                    (("2"
                                                      (typepred
                                                       "i!2`1"
                                                       "i!2`3"
                                                       "i!2`4"
                                                       "p"
                                                       "hu_list")
                                                      (("2"
                                                        (delete
                                                         -1
                                                         -3
                                                         -5
                                                         -8
                                                         -14)
                                                        (("2"
                                                          (comment
                                                           "derive value of i!3 from lists l!1 and i!2`1 and make explicit that P!1 = p")
                                                          (("2"
                                                            (case
                                                             "i!3=i!1`1 AND P!1=p")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace*
                                                                 -1)
                                                                (("1"
                                                                  (replace*
                                                                   -2)
                                                                  (("1"
                                                                    (delete
                                                                     -1
                                                                     -2
                                                                     -6
                                                                     -13
                                                                     -14)
                                                                    (("1"
                                                                      (comment
                                                                       "let PVS simplify matters by grinding")
                                                                      (("1"
                                                                        (grind
                                                                         :if-match
                                                                         nil
                                                                         :exclude
                                                                         ("elt"
                                                                          "remove"))
                                                                        (("1"
                                                                          (comment
                                                                           "since the current agent is hu(i!1`1) [-7], car(i!2`4) must be hu(i!1`1+1)")
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             "i!1`1+1")
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("1"
                                                                                  (delete
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -9
                                                                                   2
                                                                                   3)
                                                                                  (("1"
                                                                                    (comment
                                                                                     "now retrieve element i!1`1 from both lists in -5")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "equality_nth[Identity]"
                                                                                       ("l1"
                                                                                        "append(i!2`3, i!2`4)"
                                                                                        "l2"
                                                                                        "remove(hu_list, i!1`1)"))
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "i!1`1")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "nth_append"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "listprops[Identity].nth_remove"
                                                                                               ("l"
                                                                                                "hu_list"
                                                                                                "i"
                                                                                                "i!1`1"
                                                                                                "j"
                                                                                                "i!1`1"))
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (delete
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -5
                                                                                                     "i!1`1+1")
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (delete
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             2)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               "length_append")
                                                                                              (("2"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      ";;; now retrieve element i!1`1 from both lists in -5"))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (comment
                                                                                 "the choice for instantiation is obvious: append(l!1, (: i!1`2 :))")
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "append(l!1, (: i!1`2 :))")
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("1"
                                                                                        (delete
                                                                                         -6
                                                                                         -7
                                                                                         -8
                                                                                         -9
                                                                                         2
                                                                                         3)
                                                                                        (("1"
                                                                                          (comment
                                                                                           "prove equality of lists by proving equality of lengths and elements")
                                                                                          (("1"
                                                                                            (rewrite
                                                                                             "length_nth_equality[Identity]")
                                                                                            (("1"
                                                                                              (delete
                                                                                               -4
                                                                                               -5
                                                                                               -6
                                                                                               -7
                                                                                               -8
                                                                                               2)
                                                                                              (("1"
                                                                                                (rewrite
                                                                                                 "length_append"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "length_cdr"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "length_remove"
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (ground)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skolem-typepred)
                                                                                              (("2"
                                                                                                (comment
                                                                                                 "use equality in -6 and use properties of nth distributed over remove and append")
                                                                                                (("2"
                                                                                                  (comment
                                                                                                   "first, simplify -1")
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "i!4<p-1")
                                                                                                    (("1"
                                                                                                      (delete
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "listprops[Identity].equality_nth"
                                                                                                         ("l1"
                                                                                                          "append(i!2`3, i!2`4)"
                                                                                                          "l2"
                                                                                                          "remove(hu_list, i!1`1)"))
                                                                                                        (("1"
                                                                                                          (prop)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "listprops[Identity].nth_append"
                                                                                                             ("l1"
                                                                                                              "i!2`3"
                                                                                                              "l2"
                                                                                                              "cons(hu(i!1`1), cdr(i!2`4))"
                                                                                                              "i"
                                                                                                              "i!4"))
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (delete
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "listprops[Identity].nth_remove"
                                                                                                                   ("l"
                                                                                                                    "hu_list"
                                                                                                                    "i"
                                                                                                                    "i!1`1+1"
                                                                                                                    "j"
                                                                                                                    "i!4"))
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (delete
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (comment
                                                                                                                         "use the equality in -7 (or -1) to prove 1")
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "listprops[Identity].nth_append"
                                                                                                                           ("l1"
                                                                                                                            "i!2`3"
                                                                                                                            "l2"
                                                                                                                            "i!2`4"))
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "listprops[Identity].nth_remove"
                                                                                                                             ("l"
                                                                                                                              "hu_list"
                                                                                                                              "i"
                                                                                                                              "i!1`1"))
                                                                                                                            (("1"
                                                                                                                              (grind
                                                                                                                               :exclude
                                                                                                                               ("append"
                                                                                                                                "remove"))
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          ";;; use the equality in -7 (or -1) to prove 1"))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (delete
                                                                                                                     -1
                                                                                                                     -3
                                                                                                                     -4
                                                                                                                     -5
                                                                                                                     -7
                                                                                                                     -8
                                                                                                                     -9
                                                                                                                     -10
                                                                                                                     -11
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (ground)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (delete
                                                                                                               -1
                                                                                                               -2
                                                                                                               -4
                                                                                                               -5
                                                                                                               -6
                                                                                                               -7
                                                                                                               -8
                                                                                                               -9
                                                                                                               -10
                                                                                                               -11
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 "length_append"
                                                                                                                 -1)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (delete
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       -7
                                                                                                       -8
                                                                                                       -9
                                                                                                       2
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "length_append"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "length_cdr"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (ground)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    ";;; first, simplify -1"))
                                                                                                  ";;; use equality in -6 and use properties of nth distributed over remove and append"))
                                                                                                nil))
                                                                                              nil))
                                                                                            ";;; prove equality of lists by proving equality of lengths and elements"))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (delete
                                                                                     -1
                                                                                     -2
                                                                                     -3
                                                                                     -4
                                                                                     -5
                                                                                     -6
                                                                                     -7
                                                                                     -9
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     2
                                                                                     3)
                                                                                    (("2"
                                                                                      (rewrite
                                                                                       "length_append")
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  ";;; the choice for instantiation is obvious: append(l!1, (: i!1`2 :))"))
                                                                                nil))
                                                                              nil))
                                                                            ";;; since the current agent is hu(i!1`1) [-7], car(i!2`4) must be hu(i!1`1+1)"))
                                                                          nil))
                                                                        ";;; let PVS simplify matters by grinding"))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -8
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -10
                                                                   -1)
                                                                  (("2"
                                                                    (simplify
                                                                     -1)
                                                                    (("2"
                                                                      (replace*
                                                                       -1)
                                                                      (("2"
                                                                        (delete
                                                                         -1
                                                                         -4
                                                                         -6
                                                                         -8
                                                                         -9
                                                                         -10
                                                                         -11
                                                                         -12
                                                                         -13
                                                                         -14
                                                                         -15
                                                                         2
                                                                         3
                                                                         4)
                                                                        (("2"
                                                                          (lemma
                                                                           "listprops[Identity].equality_length"
                                                                           ("l1"
                                                                            "append(i!2`3, i!2`4)"
                                                                            "l2"
                                                                            "remove(hu_list, i!1`1)"))
                                                                          (("2"
                                                                            (prop)
                                                                            (("2"
                                                                              (rewrite
                                                                               "length_append"
                                                                               -1)
                                                                              (("2"
                                                                                (lemma
                                                                                 "length_remove"
                                                                                 ("c"
                                                                                  "hu_list"
                                                                                  "i"
                                                                                  "i!1`1"))
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   -2
                                                                                   rl)
                                                                                  (("1"
                                                                                    (delete
                                                                                     -1
                                                                                     -6)
                                                                                    (("1"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (delete
                                                                                   -
                                                                                   2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "cons_hu_list")
                                                                                    (("2"
                                                                                      (ground)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            ";;; derive value of i!3 from lists l!1 and i!2`1 and make explicit that P!1 = p"))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              ";;; this is the case of the run under consideration, so 2 must be proven by showing the parameters satisfy the EXISTS quantor in rho_last"))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (delete -1 -2 -4 2 3)
                                      (("2"
                                        (typepred "i!1`2")
                                        (("2"
                                          (lemma
                                           "n_prop"
                                           ("P"
                                            "P!1"
                                            "u"
                                            "u!1"
                                            "r"
                                            "i!1`1"))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    ";;; let us make explicit that i!1`2 /= n_init"))
                                  nil))
                                nil)
                               ("2"
                                (delete 2 3)
                                (("2"
                                  (prefix)
                                  (("2"
                                    (delete 2 3)
                                    (("2"
                                      (expand "LastMessage")
                                      (("2"
                                        (lift-if)
                                        (("2"
                                          (prop)
                                          (("1"
                                            (prefix)
                                            (("1"
                                              (delete -3 2 3)
                                              (("1"
                                                (lemma
                                                 "listprops[Nonce].elt_append2"
                                                 ("l1"
                                                  "(: i!1`2:)"
                                                  "l2"
                                                  "i!2`2"
                                                  "t"
                                                  "n_init"))
                                                (("1"
                                                  (grind
                                                   :if-match
                                                   nil
                                                   :exclude
                                                   "elt")
                                                  (("1"
                                                    (decompose-equality
                                                     -9)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete - 2 3)
                                              (("2" (stop) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (prefix)
                                            (("1"
                                              (delete -2 2 3)
                                              (("1"
                                                (lemma
                                                 "listprops[Nonce].elt_append2"
                                                 ("l1"
                                                  "(: i!1`2:)"
                                                  "l2"
                                                  "i!2`2"
                                                  "t"
                                                  "n_init"))
                                                (("1"
                                                  (grind
                                                   :if-match
                                                   nil
                                                   :exclude
                                                   "elt")
                                                  (("1"
                                                    (decompose-equality
                                                     -8)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (delete - 2 3)
                                              (("2" (stop) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (delete - 2 3)
                      (("2" (nonemptylist "i!2`4") nil nil)) nil)
                     ("3" (delete - 2 3)
                      (("3" (nonemptylist "i!2`1") nil nil)) nil)
                     ("4" (typepred "i!2`3")
                      (("4" (delete -1 -3 -4 -5 2 3)
                        (("4" (ground) nil nil)) nil))
                      nil)
                     ("5" (skolem!)
                      (("5" (delete - 2 3)
                        (("5" (nonemptylist "il2!1") nil nil)) nil))
                      nil)
                     ("6" (skolem!)
                      (("6" (delete - 2 3)
                        (("6" (nonemptylist "nl1!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[list[event]]" dynetwork nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes lib)
    (LastMessage const-decl "event" gnsl_init nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_init nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (append def-decl "list[T]" list_props nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_init nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_init
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_init nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_init
     nil)
    (E const-decl "Message" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (>> const-decl "process" processes lib)
    (restriction_choice3 formula-decl nil restriction_rules2 lib)
    (uniform3_choice2 formula-decl nil uniform_props2 lib)
    (elt_append2 formula-decl nil listprops nil)
    (restriction_stop formula-decl nil restriction_rules lib)
    (/= const-decl "boolean" notequal nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (hu_list const-decl "{x: list[Identity] |
   (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_init nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_init
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Message_conc_extensionality formula-decl nil gnsl_init nil)
    (length_nth_equality formula-decl nil listprops nil)
    (length_remove formula-decl nil listprops nil)
    (length_cdr formula-decl nil more_list_props lib)
    (i!4 skolem-const-decl
     "below[length[Identity](append(i!2`3, cons(hu(i!1`1), cdr(i!2`4))))]"
     gnsl_init nil)
    (Message_ilist_extensionality formula-decl nil gnsl_init nil)
    (l!1 skolem-const-decl "{x: list[Nonce] | length(x) = i!3 - 1}"
     gnsl_init nil)
    (i!3 skolem-const-decl "{x: nat | 0 < x AND x < p}" gnsl_init nil)
    (Message_public_extensionality formula-decl nil gnsl_init nil)
    (length_append formula-decl nil more_list_props lib)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil listprops nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth_remove formula-decl nil listprops nil)
    (i!2 skolem-const-decl "[{x: list[Nonce] | length(x) = i!1`1},
 {x: list[Nonce] | length(x) = P!1 - 1 - i!1`1},
 {x: list[Identity] | length(x) = i!1`1},
 {x: list[Identity] | length(x) = P!1 - 1 - i!1`1}]" gnsl_init nil)
    (i!1 skolem-const-decl "[k: nat_1_to(P!1), Nonces(P!1, u!1, k)]"
     gnsl_init nil)
    (u!1 skolem-const-decl "Identity" gnsl_init nil)
    (P!1 skolem-const-decl "nat_from_2" gnsl_init nil)
    (equality_nth formula-decl nil listprops nil)
    (cons_hu_list formula-decl nil gnsl_init nil)
    (equality_length formula-decl nil listprops nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_init
     nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_init
     nil)
    (elt_append3 formula-decl nil listprops nil)
    (remove def-decl "list[T]" listprops nil)
    (elt_singleton formula-decl nil listprops nil)
    (n_prop formula-decl nil gnsl_init nil)
    (uniform_prefix2 formula-decl nil uniform_props lib)
    (uniform_stop2 formula-decl nil uniform_props lib)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (restriction_pref formula-decl nil restriction_rules lib)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (uniform2_interleave2 formula-decl nil uniform_props3 lib)
    (|#| const-decl "process[T]" restriction_rules lib)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_last def-decl "bool" gnsl_init nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (TRUE const-decl "bool" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (restriction_free_par2 formula-decl nil restriction_rules3 lib)
    (set type-eq-decl nil sets nil)
    (R_last const-decl "set[event]" gnsl_init nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes lib)
    (process type-eq-decl nil processes lib)
    (nat_from_3 type-eq-decl nil gnsl_init nil)
    (UROLE_MIDDLE const-decl "process[event]" gnsl_init nil)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (Message type-decl nil gnsl_init nil)
    (INIT const-decl "bool" gnsl_init nil)
    (\|- const-decl "bool" gnsl_init nil)
    (event type-decl nil dynetwork nil)
    (USER_TCC2 existence-tcc nil gnsl_init nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil))
   nil))
 (restrictlast_last 0
  (restrictlast_last-1 nil 3399223365
   ("" (auto-rewrite-theory "sets")
    (("" (skolem!)
      (("" (expand "RankUser")
        (("" (interleaving2)
          (("" (expand "UROLE_LAST")
            (("" (typepred "P!1")
              (("" (choice3)
                (("1" (prefix)
                  (("1" (delete 2 3)
                    (("1" (prefix)
                      (("1" (delete - 2 3)
                        (("1" (expand "rho_last")
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (delete 3)
                        (("2" (prefix)
                          (("1" (delete 2 3)
                            (("1" (expand "R_last")
                              (("1"
                                (comment
                                 "either the process is blocked on 2, or 1 is satisfied")
                                (("1"
                                  (case
                                   "append(i!2`2, (: u!1 :)) = hu_list AND car(i!2`1) = n_init AND P!1 = p")
                                  (("1"
                                    (delete -2 -3 1)
                                    (("1" (ground) nil nil))
                                    nil)
                                   ("2"
                                    (delete 3)
                                    (("2"
                                      (comment
                                       "first and foremost, let us prove that i!1 /= n_init")
                                      (("2"
                                        (case "i!1 /= n_init")
                                        (("1"
                                          (expand "rho_last" -2)
                                          (("1"
                                            (grind :exclude "rho_last")
                                            (("1"
                                              (comment
                                               "due to -1 (and i!1 /= n_init), 3 will be satisfied")
                                              (("1"
                                                (delete 2)
                                                (("1"
                                                  (lemma
                                                   "listprops[Nonce].elt_append3"
                                                   ("l1"
                                                    "i!2`1"
                                                    "l2"
                                                    "(: i!1 :)"
                                                    "t"
                                                    "n_init"))
                                                  (("1"
                                                    (lemma
                                                     "listprops[Nonce].elt_singleton"
                                                     ("t1"
                                                      "i!1"
                                                      "t2"
                                                      "n_init"))
                                                    (("1"
                                                      (grind
                                                       :exclude
                                                       "elt")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                ";;; due to -1 (and i!1 /= n_init), 3 will be satisfied"))
                                              nil)
                                             ("2"
                                              (typepred
                                               "i!2`1"
                                               "i!2`2"
                                               "hu_list"
                                               "p")
                                              (("2"
                                                (delete
                                                 -1
                                                 -3
                                                 -5
                                                 -9
                                                 1
                                                 3)
                                                (("2"
                                                  (decompose-equality
                                                   -10)
                                                  (("2"
                                                    (decompose-equality
                                                     -1)
                                                    (("2"
                                                      (decompose-equality
                                                       -2)
                                                      (("2"
                                                        (replace -2 -3)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -3)
                                                          (("2"
                                                            (replace
                                                             -8
                                                             -3)
                                                            (("2"
                                                              (simplify
                                                               -3)
                                                              (("2"
                                                                (replace*
                                                                 -3)
                                                                (("2"
                                                                  (delete
                                                                   -2
                                                                   -3
                                                                   -6
                                                                   -8
                                                                   -9
                                                                   -11)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (delete
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "length_remove"
                                                                           ("c"
                                                                            "cdr(hu_list)"
                                                                            "i"
                                                                            "P!1-2"))
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             -2
                                                                             rl)
                                                                            (("1"
                                                                              (delete
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "length_cdr"
                                                                                 -1)
                                                                                (("1"
                                                                                  (delete
                                                                                   -3
                                                                                   -4
                                                                                   -5)
                                                                                  (("1"
                                                                                    (ground)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (delete
                                                                             -1
                                                                             -4
                                                                             -5
                                                                             2)
                                                                            (("2"
                                                                              (lemma
                                                                               "more_list_props[Identity].length_non_zero"
                                                                               ("l"
                                                                                "hu_list"))
                                                                              (("2"
                                                                                (ground)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (comment
                                               "see first sibling")
                                              (("3"
                                                (delete 2)
                                                (("3"
                                                  (lemma
                                                   "listprops[Nonce].elt_append3"
                                                   ("l1"
                                                    "i!2`1"
                                                    "l2"
                                                    "(: i!1 :)"
                                                    "t"
                                                    "n_init"))
                                                  (("3"
                                                    (lemma
                                                     "listprops[Nonce].elt_singleton"
                                                     ("t1"
                                                      "i!1"
                                                      "t2"
                                                      "n_init"))
                                                    (("3"
                                                      (grind
                                                       :exclude
                                                       "elt")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                ";;; see first sibling"))
                                              nil)
                                             ("4"
                                              (comment
                                               "sequent 2 (which is a flattened false antecedent) follows from -6")
                                              (("4"
                                                (delete
                                                 -1
                                                 -2
                                                 -3
                                                 -4
                                                 -5
                                                 -7
                                                 1
                                                 3)
                                                (("4"
                                                  (mdecompose-equality
                                                   -1)
                                                  nil
                                                  nil))
                                                ";;; sequent 2 (which is a flattened false antecedent) follows from -6"))
                                              nil)
                                             ("5"
                                              (comment
                                               "see first sibling")
                                              (("5"
                                                (delete 2)
                                                (("5"
                                                  (lemma
                                                   "listprops[Nonce].elt_append3"
                                                   ("l1"
                                                    "i!2`1"
                                                    "l2"
                                                    "(: i!1 :)"
                                                    "t"
                                                    "n_init"))
                                                  (("5"
                                                    (lemma
                                                     "listprops[Nonce].elt_singleton"
                                                     ("t1"
                                                      "i!1"
                                                      "t2"
                                                      "n_init"))
                                                    (("5"
                                                      (grind
                                                       :exclude
                                                       "elt")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                ";;; see first sibling"))
                                              nil)
                                             ("6"
                                              (typepred
                                               "i!2`1"
                                               "i!2`2"
                                               "hu_list"
                                               "p")
                                              (("6"
                                                (delete
                                                 -1
                                                 -3
                                                 -5
                                                 -9
                                                 1
                                                 3)
                                                (("6"
                                                  (decompose-equality
                                                   -10)
                                                  (("6"
                                                    (decompose-equality
                                                     -1)
                                                    (("6"
                                                      (decompose-equality
                                                       -2)
                                                      (("6"
                                                        (comment
                                                         "first, establish some useful equalities")
                                                        (("6"
                                                          (case
                                                           "P!1=p AND i!3=P!1-1")
                                                          (("1"
                                                            (comment
                                                             "to prove: i!2`2 is hu_list without its last element and u!1 should be hu(P-1)")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (replace*
                                                                 -1
                                                                 -2)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -13)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (delete
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       -5
                                                                       -6
                                                                       -10
                                                                       -11
                                                                       -12
                                                                       -13)
                                                                      (("1"
                                                                        (lemma
                                                                         "cons_remove"
                                                                         ("c"
                                                                          "hu_list"
                                                                          "i"
                                                                          "p-1-1"))
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           -2)
                                                                          (("1"
                                                                            (simplify
                                                                             -2)
                                                                            (("1"
                                                                              (replace*
                                                                               -2)
                                                                              (("1"
                                                                                (delete
                                                                                 -1
                                                                                 -2)
                                                                                (("1"
                                                                                  (comment
                                                                                   "intuitively, this clearly holds")
                                                                                  (("1"
                                                                                    (comment
                                                                                     "it is proven by equality of the lengths of the lists and equality of their elements")
                                                                                    (("1"
                                                                                      (case
                                                                                       "length(append(remove(hu_list, p - 1), (: hu(p - 1) :))) = p")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "length_nth_equality[Identity]"
                                                                                         ("l1"
                                                                                          "append(remove(hu_list, p-1), (:hu(p-1):))"
                                                                                          "l2"
                                                                                          "hu_list"))
                                                                                        (("1"
                                                                                          (prop)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (delete
                                                                                               -1
                                                                                               -2
                                                                                               -4
                                                                                               -5
                                                                                               2)
                                                                                              (("1"
                                                                                                (ground)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skolem-typepred)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               -1)
                                                                                              (("2"
                                                                                                (delete
                                                                                                 -2
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (stop-rewrite
                                                                                                   "remove")
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "listprops[Identity].nth_append"
                                                                                                     ("l1"
                                                                                                      "remove(hu_list, p-1)"
                                                                                                      "l2"
                                                                                                      "(:hu(p-1):)"
                                                                                                      "i"
                                                                                                      "i!4"))
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "listprops[Identity].nth_remove"
                                                                                                       ("l"
                                                                                                        "hu_list"
                                                                                                        "i"
                                                                                                        "p-1"))
                                                                                                      (("1"
                                                                                                        (lazy-grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (delete
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (ground)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (delete
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         2)
                                                                                        (("2"
                                                                                          (stop-rewrite
                                                                                           "remove")
                                                                                          (("2"
                                                                                            (rewrite
                                                                                             "length_append")
                                                                                            (("2"
                                                                                              (ground)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      ";;; it is proven by equality of the lengths of the lists and equality of their elements"))
                                                                                    ";;; intuitively, this clearly holds"))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              ";;; to prove: i!2`2 is hu_list without its last element and u!1 should be hu(P-1)"))
                                                            nil)
                                                           ("2"
                                                            (delete 2)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               -3)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -3)
                                                                (("2"
                                                                  (replace
                                                                   -8
                                                                   -3)
                                                                  (("2"
                                                                    (simplify
                                                                     -3)
                                                                    (("2"
                                                                      (prop)
                                                                      (("2"
                                                                        (replace*
                                                                         -3)
                                                                        (("2"
                                                                          (delete
                                                                           -2
                                                                           -3
                                                                           -6
                                                                           -8
                                                                           -9
                                                                           -11)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             -2)
                                                                            (("2"
                                                                              (delete
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -1)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "length_remove"
                                                                                   ("c"
                                                                                    "cdr(hu_list)"
                                                                                    "i"
                                                                                    "P!1-2"))
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     -2
                                                                                     rl)
                                                                                    (("1"
                                                                                      (delete
                                                                                       -1)
                                                                                      (("1"
                                                                                        (rewrite
                                                                                         "length_cdr"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (delete
                                                                                           -3
                                                                                           -4
                                                                                           -5)
                                                                                          (("1"
                                                                                            (ground)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (delete
                                                                                     -1
                                                                                     -4
                                                                                     -5
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "more_list_props[Identity].length_non_zero"
                                                                                       ("l"
                                                                                        "hu_list"))
                                                                                      (("2"
                                                                                        (ground)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          ";;; first, establish some useful equalities"))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (delete - 2 3)
                                          (("2"
                                            (typepred "i!1")
                                            (("2"
                                              (lemma
                                               "n_prop"
                                               ("P"
                                                "P!1"
                                                "u"
                                                "u!1"
                                                "r"
                                                "P!1-1"))
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        ";;; first and foremost, let us prove that i!1 /= n_init"))
                                      nil))
                                    nil))
                                  ";;; either the process is blocked on 2, or 1 is satisfied"))
                                nil))
                              nil))
                            nil)
                           ("2" (delete 2 3)
                            (("2" (prefix)
                              (("2"
                                (delete 2 3)
                                (("2" (stop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (delete - 2) (("2" (grind) nil nil)) nil)
                 ("3" (delete - 2)
                  (("3" (nonemptylist "i!2`2") nil nil)) nil)
                 ("4" (delete - 2)
                  (("4" (nonemptylist "i!2`1") nil nil)) nil)
                 ("5" (typepred "i!2`2")
                  (("5" (delete -1 -3 2) (("5" (ground) nil nil)) nil))
                  nil)
                 ("6" (delete - 2) (("6" (grind) nil nil)) nil)
                 ("7" (delete -1 2)
                  (("7" (skolem!) (("7" (nonemptylist "il!1") nil nil))
                    nil))
                  nil)
                 ("8" (delete - 2)
                  (("8" (skolem!) (("8" (nonemptylist "nl!1") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[list[event]]" dynetwork nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Stop const-decl "process" processes lib)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (trans adt-constructor-decl "[[I, I, M] -> (trans?)]" dynetwork
     nil)
    (trans? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (running adt-constructor-decl
     "[[Role, list[Identity], Nonce] -> (running?)]" gnsl_init nil)
    (running? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (signal adt-constructor-decl "[M -> (signal?)]" dynetwork nil)
    (signal? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (ilist adt-constructor-decl "[list[Identity] -> (ilist?)]"
     gnsl_init nil)
    (ilist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (nlist adt-constructor-decl "[list[Nonce] -> (nlist?)]" gnsl_init
     nil)
    (nlist? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (conc adt-constructor-decl "[[Message, Message] -> (conc?)]"
     gnsl_init nil)
    (conc? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public adt-constructor-decl "[Identity -> (public?)]" gnsl_init
     nil)
    (E const-decl "Message" gnsl_init nil)
    (Key type-eq-decl nil gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (rec adt-constructor-decl "[[I, I, M] -> (rec?)]" dynetwork nil)
    (>> const-decl "process" processes lib)
    (restriction_choice3 formula-decl nil restriction_rules2 lib)
    (uniform3_choice2 formula-decl nil uniform_props2 lib)
    (restriction_stop formula-decl nil restriction_rules lib)
    (remove def-decl "list[T]" listprops nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (elt_singleton formula-decl nil listprops nil)
    (elt_append3 formula-decl nil listprops nil)
    (x_nlist adt-accessor-decl "[(nlist?) -> list[Nonce]]" gnsl_init
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_non_zero formula-decl nil more_list_props lib)
    (length_cdr formula-decl nil more_list_props lib)
    (length_remove formula-decl nil listprops nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (x_ilist adt-accessor-decl "[(ilist?) -> list[Identity]]" gnsl_init
     nil)
    (x_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (y_conc adt-accessor-decl "[(conc?) -> Message]" gnsl_init nil)
    (cons_remove formula-decl nil listprops nil)
    (length_append formula-decl nil more_list_props lib)
    (length_nth_equality formula-decl nil listprops nil)
    (nth_append formula-decl nil listprops nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth_remove formula-decl nil listprops nil)
    (x_public adt-accessor-decl "[(public?) -> Identity]" gnsl_init
     nil)
    (n_prop formula-decl nil gnsl_init nil)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil)
    (hu_list const-decl "{x: list[Identity] |
   (length(x) = p) AND (FORALL (i: nat_to_p): nth(x, i) = hu(i))}"
     gnsl_init nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (/= const-decl "boolean" notequal nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (uniform_prefix2 formula-decl nil uniform_props lib)
    (uniform_stop2 formula-decl nil uniform_props lib)
    (restriction_pref formula-decl nil restriction_rules lib)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (uniform2_interleave2 formula-decl nil uniform_props3 lib)
    (|#| const-decl "process[T]" restriction_rules lib)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (rho_last def-decl "bool" gnsl_init nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (complement const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (restriction_free_par2 formula-decl nil restriction_rules3 lib)
    (set type-eq-decl nil sets nil)
    (R_last const-decl "set[event]" gnsl_init nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes lib)
    (process type-eq-decl nil processes lib)
    (UROLE_LAST const-decl "process[event]" gnsl_init nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (Message type-decl nil gnsl_init nil)
    (INIT const-decl "bool" gnsl_init nil)
    (\|- const-decl "bool" gnsl_init nil)
    (event type-decl nil dynetwork nil))
   nil))
 (authentication_last 0
  (authentication_last-1 nil 3399299109
   ("" (auto-rewrite-theory "sets")
    (("" (rewrite "authentication_by_rank" + ("rho" "rho_last"))
      (("1" (delete 2)
        (("1" (comment "intruder's initial knowledge is in rho")
          (("1" (skolem!)
            (("1" (prop)
              (("1" (expand "INIT")
                (("1" (expand "rho_last") (("1" (smash) nil nil)) nil))
                nil))
              nil))
            ";;; intruder's initial knowledge is in rho"))
          nil))
        nil)
       ("2" (delete 2)
        (("2"
          (comment "from of a set of messages in rho, no message not in rho can be generated")
          (("2" (expand "|-")
            (("2" (rule-induct "Gen")
              (("2" (skolem!)
                (("2" (smash)
                  (("1" (inst -2 "m!2") (("1" (prop) nil nil)) nil)
                   ("2" (delete -2)
                    (("2" (skolem!)
                      (("2" (prop)
                        (("2" (replace -3 1)
                          (("2" (expand "rho_last" 1)
                            (("2" (prop) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (delete -2)
                    (("3" (skolem!)
                      (("3" (expand "rho_last" -1)
                        (("3" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("4" (delete -2)
                    (("4" (skolem!)
                      (("4" (expand "rho_last" -1)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil)
                   ("5" (delete -2)
                    (("5" (skolem!)
                      (("5" (flatten)
                        (("5" (expand "rho_last" -1)
                          (("5" (replace -2 1)
                            (("5" (expand "rho_last")
                              (("5"
                                (delete -2)
                                (("5" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (delete -2)
                    (("6" (skolem!)
                      (("6" (prop)
                        (("6" (replace -2 1)
                          (("6" (delete -2)
                            (("6" (expand "rho_last")
                              (("6"
                                (expand "elt")
                                (("6"
                                  (inst 1 "0")
                                  (("1" (grind :exclude 2) nil nil)
                                   ("2"
                                    (delete 2)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (delete -2)
                    (("7" (skolem!)
                      (("7" (prop)
                        (("7" (replace -3 1)
                          (("7" (delete -3)
                            (("7" (expand "rho_last")
                              (("7"
                                (lemma
                                 "listprops[Nonce].elt_append3"
                                 ("l1"
                                  "nl1!1"
                                  "l2"
                                  "nl2!1"
                                  "t"
                                  "n_init"))
                                (("7" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (delete -2)
                    (("8" (skolem!)
                      (("8" (prop)
                        (("8" (replace -3 1)
                          (("8" (delete -3)
                            (("8" (replace -2 -1)
                              (("8"
                                (delete -2)
                                (("8"
                                  (expand "rho_last")
                                  (("8"
                                    (lemma
                                     "listprops[Nonce].elt_append1"
                                     ("l1"
                                      "nl1!1"
                                      "l2"
                                      "nl2!1"
                                      "t"
                                      "n_init"))
                                    (("8" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("9" (delete -2)
                    (("9" (skolem!)
                      (("9" (prop)
                        (("9" (replace -3 1)
                          (("9" (delete -3)
                            (("9" (replace -2 -1)
                              (("9"
                                (delete -2)
                                (("9"
                                  (expand "rho_last")
                                  (("9"
                                    (lemma
                                     "listprops[Nonce].elt_append2"
                                     ("l1"
                                      "nl1!1"
                                      "l2"
                                      "nl2!1"
                                      "t"
                                      "n_init"))
                                    (("9" (prop) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("10" (delete -2)
                    (("10" (skolem!)
                      (("10" (prop)
                        (("10" (replace -2 1)
                          (("10" (delete -1 -2)
                            (("10" (expand "rho_last")
                              (("10" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("11" (delete -2)
                    (("11" (skolem!)
                      (("11" (prop)
                        (("11" (replace -2 1)
                          (("11" (delete -1 -2)
                            (("11" (expand "rho_last")
                              (("11" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("12" (delete -2)
                    (("12" (skolem!)
                      (("12" (prop)
                        (("12" (replace -3 1)
                          (("12" (delete -1 -2 -3)
                            (("12" (expand "rho_last")
                              (("12" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("13" (delete -2)
                    (("13" (skolem!)
                      (("13" (prop)
                        (("13" (replace -3 1)
                          (("13" (delete -1 -2 -3)
                            (("13" (expand "rho_last")
                              (("13" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("14" (delete -2)
                    (("14" (skolem!)
                      (("14" (prop)
                        (("14" (replace -3 1)
                          (("14" (delete -1 -2 -3)
                            (("14" (expand "rho_last")
                              (("14" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("15" (delete -2)
                    (("15" (skolem!)
                      (("15" (prop)
                        (("15" (replace -3 1)
                          (("15" (delete -3)
                            (("15" (typepred "k!1")
                              (("15"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "rho_last" -3)
                                  (("2"
                                    (assert)
                                    (("2" (lazy-grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            ";;; from of a set of messages in rho, no message not in rho can be generated"))
          nil))
        nil)
       ("3" (delete 2)
        (("3" (comment "users maintain the rank function")
          (("3" (skolem!)
            (("3" (expand "USER")
              (("3" (expand "RankUser")
                (("3" (interleaving2)
                  (("3" (interleaving)
                    (("1" (interleaving)
                      (("1"
                        (lemma "restrictlast_init"
                         ("P" "i!2" "u" "i!1"))
                        (("1"
                          (grind :exclude ("rho_last" "UROLE_INIT"))
                          nil nil))
                        nil)
                       ("2"
                        (lemma "restrictlast_last"
                         ("P" "i!2" "u" "i!1"))
                        (("2"
                          (grind :exclude ("rho_last" "UROLE_LAST"))
                          nil nil))
                        nil))
                      nil)
                     ("2" (lift-if)
                      (("2" (prop)
                        (("1" (stop) nil nil)
                         ("2"
                          (lemma "restrictlast_middle"
                           ("P" "i!2" "u" "i!1"))
                          (("2"
                            (grind :exclude
                             ("rho_last" "UROLE_MIDDLE"))
                            nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            ";;; users maintain the rank function"))
          nil))
        nil)
       ("4" (delete 2)
        (("4" (comment "T is not in rho")
          (("4" (skolem-typepred)
            (("4" (expand "T")
              (("4" (replace -1 -2)
                (("4" (delete -1) (("4" (grind) nil nil)) nil)) nil))
              nil))
            ";;; T is not in rho"))
          nil))
        nil))
      nil))
    nil)
   ((RankUser const-decl "setof[list[event]]" dynetwork nil)
    (restriction_free_par formula-decl nil restriction_rules lib)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (uniform_interleave2 formula-decl nil uniform_props lib)
    (restrictlast_last formula-decl nil gnsl_init nil)
    (restrictlast_init formula-decl nil gnsl_init nil)
    (Par const-decl "process" processes lib)
    (\|> const-decl "bool" satisfaction lib)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (restriction_stop formula-decl nil restriction_rules lib)
    (uniform_stop2 formula-decl nil uniform_props lib)
    (restrictlast_middle formula-decl nil gnsl_init nil)
    (complement const-decl "set" sets nil)
    (msg shared-adt-accessor-decl "[event -> M]" dynetwork nil)
    (rec? adt-recognizer-decl "[event -> boolean]" dynetwork nil)
    (pred type-eq-decl nil defined_types nil)
    (|#| const-decl "process[T]" restriction_rules lib)
    (uniform2_interleave2 formula-decl nil uniform_props3 lib)
    (restriction_free_par2 formula-decl nil restriction_rules3 lib)
    (// const-decl "process" processes lib)
    (Interleave const-decl "process[T]" multipar lib)
    (UROLE_INIT const-decl "process[event]" gnsl_init nil)
    (UROLE_LAST const-decl "process[event]" gnsl_init nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (Stop const-decl "process" processes lib)
    (nat_1_to type-eq-decl nil gnsl_init nil)
    (nat_from_3 type-eq-decl nil gnsl_init nil)
    (UROLE_MIDDLE const-decl "process[event]" gnsl_init nil)
    (remove def-decl "list[T]" listprops nil)
    (E const-decl "Message" gnsl_init nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Key type-eq-decl nil gnsl_init nil)
    (secret? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (public? adt-recognizer-decl "[Message -> boolean]" gnsl_init nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (elt_append2 formula-decl nil listprops nil)
    (elt_append1 formula-decl nil listprops nil)
    (elt_append3 formula-decl nil listprops nil)
    (<= const-decl "bool" reals nil)
    (nat_from_2 type-eq-decl nil gnsl_init nil)
    (Role type-eq-decl nil gnsl_init nil)
    (IRpart const-decl "[[nat_from_2, Identity, Role] -> setof[Nonce]]"
     gnsl_init nil)
    (p const-decl "nat_from_2" gnsl_init nil)
    (nat_to_p type-eq-decl nil gnsl_init nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (hu const-decl "{h: [nat_to_p -> Identity] |
   FORALL (i, j: nat_to_p): i /= j IMPLIES h(i) /= h(j)}" gnsl_init
     nil)
    (Nonces nonempty-type-eq-decl nil gnsl_init nil)
    (n_init const-decl "Nonces(p, hu(0), 0)" gnsl_init nil)
    (n!1 skolem-const-decl "Nonce" gnsl_init nil)
    (below type-eq-decl nil nat_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (Nonce nonempty-type-eq-decl nil gnsl_init nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (elt const-decl "bool" listprops nil)
    (/= const-decl "boolean" notequal nil)
    (Gen_weak_induction formula-decl nil gnsl_init nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (\|- const-decl "bool" gnsl_init nil)
    (setof type-eq-decl nil defined_types nil)
    (INIT const-decl "bool" gnsl_init nil)
    (Message type-decl nil gnsl_init nil)
    (Identity nonempty-type-eq-decl nil gnsl_init nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (USER const-decl "process[event]" gnsl_init nil)
    (process type-eq-decl nil processes lib)
    (prefix_closed const-decl "bool" processes lib)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (rho_last def-decl "bool" gnsl_init nil)
    (T const-decl "set[event]" gnsl_init nil)
    (R_last const-decl "set[event]" gnsl_init nil)
    (set type-eq-decl nil sets nil) (event type-decl nil dynetwork nil)
    (authentication_by_rank formula-decl nil dynetwork nil))
   nil)))

