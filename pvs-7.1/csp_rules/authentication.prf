(authentication
 (authentication_equiv 0
  (authentication_equiv-1 nil 3662229313
   ("" (skolem!)
    ((""
      (grind :exclude ("Par" "proj" "Stop") :rewrites
       "restriction_equiv[T]" :if-match nil)
      (("1" (inst?)
        (("1" (assert) (("1" (rewrite "every_proj2") nil nil)) nil))
        nil)
       ("2" (inst?)
        (("2" (assert)
          (("2" (delete -1 -2)
            (("2" (use "every_proj2[T]") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (auth const-decl "setof[trace[T]]" authentication nil)
    (subset? const-decl "bool" sets nil)
    (\|> const-decl "bool" satisfaction nil)
    (T formal-type-decl nil authentication nil)
    (restriction_equiv formula-decl nil restriction_rules nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (every_proj2 formula-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil))
   nil))
 (authentication_equiv2 0
  (authentication_equiv2-1 nil 3662229313
   ("" (skolem!)
    (("" (grind :exclude "proj" :if-match nil)
      (("1" (inst?)
        (("1" (assert)
          (("1" (rewrite "every_proj2")
            (("1" (delete -2 -3)
              (("1" (rewrite "every_proj2") nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (inst?)
        (("2" (assert)
          (("2" (use "every_proj2[T]")
            (("2" (assert)
              (("2" (delete -1 -2 -3)
                (("2" (use "every_proj2[T]") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (auth const-decl "setof[trace[T]]" authentication nil)
    (subset? const-decl "bool" sets nil)
    (\|> const-decl "bool" satisfaction nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil)
    (every_proj2 formula-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (T formal-type-decl nil authentication nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil))
   nil)))

