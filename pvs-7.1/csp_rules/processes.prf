(processes
 (Stop_TCC1 0
  (Stop_TCC1-1 nil 3662229309
   ("" (grind :exclude ("prefix") :rewrites ("prefix_null[T]")) nil
    nil)
   ((T formal-type-decl nil processes nil)
    (prefix_null formula-decl nil traces nil)
    (prefix_closed const-decl "bool" processes nil))
   nil))
 (vee_TCC1 0
  (vee_TCC1-1 nil 3662229309 ("" (grind :exclude ("prefix")) nil nil)
   ((prefix_closed const-decl "bool" processes nil)
    (union const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (process type-eq-decl nil processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil processes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (Choice_TCC1 0
  (Choice_TCC1-1 nil 3662229309
   ("" (grind :exclude "prefix" :if-match nil)
    (("1" (expand "prefix") (("1" (assert) nil nil)) nil)
     ("2" (reduce) nil nil))
    nil)
   ((prefix const-decl "bool" traces nil)
    (append def-decl "list[T]" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil processes nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (process type-eq-decl nil processes nil)
    (set type-eq-decl nil sets nil)
    (prefix_closed const-decl "bool" processes nil))
   nil))
 (doublegreaterp_TCC1 0
  (doublegreaterp_TCC1-1 nil 3662229309
   ("" (grind :defs nil :rewrites ("prefix_closed") :if-match nil)
    (("1" (rewrite "prefix_equiv") nil nil)
     ("2" (rewrite "prefix_equiv")
      (("2" (ground)
        (("2" (inst? -)
          (("2" (assert)
            (("2" (inst + "cdr(t1!1)")
              (("2" (apply-extensionality) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (prefix_equiv formula-decl nil traces nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil processes nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil))
   nil))
 (Par_TCC1 0
  (Par_TCC1-1 nil 3662229309
   ("" (skolem-typepred)
    (("" (ground)
      (("1" (expand "prod")
        (("1" (inst + "null" "null") (("1" (assert) nil nil)) nil))
        nil)
       ("2" (expand "prefix_closed")
        (("2" (skosimp*)
          (("2" (forward-chain "prefix_prod")
            (("2" (skosimp)
              (("2" (inst? - :where -1)
                (("2" (inst? - :where -2)
                  (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prod def-decl "bool" traces nil)
    (prefix_prod formula-decl nil traces nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil processes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (divide_TCC1 0
  (divide_TCC1-1 nil 3662229309
   ("" (skosimp)
    (("" (split)
      (("1" (inst 1 "null") (("1" (grind) nil nil)) nil)
       ("2" (expand "prefix_closed")
        (("2" (skosimp)
          (("2" (skolem-typepred)
            (("2" (replace -3 -2)
              (("2" (forward-chain "prefix_of_proj")
                (("2" (skosimp)
                  (("2" (inst?)
                    (("2" (delete -2 -4 -5)
                      (("2" (typepred "P!1")
                        (("2" (expand "prefix_closed")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((filter def-decl "list[T]" filters nil)
    (proj const-decl "[trace, set[T] -> trace]" traces nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil processes nil)
    (t2!2 skolem-const-decl "trace[T]" processes nil)
    (P!1 skolem-const-decl "process" processes nil)
    (complement const-decl "set" sets nil)
    (set type-eq-decl nil sets nil)
    (prefix_of_proj formula-decl nil traces nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (sigma_monotonic 0
  (sigma_monotonic-1 nil 3662229309
   ("" (auto-rewrite-theory "sets")
    (("" (skosimp)
      (("" (assert)
        (("" (skosimp)
          (("" (expand "sigma" -2)
            (("" (skolem-typepred)
              (("" (inst?)
                (("" (assert)
                  (("" (expand "sigma" 1) (("" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil processes nil)
    (list type-decl nil list_adt nil)
    (trace type-eq-decl nil traces nil)
    (setof type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (prefix_closed const-decl "bool" processes nil)
    (process type-eq-decl nil processes nil)
    (sigma const-decl "setof[T]" processes nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (subset_is_partial_order name-judgement "(partial_order?[set[T]])"
     sets_lemmas nil))
   nil))
 (rename_TCC1 0
  (rename_TCC1-1 nil 3662229309
   ("" (skolem-typepred)
    (("" (split)
      (("1" (inst?) (("1" (grind) nil nil)) nil)
       ("2" (delete -1)
        (("2" (expand "prefix_closed")
          (("2" (skosimp)
            (("2" (skolem-typepred)
              (("2" (forward-chain "prefix_trename")
                (("2" (skosimp)
                  (("2" (inst? -)
                    (("2" (assert) (("2" (inst?) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trename def-decl "bool" traces nil)
    (prefix_trename formula-decl nil traces nil)
    (process type-eq-decl nil processes nil)
    (prefix_closed const-decl "bool" processes nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (setof type-eq-decl nil defined_types nil)
    (trace type-eq-decl nil traces nil)
    (list type-decl nil list_adt nil)
    (T formal-type-decl nil processes nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil)))

